var searchIndex = {};
searchIndex["slog_stdlog"] = {"doc":"Standard Rust log crate adapter to slog-rs","items":[[5,"set_logger","slog_stdlog","Set a `slog::Logger` as a global `log` create handler",null,{"inputs":[{"name":"logger"}],"output":{"name":"result"}}],[5,"set_logger_level","","Set a `slog::Logger` as a global `log` create handler",null,{"inputs":[{"name":"logger"},{"name":"loglevelfilter"}],"output":{"name":"result"}}],[5,"init","","Minimal initialization with default drain",null,{"inputs":[],"output":{"name":"result"}}],[5,"with_current_logger","","Access the currently active logger",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[5,"scope","","Execute code in a logging scope",null,{"inputs":[{"name":"logger"},{"name":"sf"}],"output":{"name":"r"}}],[11,"new","crossbeam::sync::arc_cell","Creates a new `ArcCell`.",0,{"inputs":[{"name":"arc"}],"output":{"name":"arccell"}}],[11,"set","","Stores a new value in the `ArcCell`, returning the previous\nvalue.",0,null],[11,"get","","Returns a copy of the value stored by the `ArcCell`.",0,null],[11,"fmt","crossbeam::mem::epoch::atomic","",1,null],[11,"null","","",1,{"inputs":[],"output":{"name":"atomic"}}],[11,"new","","Create a new atomic pointer",1,{"inputs":[{"name":"t"}],"output":{"name":"atomic"}}],[11,"load","","Do an atomic load with the given memory ordering.",1,null],[11,"store","","Do an atomic store with the given memory ordering.",1,null],[11,"store_and_ref","","Do an atomic store with the given memory ordering, immediately yielding\na shared reference to the pointer that was stored.",1,null],[11,"store_shared","","Do an atomic store of a `Shared` pointer with the given memory ordering.",1,null],[11,"cas","","Do a compare-and-set from a `Shared` to an `Owned` pointer with the\ngiven memory ordering.",1,null],[11,"cas_and_ref","","Do a compare-and-set from a `Shared` to an `Owned` pointer with the\ngiven memory ordering, immediatley acquiring a new `Shared` reference to\nthe previously-owned pointer if successful.",1,null],[11,"cas_shared","","Do a compare-and-set from a `Shared` to another `Shared` pointer with\nthe given memory ordering.",1,null],[11,"swap","","Do an atomic swap with an `Owned` pointer with the given memory ordering.",1,null],[11,"swap_shared","","Do an atomic swap with a `Shared` pointer with the given memory ordering.",1,null],[11,"fmt","crossbeam::mem::epoch::guard","",2,null],[11,"unlinked","","Assert that the value is no longer reachable from a lock-free data\nstructure and should be collected when sufficient epochs have passed.",2,null],[11,"migrate_garbage","","Move the thread-local garbage into the global set of garbage.",2,null],[11,"drop","","",2,null],[11,"fmt","crossbeam::mem::epoch","",3,null],[11,"new","","Move `t` to a new heap allocation.",3,{"inputs":[{"name":"t"}],"output":{"name":"owned"}}],[11,"into_inner","","Move data out of the owned box, deallocating the box.",3,null],[11,"deref","","",3,null],[11,"deref_mut","","",3,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"fmt","","",4,null],[11,"clone","","",4,null],[11,"deref","","",4,null],[11,"as_raw","","",4,null],[11,"fmt","crossbeam::mem::cache_padded","",5,null],[11,"zeroed","","A const fn equivalent to mem::zeroed().",5,{"inputs":[],"output":{"name":"cachepadded"}}],[11,"new","","Wrap `t` with cacheline padding.",5,{"inputs":[{"name":"t"}],"output":{"name":"cachepadded"}}],[11,"deref","","",5,null],[11,"deref_mut","","",5,null],[11,"fmt","crossbeam::sync::atomic_option","",6,null],[11,"new","","",6,{"inputs":[],"output":{"name":"atomicoption"}}],[11,"swap_box","","",6,null],[11,"swap","","",6,null],[11,"take","","",6,null],[11,"fmt","crossbeam::sync::ms_queue","",7,null],[11,"new","","Create a new, empty queue.",7,{"inputs":[],"output":{"name":"msqueue"}}],[11,"push","","Add `t` to the back of the queue, possibly waking up threads\nblocked on `pop`.",7,null],[11,"is_empty","","Check if this queue is empty.",7,null],[11,"try_pop","","Attempt to dequeue from the front.",7,null],[11,"pop","","Dequeue an element from the front of the queue, blocking if the queue is\nempty.",7,null],[11,"fmt","crossbeam::sync::treiber_stack","",8,null],[11,"new","","Create a new, empty stack.",8,{"inputs":[],"output":{"name":"treiberstack"}}],[11,"push","","Push `t` on top of the stack.",8,null],[11,"pop","","Attempt to pop the top element of the stack.\n**Deprecated method**, use try_pop",8,null],[11,"try_pop","","Attempt to pop the top element of the stack.",8,null],[11,"is_empty","","Check if this queue is empty.",8,null],[11,"fmt","crossbeam::sync::seg_queue","",9,null],[11,"new","","Create a new, empty queue.",9,{"inputs":[],"output":{"name":"segqueue"}}],[11,"push","","Add `t` to the back of the queue.",9,null],[11,"try_pop","","Attempt to dequeue from the front.",9,null],[11,"fmt","crossbeam::sync::chase_lev","",10,null],[11,"fmt","","",11,null],[11,"fmt","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"push","","Pushes data onto the front of this work queue.",10,null],[11,"try_pop","","Pops data off the front of the work queue, returning `None` on an empty\nqueue.",10,null],[11,"steal","","Steals work off the end of the queue (opposite of the worker&#39;s end)",11,null],[11,"clone","","",11,null],[11,"fmt","crossbeam::sync::arc_cell","",0,null],[11,"drop","","",0,null],[11,"fmt","crossbeam::scoped","",13,null],[11,"fmt","","",14,null],[11,"defer","","Schedule code to be executed when exiting the scope.",13,null],[11,"spawn","","Create a scoped thread.",13,null],[11,"join","","Join the scoped thread, returning the result it produced.",14,null],[11,"thread","","Get the underlying thread handle.",14,null],[11,"drop","","",13,null]],"paths":[[3,"ArcCell"],[3,"Atomic"],[3,"Guard"],[3,"Owned"],[3,"Shared"],[3,"CachePadded"],[3,"AtomicOption"],[3,"MsQueue"],[3,"TreiberStack"],[3,"SegQueue"],[3,"Worker"],[3,"Stealer"],[4,"Steal"],[3,"Scope"],[3,"ScopedJoinHandle"]]};
searchIndex["crossbeam"] = {"doc":"Support for concurrent and parallel programming.","items":[[3,"Scope","crossbeam","",null,null],[3,"ScopedJoinHandle","","A handle to a scoped thread",null,null],[5,"scope","","Create a new `scope`, for deferred destructors.",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[5,"spawn_unsafe","","Like `std::thread::spawn`, but without the closure bounds.",null,{"inputs":[{"name":"f"}],"output":{"name":"joinhandle"}}],[0,"mem","","Memory management for concurrent data structures",null,null],[3,"CachePadded","crossbeam::mem","Pad `T` to the length of a cacheline.",null,null],[0,"epoch","","Epoch-based memory management",null,null],[3,"Atomic","crossbeam::mem::epoch","Like `std::sync::atomic::AtomicPtr`.",null,null],[3,"Guard","","An RAII-style guard for pinning the current epoch.",null,null],[3,"Owned","","Like `Box&lt;T&gt;`: an owned, heap-allocated data value of type `T`.",null,null],[3,"Shared","","Like `&amp;&#39;a T`: a shared reference valid for lifetime `&#39;a`.",null,null],[5,"pin","","Pin the current epoch.",null,{"inputs":[],"output":{"name":"guard"}}],[11,"fmt","","",0,null],[11,"null","","",0,{"inputs":[],"output":{"name":"atomic"}}],[11,"new","","Create a new atomic pointer",0,{"inputs":[{"name":"t"}],"output":{"name":"atomic"}}],[11,"load","","Do an atomic load with the given memory ordering.",0,null],[11,"store","","Do an atomic store with the given memory ordering.",0,null],[11,"store_and_ref","","Do an atomic store with the given memory ordering, immediately yielding\na shared reference to the pointer that was stored.",0,null],[11,"store_shared","","Do an atomic store of a `Shared` pointer with the given memory ordering.",0,null],[11,"cas","","Do a compare-and-set from a `Shared` to an `Owned` pointer with the\ngiven memory ordering.",0,null],[11,"cas_and_ref","","Do a compare-and-set from a `Shared` to an `Owned` pointer with the\ngiven memory ordering, immediatley acquiring a new `Shared` reference to\nthe previously-owned pointer if successful.",0,null],[11,"cas_shared","","Do a compare-and-set from a `Shared` to another `Shared` pointer with\nthe given memory ordering.",0,null],[11,"swap","","Do an atomic swap with an `Owned` pointer with the given memory ordering.",0,null],[11,"swap_shared","","Do an atomic swap with a `Shared` pointer with the given memory ordering.",0,null],[11,"fmt","","",1,null],[11,"unlinked","","Assert that the value is no longer reachable from a lock-free data\nstructure and should be collected when sufficient epochs have passed.",1,null],[11,"migrate_garbage","","Move the thread-local garbage into the global set of garbage.",1,null],[11,"drop","","",1,null],[11,"fmt","","",2,null],[11,"new","","Move `t` to a new heap allocation.",2,{"inputs":[{"name":"t"}],"output":{"name":"owned"}}],[11,"into_inner","","Move data out of the owned box, deallocating the box.",2,null],[11,"deref","","",2,null],[11,"deref_mut","","",2,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"deref","","",3,null],[11,"as_raw","","",3,null],[11,"fmt","crossbeam::mem","",4,null],[11,"zeroed","","A const fn equivalent to mem::zeroed().",4,{"inputs":[],"output":{"name":"cachepadded"}}],[11,"new","","Wrap `t` with cacheline padding.",4,{"inputs":[{"name":"t"}],"output":{"name":"cachepadded"}}],[11,"deref","","",4,null],[11,"deref_mut","","",4,null],[8,"ZerosValid","","Types for which mem::zeroed() is safe.",null,null],[0,"sync","crossbeam","Synchronization primitives.",null,null],[3,"MsQueue","crossbeam::sync","A Michael-Scott lock-free queue, with support for blocking `pop`s.",null,null],[3,"AtomicOption","","",null,null],[3,"TreiberStack","","Treiber&#39;s lock-free stack.",null,null],[3,"SegQueue","","A Michael-Scott queue that allocates &quot;segments&quot; (arrays of nodes)\nfor efficiency.",null,null],[3,"ArcCell","","A type providing atomic storage and retrieval of an `Arc&lt;T&gt;`.",null,null],[11,"fmt","","",5,null],[11,"new","","",5,{"inputs":[],"output":{"name":"atomicoption"}}],[11,"swap_box","","",5,null],[11,"swap","","",5,null],[11,"take","","",5,null],[11,"fmt","","",6,null],[11,"new","","Create a new, empty queue.",6,{"inputs":[],"output":{"name":"msqueue"}}],[11,"push","","Add `t` to the back of the queue, possibly waking up threads\nblocked on `pop`.",6,null],[11,"is_empty","","Check if this queue is empty.",6,null],[11,"try_pop","","Attempt to dequeue from the front.",6,null],[11,"pop","","Dequeue an element from the front of the queue, blocking if the queue is\nempty.",6,null],[11,"fmt","","",7,null],[11,"new","","Create a new, empty stack.",7,{"inputs":[],"output":{"name":"treiberstack"}}],[11,"push","","Push `t` on top of the stack.",7,null],[11,"pop","","Attempt to pop the top element of the stack.\n**Deprecated method**, use try_pop",7,null],[11,"try_pop","","Attempt to pop the top element of the stack.",7,null],[11,"is_empty","","Check if this queue is empty.",7,null],[11,"fmt","","",8,null],[11,"new","","Create a new, empty queue.",8,{"inputs":[],"output":{"name":"segqueue"}}],[11,"push","","Add `t` to the back of the queue.",8,null],[11,"try_pop","","Attempt to dequeue from the front.",8,null],[0,"chase_lev","","A lock-free concurrent work-stealing deque",null,null],[3,"Worker","crossbeam::sync::chase_lev","Worker half of the work-stealing deque. This worker has exclusive access to\none side of the deque, and uses `push` and `try_pop` method to manipulate it.",null,null],[3,"Stealer","","The stealing half of the work-stealing deque. Stealers have access to the\nopposite end of the deque from the worker, and they only have access to the\n`steal` method.",null,null],[4,"Steal","","When stealing some data, this is an enumeration of the possible outcomes.",null,null],[13,"Empty","","The deque was empty at the time of stealing",9,null],[13,"Abort","","The stealer lost the race for stealing data, and a retry may return more\ndata.",9,null],[13,"Data","","The stealer has successfully stolen some data.",9,null],[5,"deque","","Creates a new empty deque",null,null],[11,"fmt","","",10,null],[11,"fmt","","",11,null],[11,"fmt","","",9,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"push","","Pushes data onto the front of this work queue.",10,null],[11,"try_pop","","Pops data off the front of the work queue, returning `None` on an empty\nqueue.",10,null],[11,"steal","","Steals work off the end of the queue (opposite of the worker&#39;s end)",11,null],[11,"clone","","",11,null],[11,"fmt","crossbeam::sync","",12,null],[11,"drop","","",12,null],[11,"new","","Creates a new `ArcCell`.",12,{"inputs":[{"name":"arc"}],"output":{"name":"arccell"}}],[11,"set","","Stores a new value in the `ArcCell`, returning the previous\nvalue.",12,null],[11,"get","","Returns a copy of the value stored by the `ArcCell`.",12,null],[11,"fmt","crossbeam","",13,null],[11,"fmt","","",14,null],[11,"defer","","Schedule code to be executed when exiting the scope.",13,null],[11,"spawn","","Create a scoped thread.",13,null],[11,"join","","Join the scoped thread, returning the result it produced.",14,null],[11,"thread","","Get the underlying thread handle.",14,null],[11,"drop","","",13,null]],"paths":[[3,"Atomic"],[3,"Guard"],[3,"Owned"],[3,"Shared"],[3,"CachePadded"],[3,"AtomicOption"],[3,"MsQueue"],[3,"TreiberStack"],[3,"SegQueue"],[4,"Steal"],[3,"Worker"],[3,"Stealer"],[3,"ArcCell"],[3,"Scope"],[3,"ScopedJoinHandle"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[11,"hash","core::num","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",0,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"eq","core::num::dec2flt","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"fmt","core::num","",2,null],[11,"eq","","",2,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"hash","core::nonzero","",5,null],[11,"fmt","","",5,null],[11,"partial_cmp","","",5,null],[11,"lt","","",5,null],[11,"le","","",5,null],[11,"gt","","",5,null],[11,"ge","","",5,null],[11,"cmp","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",5,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",5,null],[11,"new","core::ptr","Creates a new `Unique`.",6,null],[11,"get","","Dereferences the content.",6,null],[11,"get_mut","","Mutably dereferences the content.",6,null],[11,"deref","","",6,null],[11,"fmt","","",6,null],[11,"new","","Creates a new `Shared`.",7,null],[11,"clone","","",7,null],[11,"deref","","",7,null],[11,"fmt","","",7,null],[11,"hash","core::marker","",8,null],[11,"eq","","",8,null],[11,"partial_cmp","","",8,null],[11,"cmp","","",8,null],[11,"clone","","",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"hash","core::ops","",9,null],[11,"eq","","",9,null],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"hash","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"contains","","# Examples",10,null],[11,"hash","","",11,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"contains","","# Examples",11,null],[11,"hash","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"clone","","",12,null],[11,"fmt","","",12,null],[11,"contains","","# Examples",12,null],[11,"hash","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"contains","","# Examples",13,null],[11,"hash","","",14,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"clone","","",14,null],[11,"fmt","","",14,null],[11,"contains","","# Examples",14,null],[11,"hash","core::cmp","",15,null],[11,"fmt","","",15,null],[11,"eq","","",15,null],[11,"clone","","",15,null],[11,"reverse","","Reverse the `Ordering`.",15,null],[11,"cmp","","",15,null],[11,"partial_cmp","","",15,null],[11,"fmt","","",16,null],[11,"fmt","","",16,null],[11,"is","","Returns true if the boxed type is the same as `T`",16,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,null],[11,"is","","Forwards to the method defined on the type `Any`.",16,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",16,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",16,null],[11,"hash","core::any","",17,null],[11,"fmt","","",17,null],[11,"eq","","",17,null],[11,"ne","","",17,null],[11,"clone","","",17,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",17,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",18,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",20,null],[11,"clone","","",20,null],[11,"new","","Creates a new `AtomicBool`.",18,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",18,null],[11,"store","","Stores a value into the bool.",18,null],[11,"swap","","Stores a value into the bool, returning the old value.",18,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",18,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",18,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",18,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",18,null],[11,"new","","Creates a new `AtomicPtr`.",19,null],[11,"load","","Loads a value from the pointer.",19,null],[11,"store","","Stores a value into the pointer.",19,null],[11,"swap","","Stores a value into the pointer, returning the old value.",19,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"default","","",21,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",21,null],[11,"new","","Creates a new atomic integer.",21,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",21,null],[11,"store","","Stores a value into the atomic integer.",21,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",21,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"fetch_add","","Add to the current value, returning the previous value.",21,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",21,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",21,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",21,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",21,null],[11,"default","","",22,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",22,null],[11,"new","","Creates a new atomic integer.",22,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",22,null],[11,"store","","Stores a value into the atomic integer.",22,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",22,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"fetch_add","","Add to the current value, returning the previous value.",22,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",22,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",22,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",22,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",22,null],[11,"default","","",23,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",23,null],[11,"new","","Creates a new atomic integer.",23,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",23,null],[11,"store","","Stores a value into the atomic integer.",23,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",23,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"fetch_add","","Add to the current value, returning the previous value.",23,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",23,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",23,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",23,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",23,null],[11,"default","","",24,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",24,null],[11,"new","","Creates a new atomic integer.",24,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",24,null],[11,"store","","Stores a value into the atomic integer.",24,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",24,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"fetch_add","","Add to the current value, returning the previous value.",24,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",24,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",24,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",24,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",24,null],[11,"default","","",25,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",25,null],[11,"new","","Creates a new atomic integer.",25,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",25,null],[11,"store","","Stores a value into the atomic integer.",25,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",25,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"fetch_add","","Add to the current value, returning the previous value.",25,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",25,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",25,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",25,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",25,null],[11,"default","","",26,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",26,null],[11,"new","","Creates a new atomic integer.",26,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",26,null],[11,"store","","Stores a value into the atomic integer.",26,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",26,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"fetch_add","","Add to the current value, returning the previous value.",26,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",26,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",26,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",26,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",26,null],[11,"default","","",27,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",27,null],[11,"new","","Creates a new atomic integer.",27,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",27,null],[11,"store","","Stores a value into the atomic integer.",27,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",27,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"fetch_add","","Add to the current value, returning the previous value.",27,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",27,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",27,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",27,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",27,null],[11,"default","","",28,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",28,null],[11,"new","","Creates a new atomic integer.",28,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",28,null],[11,"store","","Stores a value into the atomic integer.",28,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",28,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"fetch_add","","Add to the current value, returning the previous value.",28,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",28,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",28,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",28,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",28,null],[11,"default","","",29,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",29,null],[11,"new","","Creates a new atomic integer.",29,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",29,null],[11,"store","","Stores a value into the atomic integer.",29,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",29,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"fetch_add","","Add to the current value, returning the previous value.",29,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",29,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",29,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",29,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",29,null],[11,"default","","",30,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",30,null],[11,"new","","Creates a new atomic integer.",30,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",30,null],[11,"store","","Stores a value into the atomic integer.",30,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",30,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"fetch_add","","Add to the current value, returning the previous value.",30,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",30,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",30,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",30,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",30,null],[11,"fmt","","",18,null],[11,"fmt","","",19,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",31,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",31,null],[11,"set","","Sets the contained value.",31,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",31,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",31,null],[11,"clone","","",31,null],[11,"default","","",31,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",31,null],[11,"partial_cmp","","",31,null],[11,"lt","","",31,null],[11,"le","","",31,null],[11,"gt","","",31,null],[11,"ge","","",31,null],[11,"cmp","","",31,null],[11,"fmt","","",32,null],[11,"eq","","",32,null],[11,"clone","","",32,null],[11,"new","","Creates a new `RefCell` containing `value`.",33,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",33,null],[11,"borrow_state","","Query the current state of this `RefCell`",33,null],[11,"borrow","","Immutably borrows the wrapped value.",33,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",33,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",33,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",33,null],[11,"clone","","",33,null],[11,"default","","",33,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",33,null],[11,"partial_cmp","","",33,null],[11,"lt","","",33,null],[11,"le","","",33,null],[11,"gt","","",33,null],[11,"ge","","",33,null],[11,"cmp","","",33,null],[11,"deref","","",34,null],[11,"clone","","Copies a `Ref`.",34,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",34,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",35,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"deref","","",35,null],[11,"deref_mut","","",35,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",36,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",36,null],[11,"get","","Gets a mutable pointer to the wrapped value.",36,null],[11,"default","","",36,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",37,null],[11,"clone","","",37,null],[11,"next","","",37,null],[11,"size_hint","","",37,null],[11,"count","","",37,null],[11,"last","","",37,null],[11,"len","","",37,null],[11,"fmt","","",38,null],[11,"clone","","",38,null],[11,"next","","",38,null],[11,"size_hint","","",38,null],[11,"count","","",38,null],[11,"nth","","",38,null],[11,"last","","",38,null],[11,"len","","",38,null],[11,"fmt","","",39,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",39,null],[11,"next","","",39,null],[11,"size_hint","","",39,null],[11,"fmt","","",40,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",40,null],[11,"next","","",40,null],[11,"size_hint","","",40,null],[11,"fmt","core::iter::range","",41,null],[11,"clone","","",41,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",11,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",10,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",13,null],[11,"next","core::iter::range","",41,null],[11,"size_hint","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next","core::ops","",10,null],[11,"size_hint","","",10,null],[11,"next_back","","",10,null],[11,"next","","",11,null],[11,"next","","",13,null],[11,"size_hint","","",13,null],[11,"next_back","","",13,null],[11,"fmt","core::iter::sources","",42,null],[11,"clone","","",42,null],[11,"next","","",42,null],[11,"size_hint","","",42,null],[11,"next_back","","",42,null],[11,"fmt","","",43,null],[11,"next","","",43,null],[11,"size_hint","","",43,null],[11,"next_back","","",43,null],[11,"len","","",43,null],[11,"clone","","",43,null],[11,"default","","",43,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",44,null],[11,"clone","","",44,null],[11,"next","","",44,null],[11,"size_hint","","",44,null],[11,"next_back","","",44,null],[11,"len","","",44,null],[11,"fmt","core::iter","",45,null],[11,"clone","","",45,null],[11,"next","","",45,null],[11,"size_hint","","",45,null],[11,"next_back","","",45,null],[11,"fmt","","",46,null],[11,"clone","","",46,null],[11,"next","","",46,null],[11,"size_hint","","",46,null],[11,"next_back","","",46,null],[11,"fmt","","",47,null],[11,"clone","","",47,null],[11,"next","","",47,null],[11,"size_hint","","",47,null],[11,"fmt","","",48,null],[11,"clone","","",48,null],[11,"next","","",48,null],[11,"count","","",48,null],[11,"nth","","",48,null],[11,"find","","",48,null],[11,"last","","",48,null],[11,"size_hint","","",48,null],[11,"next_back","","",48,null],[11,"fmt","","",49,null],[11,"clone","","",49,null],[11,"next","","",49,null],[11,"size_hint","","",49,null],[11,"next_back","","",49,null],[11,"clone","","",50,null],[11,"fmt","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next_back","","",50,null],[11,"clone","","",51,null],[11,"fmt","","",51,null],[11,"next","","",51,null],[11,"size_hint","","",51,null],[11,"next_back","","",51,null],[11,"clone","","",52,null],[11,"fmt","","",52,null],[11,"next","","",52,null],[11,"size_hint","","",52,null],[11,"next_back","","",52,null],[11,"fmt","","",53,null],[11,"clone","","",53,null],[11,"next","","# Overflow Behavior",53,null],[11,"size_hint","","",53,null],[11,"nth","","",53,null],[11,"count","","",53,null],[11,"next_back","","",53,null],[11,"fmt","","",54,null],[11,"clone","","",54,null],[11,"next","","",54,null],[11,"count","","",54,null],[11,"nth","","",54,null],[11,"last","","",54,null],[11,"size_hint","","",54,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",54,null],[11,"is_empty","","Checks if the iterator has finished iterating.",54,null],[11,"clone","","",55,null],[11,"fmt","","",55,null],[11,"next","","",55,null],[11,"size_hint","","",55,null],[11,"clone","","",56,null],[11,"fmt","","",56,null],[11,"next","","",56,null],[11,"size_hint","","",56,null],[11,"fmt","","",57,null],[11,"clone","","",57,null],[11,"next","","",57,null],[11,"nth","","",57,null],[11,"count","","",57,null],[11,"last","","",57,null],[11,"size_hint","","",57,null],[11,"next_back","","",57,null],[11,"fmt","","",58,null],[11,"clone","","",58,null],[11,"next","","",58,null],[11,"nth","","",58,null],[11,"size_hint","","",58,null],[11,"clone","","",59,null],[11,"fmt","","",59,null],[11,"next","","",59,null],[11,"size_hint","","",59,null],[11,"clone","","",60,null],[11,"fmt","","",60,null],[11,"next","","",60,null],[11,"size_hint","","",60,null],[11,"next_back","","",60,null],[11,"fmt","","",61,null],[11,"clone","","",61,null],[11,"next","","",61,null],[11,"nth","","",61,null],[11,"last","","",61,null],[11,"count","","",61,null],[11,"size_hint","","",61,null],[11,"next_back","","",61,null],[11,"clone","","",62,null],[11,"fmt","","",62,null],[11,"next","","",62,null],[11,"size_hint","","",62,null],[11,"next_back","","",62,null],[11,"hash","core::option","",63,null],[11,"fmt","","",63,null],[11,"cmp","","",63,null],[11,"partial_cmp","","",63,null],[11,"lt","","",63,null],[11,"le","","",63,null],[11,"gt","","",63,null],[11,"ge","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"clone","","",63,null],[11,"is_some","","Returns `true` if the option is a `Some` value",63,null],[11,"is_none","","Returns `true` if the option is a `None` value",63,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",63,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",63,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",63,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",63,null],[11,"unwrap_or","","Returns the contained value or a default.",63,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",63,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",63,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",63,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",63,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",63,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",63,null],[11,"iter","","Returns an iterator over the possibly contained value.",63,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",63,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",63,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",63,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",63,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",63,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",63,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",63,null],[11,"unwrap_or_default","","Returns the contained value or a default",63,null],[11,"default","","",63,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",63,null],[11,"fmt","","",64,null],[11,"next","","",64,null],[11,"size_hint","","",64,null],[11,"next_back","","",64,null],[11,"clone","","",64,null],[11,"fmt","","",65,null],[11,"next","","",65,null],[11,"size_hint","","",65,null],[11,"next_back","","",65,null],[11,"fmt","","",66,null],[11,"clone","","",66,null],[11,"next","","",66,null],[11,"size_hint","","",66,null],[11,"next_back","","",66,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",63,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",67,null],[11,"hash","core::result","",68,null],[11,"fmt","","",68,null],[11,"cmp","","",68,null],[11,"partial_cmp","","",68,null],[11,"lt","","",68,null],[11,"le","","",68,null],[11,"gt","","",68,null],[11,"ge","","",68,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"clone","","",68,null],[11,"is_ok","","Returns true if the result is `Ok`",68,null],[11,"is_err","","Returns true if the result is `Err`",68,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",68,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",68,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",68,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",68,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",68,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",68,null],[11,"iter","","Returns an iterator over the possibly contained value.",68,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",68,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",68,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",68,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",68,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",68,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",68,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",68,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",68,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",68,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",68,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",68,null],[11,"fmt","","",69,null],[11,"next","","",69,null],[11,"size_hint","","",69,null],[11,"next_back","","",69,null],[11,"clone","","",69,null],[11,"fmt","","",70,null],[11,"next","","",70,null],[11,"size_hint","","",70,null],[11,"next_back","","",70,null],[11,"fmt","","",71,null],[11,"next","","",71,null],[11,"size_hint","","",71,null],[11,"next_back","","",71,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",68,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",72,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",72,null],[11,"next","","",72,null],[11,"size_hint","","",72,null],[11,"count","","",72,null],[11,"nth","","",72,null],[11,"last","","",72,null],[11,"next_back","","",72,null],[11,"clone","","",72,null],[11,"fmt","","",73,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",73,null],[11,"next","","",73,null],[11,"size_hint","","",73,null],[11,"count","","",73,null],[11,"nth","","",73,null],[11,"last","","",73,null],[11,"next_back","","",73,null],[11,"fmt","","",74,null],[11,"clone","","",74,null],[11,"next","","",74,null],[11,"size_hint","","",74,null],[11,"next_back","","",74,null],[11,"fmt","","",75,null],[11,"next","","",75,null],[11,"size_hint","","",75,null],[11,"next_back","","",75,null],[11,"fmt","","",76,null],[11,"fmt","","",77,null],[11,"fmt","","",78,null],[11,"fmt","","",79,null],[11,"next","","",76,null],[11,"size_hint","","",76,null],[11,"next","","",77,null],[11,"size_hint","","",77,null],[11,"next","","",78,null],[11,"size_hint","","",78,null],[11,"next","","",79,null],[11,"size_hint","","",79,null],[11,"fmt","","",80,null],[11,"clone","","",80,null],[11,"next","","",80,null],[11,"size_hint","","",80,null],[11,"count","","",80,null],[11,"nth","","",80,null],[11,"last","","",80,null],[11,"next_back","","",80,null],[11,"fmt","","",81,null],[11,"clone","","",81,null],[11,"next","","",81,null],[11,"size_hint","","",81,null],[11,"count","","",81,null],[11,"nth","","",81,null],[11,"last","","",81,null],[11,"next_back","","",81,null],[11,"fmt","","",82,null],[11,"next","","",82,null],[11,"size_hint","","",82,null],[11,"count","","",82,null],[11,"nth","","",82,null],[11,"last","","",82,null],[11,"next_back","","",82,null],[11,"fmt","core::str::pattern","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"clone","","",83,null],[11,"fmt","","",84,null],[11,"clone","","",84,null],[11,"haystack","","",84,null],[11,"next","","",84,null],[11,"next_match","","",84,null],[11,"next_reject","","",84,null],[11,"next_back","","",84,null],[11,"next_match_back","","",84,null],[11,"next_reject_back","","",84,null],[11,"fmt","","",85,null],[11,"clone","","",85,null],[11,"haystack","","",85,null],[11,"next","","",85,null],[11,"next_match","","",85,null],[11,"next_reject","","",85,null],[11,"next_back","","",85,null],[11,"next_match_back","","",85,null],[11,"next_reject_back","","",85,null],[11,"clone","","",86,null],[11,"fmt","","",86,null],[11,"haystack","","",86,null],[11,"next","","",86,null],[11,"next_match","","",86,null],[11,"next_reject","","",86,null],[11,"next_back","","",86,null],[11,"next_match_back","","",86,null],[11,"next_reject_back","","",86,null],[11,"fmt","","",87,null],[11,"clone","","",87,null],[11,"haystack","","",87,null],[11,"next","","",87,null],[11,"next_match","","",87,null],[11,"next_back","","",87,null],[11,"next_match_back","","",87,null],[11,"eq","core::str","",88,null],[11,"ne","","",88,null],[11,"clone","","",88,null],[11,"fmt","","",88,null],[11,"fmt","","",88,null],[11,"fmt","","",89,null],[11,"clone","","",89,null],[11,"eq","","",89,null],[11,"ne","","",89,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",89,null],[11,"fmt","","",89,null],[11,"fmt","","",90,null],[11,"clone","","",90,null],[11,"next","","",90,null],[11,"size_hint","","",90,null],[11,"next_back","","",90,null],[11,"as_str","","View the underlying data as a subslice of the original data.",90,null],[11,"fmt","","",91,null],[11,"clone","","",91,null],[11,"next","","",91,null],[11,"size_hint","","",91,null],[11,"next_back","","",91,null],[11,"as_str","","View the underlying data as a subslice of the original data.",91,null],[11,"fmt","","",92,null],[11,"clone","","",92,null],[11,"next","","",92,null],[11,"size_hint","","",92,null],[11,"count","","",92,null],[11,"last","","",92,null],[11,"nth","","",92,null],[11,"next_back","","",92,null],[11,"len","","",92,null],[11,"fmt","","",93,null],[11,"next","","",93,null],[11,"clone","","",93,null],[11,"fmt","","",94,null],[11,"next","","",94,null],[11,"clone","","",94,null],[11,"next_back","","",93,null],[11,"next_back","","",94,null],[11,"fmt","","",95,null],[11,"next","","",95,null],[11,"clone","","",95,null],[11,"fmt","","",96,null],[11,"next","","",96,null],[11,"clone","","",96,null],[11,"next_back","","",95,null],[11,"next_back","","",96,null],[11,"fmt","","",97,null],[11,"next","","",97,null],[11,"clone","","",97,null],[11,"fmt","","",98,null],[11,"next","","",98,null],[11,"clone","","",98,null],[11,"fmt","","",99,null],[11,"next","","",99,null],[11,"clone","","",99,null],[11,"fmt","","",100,null],[11,"next","","",100,null],[11,"clone","","",100,null],[11,"next_back","","",99,null],[11,"next_back","","",100,null],[11,"fmt","","",101,null],[11,"next","","",101,null],[11,"clone","","",101,null],[11,"fmt","","",102,null],[11,"next","","",102,null],[11,"clone","","",102,null],[11,"next_back","","",101,null],[11,"next_back","","",102,null],[11,"fmt","","",103,null],[11,"clone","","",103,null],[11,"next","","",103,null],[11,"size_hint","","",103,null],[11,"next_back","","",103,null],[11,"fmt","","",104,null],[11,"clone","","",104,null],[11,"next","","",104,null],[11,"size_hint","","",104,null],[11,"next_back","","",104,null],[11,"default","core::hash::sip","",105,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"clone","","",105,null],[11,"fmt","","",105,null],[11,"default","","",106,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"clone","","",106,null],[11,"fmt","","",106,null],[11,"default","","",107,{"inputs":[],"output":{"name":"siphasher"}}],[11,"clone","","",107,null],[11,"fmt","","",107,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",107,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",107,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",105,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",105,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",106,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",106,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"write","","",107,null],[11,"finish","","",107,null],[11,"write","","",105,null],[11,"finish","","",105,null],[11,"write","","",106,null],[11,"finish","","",106,null],[11,"fmt","core::hash","",108,null],[11,"build_hasher","","",108,null],[11,"clone","","",108,null],[11,"default","","",108,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",109,null],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",110,null],[11,"finish","","Finishes output and returns any error encountered.",110,null],[11,"field","","Adds a new field to the generated tuple struct output.",111,null],[11,"finish","","Finishes output and returns any error encountered.",111,null],[11,"entry","","Adds a new entry to the set output.",112,null],[11,"entries","","Adds the contents of an iterator of entries to the set output.",112,null],[11,"finish","","Finishes output and returns any error encountered.",112,null],[11,"entry","","Adds a new entry to the list output.",113,null],[11,"entries","","Adds the contents of an iterator of entries to the list output.",113,null],[11,"finish","","Finishes output and returns any error encountered.",113,null],[11,"entry","","Adds a new entry to the map output.",114,null],[11,"entries","","Adds the contents of an iterator of entries to the map output.",114,null],[11,"finish","","Finishes output and returns any error encountered.",114,null],[11,"partial_cmp","core::fmt","",115,null],[11,"eq","","",115,null],[11,"cmp","","",115,null],[11,"hash","","",115,null],[11,"default","","",115,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",115,null],[11,"clone","","",115,null],[11,"clone","","",116,null],[11,"fmt","","",116,null],[11,"fmt","","",116,null],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",117,null],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",117,null],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",117,null],[11,"write_fmt","","Writes some formatted information into this instance",117,null],[11,"flags","","Flags for formatting (packed version of rt::Flag)",117,null],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",117,null],[11,"align","","Flag indicating what form of alignment was requested",117,null],[11,"width","","Optionally specified integer width that the output should be",117,null],[11,"precision","","Optionally specified precision for numeric types",117,null],[11,"sign_plus","","Determines if the `+` flag was specified.",117,null],[11,"sign_minus","","Determines if the `-` flag was specified.",117,null],[11,"alternate","","Determines if the `#` flag was specified.",117,null],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",117,null],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",117,null],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",117,null],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",117,null],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",117,null],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",117,null],[11,"write_str","","",117,null],[11,"write_char","","",117,null],[11,"write_fmt","","",117,null],[11,"fmt","","",115,null],[11,"fmt","core::marker","",8,null],[11,"fmt","core::cell","",31,null],[11,"fmt","","",33,null],[11,"fmt","","",34,null],[11,"fmt","","",35,null],[11,"fmt","","",36,null],[8,"__Deref","lazy_static","The `Deref` trait is used to specify the functionality of dereferencing\noperations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",118,null],[10,"deref","","The method called to dereference a value",118,null],[0,"lazy","","",null,null],[3,"Lazy","lazy_static::lazy","",null,null],[12,"0","","",119,null],[12,"1","","",119,null],[11,"get","","",119,null],[14,"__lazy_static_create!","lazy_static","",null,null],[14,"lazy_static!","","",null,null]],"paths":[[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"__Deref"],[3,"Lazy"]]};
searchIndex["slog_term"] = {"doc":"Unix terminal formatter and drain for slog-rs","items":[[3,"Format","slog_term","Format formatting with optional color support",null,null],[5,"format_colored","","Short for `Format::colored()`",null,{"inputs":[],"output":{"name":"format"}}],[5,"format_plain","","Short for `Format::plain()`",null,{"inputs":[],"output":{"name":"format"}}],[5,"stdout","","Drain to `stdout`",null,{"inputs":[],"output":{"name":"streamer"}}],[5,"stderr","","Drain to `stderr`",null,{"inputs":[],"output":{"name":"streamer"}}],[5,"async_stdout","","Asynchronous drain to `stdout`",null,{"inputs":[],"output":{"name":"asyncstreamer"}}],[5,"async_stderr","","Asynchronos drain to `stderr`",null,{"inputs":[],"output":{"name":"asyncstreamer"}}],[11,"colored","","New Format format that prints using color",0,{"inputs":[],"output":{"name":"self"}}],[11,"plain","","New Format format that prints without using color",0,{"inputs":[],"output":{"name":"self"}}],[11,"format","","",0,null]],"paths":[[3,"Format"]]};
searchIndex["slog_syslog"] = {"doc":"Syslog drain for slog-rs","items":[[11,"clone","syslog::facility","",0,null],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","syslog","",1,null],[11,"format_3164","","format a message as a RFC 3164 log message",2,null],[11,"format_5424_structured_data","","format RFC 5424 structured data as `([id (name=&quot;value&quot;)*])*`",2,null],[11,"format_5424","","format a message as a RFC 5424 log message",2,null],[11,"send","","Sends a basic log message of the format `&lt;priority&gt; message`",2,null],[11,"send_3164","","Sends a RFC 3164 log message",2,null],[11,"send_5424","","Sends a RFC 5424 log message",2,null],[11,"send_raw","","Sends a message directly, without any formatting",2,null],[11,"emerg","","",2,null],[11,"alert","","",2,null],[11,"crit","","",2,null],[11,"err","","",2,null],[11,"warning","","",2,null],[11,"notice","","",2,null],[11,"info","","",2,null],[11,"debug","","",2,null],[11,"process_name","","",2,null],[11,"process_id","","",2,null],[11,"set_process_name","","",2,null],[11,"set_process_id","","",2,null],[11,"enabled","","",2,null],[11,"log","","",2,null],[4,"Facility","slog_syslog","",null,null],[13,"LOG_KERN","","",0,null],[13,"LOG_USER","","",0,null],[13,"LOG_MAIL","","",0,null],[13,"LOG_DAEMON","","",0,null],[13,"LOG_AUTH","","",0,null],[13,"LOG_SYSLOG","","",0,null],[13,"LOG_LPR","","",0,null],[13,"LOG_NEWS","","",0,null],[13,"LOG_UUCP","","",0,null],[13,"LOG_CRON","","",0,null],[13,"LOG_AUTHPRIV","","",0,null],[13,"LOG_FTP","","",0,null],[13,"LOG_LOCAL0","","",0,null],[13,"LOG_LOCAL1","","",0,null],[13,"LOG_LOCAL2","","",0,null],[13,"LOG_LOCAL3","","",0,null],[13,"LOG_LOCAL4","","",0,null],[13,"LOG_LOCAL5","","",0,null],[13,"LOG_LOCAL6","","",0,null],[13,"LOG_LOCAL7","","",0,null],[3,"Streamer3164","","Drain formatting records and writing them to a syslog ``Logger`",null,null],[3,"Format3164","","Formatter to format defined in RFC 3164",null,null],[5,"unix_3164","","``Streamer` to Unix syslog using RFC 3164 format",null,{"inputs":[{"name":"facility"}],"output":{"name":"streamer3164"}}],[11,"new","","Create new syslog ``Streamer` using given `format`",3,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"log","","",3,null],[11,"new","","Create new `Format3164`",4,{"inputs":[],"output":{"name":"self"}}],[11,"format","","",4,null]],"paths":[[4,"Facility"],[4,"Severity"],[3,"Logger"],[3,"Streamer3164"],[3,"Format3164"]]};
searchIndex["syslog"] = {"doc":"Syslog","items":[[3,"Logger","syslog","Main logging structure",null,null],[4,"Facility","","",null,null],[13,"LOG_KERN","","",0,null],[13,"LOG_USER","","",0,null],[13,"LOG_MAIL","","",0,null],[13,"LOG_DAEMON","","",0,null],[13,"LOG_AUTH","","",0,null],[13,"LOG_SYSLOG","","",0,null],[13,"LOG_LPR","","",0,null],[13,"LOG_NEWS","","",0,null],[13,"LOG_UUCP","","",0,null],[13,"LOG_CRON","","",0,null],[13,"LOG_AUTHPRIV","","",0,null],[13,"LOG_FTP","","",0,null],[13,"LOG_LOCAL0","","",0,null],[13,"LOG_LOCAL1","","",0,null],[13,"LOG_LOCAL2","","",0,null],[13,"LOG_LOCAL3","","",0,null],[13,"LOG_LOCAL4","","",0,null],[13,"LOG_LOCAL5","","",0,null],[13,"LOG_LOCAL6","","",0,null],[13,"LOG_LOCAL7","","",0,null],[4,"Severity","","",null,null],[13,"LOG_EMERG","","",1,null],[13,"LOG_ALERT","","",1,null],[13,"LOG_CRIT","","",1,null],[13,"LOG_ERR","","",1,null],[13,"LOG_WARNING","","",1,null],[13,"LOG_NOTICE","","",1,null],[13,"LOG_INFO","","",1,null],[13,"LOG_DEBUG","","",1,null],[5,"unix","","Returns a Logger using unix socket to target local syslog ( using /dev/log or /var/run/syslog)",null,{"inputs":[{"name":"facility"}],"output":{"name":"result"}}],[5,"udp","","returns a UDP logger connecting `local` and `server`",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"string"},{"name":"facility"}],"output":{"name":"result"}}],[5,"tcp","","returns a TCP logger connecting `local` and `server`",null,{"inputs":[{"name":"t"},{"name":"string"},{"name":"facility"}],"output":{"name":"result"}}],[5,"init_unix","","Unix socket Logger init function compatible with log crate",null,{"inputs":[{"name":"facility"}],"output":{"name":"result"}}],[5,"init_udp","","UDP Logger init function compatible with log crate",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"string"},{"name":"facility"}],"output":{"name":"result"}}],[5,"init_tcp","","TCP Logger init function compatible with log crate",null,{"inputs":[{"name":"t"},{"name":"string"},{"name":"facility"}],"output":{"name":"result"}}],[5,"init","","Initializes logging subsystem for log crate",null,{"inputs":[{"name":"facility"},{"name":"loglevelfilter"},{"name":"option"}],"output":{"name":"result"}}],[11,"clone","","",0,null],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[6,"Priority","","",null,null],[6,"StructuredData","","RFC 5424 structured data",null,null],[11,"clone","","",1,null],[11,"format_3164","","format a message as a RFC 3164 log message",2,null],[11,"format_5424_structured_data","","format RFC 5424 structured data as `([id (name=&quot;value&quot;)*])*`",2,null],[11,"format_5424","","format a message as a RFC 5424 log message",2,null],[11,"send","","Sends a basic log message of the format `&lt;priority&gt; message`",2,null],[11,"send_3164","","Sends a RFC 3164 log message",2,null],[11,"send_5424","","Sends a RFC 5424 log message",2,null],[11,"send_raw","","Sends a message directly, without any formatting",2,null],[11,"emerg","","",2,null],[11,"alert","","",2,null],[11,"crit","","",2,null],[11,"err","","",2,null],[11,"warning","","",2,null],[11,"notice","","",2,null],[11,"info","","",2,null],[11,"debug","","",2,null],[11,"process_name","","",2,null],[11,"process_id","","",2,null],[11,"set_process_name","","",2,null],[11,"set_process_id","","",2,null],[11,"enabled","","",2,null],[11,"log","","",2,null]],"paths":[[4,"Facility"],[4,"Severity"],[3,"Logger"]]};
searchIndex["unix_socket"] = {"doc":"Support for Unix domain socket clients and servers.","items":[[3,"SocketAddr","unix_socket","An address associated with a Unix socket.",null,null],[3,"UnixStream","","A Unix stream socket.",null,null],[3,"UnixListener","","A structure representing a Unix domain socket server.",null,null],[3,"Incoming","","An iterator over incoming connections to a `UnixListener`.",null,null],[3,"UnixDatagram","","A Unix datagram socket.",null,null],[4,"AddressKind","","The kind of an address associated with a Unix socket.",null,null],[13,"Unnamed","","An unnamed address.",0,null],[13,"Pathname","","An address corresponding to a path on the filesystem.",0,null],[13,"Abstract","","An address in an abstract namespace unrelated to the filesystem.",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",1,null],[11,"address","","Returns the value of the address.",1,null],[11,"fmt","","",1,null],[11,"fmt","","",2,null],[11,"connect","","Connect to the socket named by `path`.",2,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"pair","","Create an unnamed pair of connected sockets.",2,{"inputs":[],"output":{"name":"result"}}],[11,"unnamed","","# Deprecated",2,{"inputs":[],"output":{"name":"result"}}],[11,"try_clone","","Create a new independently owned handle to the underlying socket.",2,null],[11,"local_addr","","Returns the socket address of the local half of this connection.",2,null],[11,"peer_addr","","Returns the socket address of the remote half of this connection.",2,null],[11,"shutdown","","Shut down the read, write, or both halves of this connection.",2,null],[11,"read","","",2,null],[11,"write","","",2,null],[11,"flush","","",2,null],[11,"as_raw_fd","","",2,null],[11,"from_raw_fd","","",2,{"inputs":[{"name":"rawfd"}],"output":{"name":"unixstream"}}],[11,"fmt","","",3,null],[11,"bind","","Creates a new `UnixListener` which will be bound to the specified\nsocket.",3,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"accept","","Accepts a new incoming connection to this listener.",3,null],[11,"try_clone","","Create a new independently owned handle to the underlying socket.",3,null],[11,"local_addr","","Returns the socket address of the local half of this connection.",3,null],[11,"incoming","","Returns an iterator over incoming connections.",3,null],[11,"as_raw_fd","","",3,null],[11,"from_raw_fd","","",3,{"inputs":[{"name":"rawfd"}],"output":{"name":"unixlistener"}}],[11,"fmt","","",4,null],[11,"next","","",4,null],[11,"size_hint","","",4,null],[11,"fmt","","",5,null],[11,"bind","","Creates a Unix datagram socket bound to the given path.",5,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"unbound","","Creates a Unix Datagram socket which is not bound to any address.",5,{"inputs":[],"output":{"name":"result"}}],[11,"pair","","Create an unnamed pair of connected sockets.",5,{"inputs":[],"output":{"name":"result"}}],[11,"connect","","Connect the socket to the specified address.",5,null],[11,"local_addr","","Returns the address of this socket.",5,null],[11,"peer_addr","","Returns the address of this socket&#39;s peer.",5,null],[11,"recv_from","","Receives data from the socket.",5,null],[11,"recv","","Receives data from the socket.",5,null],[11,"send_to","","Sends data on the socket to the specified address.",5,null],[11,"send","","Sends data on the socket to the socket&#39;s peer.",5,null],[11,"shutdown","","Shut down the read, write, or both halves of this connection.",5,null],[11,"as_raw_fd","","",5,null],[11,"from_raw_fd","","",5,{"inputs":[{"name":"rawfd"}],"output":{"name":"unixdatagram"}}]],"paths":[[4,"AddressKind"],[3,"SocketAddr"],[3,"UnixStream"],[3,"UnixListener"],[3,"Incoming"],[3,"UnixDatagram"]]};
searchIndex["debug_builders"] = {"doc":"","items":[[3,"DebugStruct","debug_builders","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[11,"new","","Creates a new `DebugStruct`.",0,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"field","","Adds a new field to the generated struct output.",0,null],[11,"finish","","Consumes the `DebugStruct`, finishing output and returning any error\nencountered.",0,null],[11,"new","","Creates a new `DebugTuple`.",1,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"field","","Adds a new field to the generated tuple struct output.",1,null],[11,"finish","","Consumes the `DebugTuple`, finishing output and returning any error\nencountered.",1,null],[11,"new","","Creates a new `DebugSet`.",2,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"entry","","Adds a new entry to the set output.",2,null],[11,"finish","","Consumes the `DebugSet`, finishing output and returning any error\nencountered.",2,null],[11,"new","","Creates a new `DebugList`.",3,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"entry","","Adds a new entry to the set output.",3,null],[11,"finish","","Consumes the `DebugSet`, finishing output and returning any error\nencountered.",3,null],[11,"new","","Creates a new `DebugMap`.",4,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"entry","","Adds a new entry to the map output.",4,null],[11,"finish","","Consumes the `DebugMap`, finishing output and returning any error\nencountered.",4,null]],"paths":[[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The &quot;payload&quot; of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has\nalready been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The &quot;error&quot; level.",0,null],[13,"Warn","","The &quot;warn&quot; level.",0,null],[13,"Info","","The &quot;info&quot; level.",0,null],[13,"Debug","","The &quot;debug&quot; level.",0,null],[13,"Trace","","The &quot;trace&quot; level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,null],[10,"log","","Logs the `LogRecord`.",2,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"cmp","","",0,null],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,null],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,null],[11,"args","","The message body.",3,null],[11,"metadata","","Metadata about the log directive.",3,null],[11,"location","","The location of the log directive.",3,null],[11,"level","","The verbosity level of the message.",3,null],[11,"target","","The name of the target of the directive.",3,null],[11,"level","","The verbosity level of the message.",4,null],[11,"target","","The name of the target of the directive.",4,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"module_path","","The module path of the message.",5,null],[11,"file","","The source file containing the message.",5,null],[11,"line","","The line containing the message.",5,null],[11,"fmt","","",6,null],[11,"get","","Gets the current maximum log level filter.",6,null],[11,"set","","Sets the maximum log level.",6,null],[11,"fmt","","",7,null],[11,"fmt","","",7,null],[11,"description","","",7,null],[11,"fmt","","",8,null],[11,"fmt","","",8,null],[11,"description","","",8,null],[14,"log!","","The standard logging macro.",null,null],[14,"error!","","Logs a message at the error level.",null,null],[14,"warn!","","Logs a message at the warn level.",null,null],[14,"info!","","Logs a message at the info level.",null,null],[14,"debug!","","Logs a message at the debug level.",null,null],[14,"trace!","","Logs a message at the trace level.",null,null],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["slog_bunyan"] = {"doc":"[Bunyan](https://www.npmjs.com/package/bunyan) formatting for `slog-rs`","items":[[5,"new","slog_bunyan","Create bunyan formatter",null,{"inputs":[],"output":{"name":"json"}}]],"paths":[]};
searchIndex["nix"] = {"doc":"Rust friendly bindings to the various *nix system functions.","items":[[11,"clone","libc::unix","",0,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"clone","","",4,null],[11,"clone","","",5,null],[11,"clone","","",6,null],[11,"clone","","",7,null],[11,"clone","","",8,null],[11,"clone","","",9,null],[11,"clone","","",10,null],[11,"clone","","",11,null],[11,"clone","","",12,null],[11,"clone","libc::unix::notbsd","",13,null],[11,"clone","","",14,null],[11,"clone","","",15,null],[11,"clone","","",16,null],[11,"clone","","",17,null],[11,"clone","","",18,null],[11,"clone","","",19,null],[11,"clone","","",20,null],[11,"clone","","",21,null],[11,"clone","","",22,null],[11,"clone","","",23,null],[11,"clone","","",24,null],[11,"clone","","",25,null],[11,"clone","","",26,null],[11,"clone","","",27,null],[11,"clone","libc::unix::notbsd::linux","",28,null],[11,"clone","","",29,null],[11,"clone","","",30,null],[11,"clone","","",31,null],[11,"clone","","",32,null],[11,"clone","","",33,null],[11,"clone","","",34,null],[11,"clone","","",35,null],[11,"clone","","",36,null],[11,"clone","","",37,null],[11,"clone","","",38,null],[11,"clone","","",39,null],[11,"clone","","",40,null],[11,"clone","","",41,null],[11,"clone","","",42,null],[11,"clone","","",43,null],[11,"clone","libc::unix::notbsd::linux::other","",44,null],[11,"clone","","",45,null],[11,"clone","","",46,null],[11,"clone","","",47,null],[11,"clone","","",48,null],[11,"clone","","",49,null],[11,"clone","","",50,null],[11,"clone","","",51,null],[11,"clone","","",52,null],[11,"clone","","",53,null],[11,"clone","","",54,null],[11,"clone","","",55,null],[11,"clone","libc::unix::notbsd::linux::other::b64","",56,null],[11,"clone","","",57,null],[11,"clone","libc::unix::notbsd::linux::other::b64::x86_64","",58,null],[11,"clone","","",59,null],[11,"clone","","",60,null],[11,"clone","","",61,null],[11,"clone","","",62,null],[11,"clone","","",63,null],[11,"clone","","",64,null],[11,"clone","","",65,null],[6,"c_int","nix","",null,null],[4,"c_void","","",null,null],[4,"Errno","","",null,null],[13,"UnknownErrno","","",66,null],[13,"EPERM","","",66,null],[13,"ENOENT","","",66,null],[13,"ESRCH","","",66,null],[13,"EINTR","","",66,null],[13,"EIO","","",66,null],[13,"ENXIO","","",66,null],[13,"E2BIG","","",66,null],[13,"ENOEXEC","","",66,null],[13,"EBADF","","",66,null],[13,"ECHILD","","",66,null],[13,"EAGAIN","","",66,null],[13,"ENOMEM","","",66,null],[13,"EACCES","","",66,null],[13,"EFAULT","","",66,null],[13,"ENOTBLK","","",66,null],[13,"EBUSY","","",66,null],[13,"EEXIST","","",66,null],[13,"EXDEV","","",66,null],[13,"ENODEV","","",66,null],[13,"ENOTDIR","","",66,null],[13,"EISDIR","","",66,null],[13,"EINVAL","","",66,null],[13,"ENFILE","","",66,null],[13,"EMFILE","","",66,null],[13,"ENOTTY","","",66,null],[13,"ETXTBSY","","",66,null],[13,"EFBIG","","",66,null],[13,"ENOSPC","","",66,null],[13,"ESPIPE","","",66,null],[13,"EROFS","","",66,null],[13,"EMLINK","","",66,null],[13,"EPIPE","","",66,null],[13,"EDOM","","",66,null],[13,"ERANGE","","",66,null],[13,"EDEADLK","","",66,null],[13,"ENAMETOOLONG","","",66,null],[13,"ENOLCK","","",66,null],[13,"ENOSYS","","",66,null],[13,"ENOTEMPTY","","",66,null],[13,"ELOOP","","",66,null],[13,"ENOMSG","","",66,null],[13,"EIDRM","","",66,null],[13,"ECHRNG","","",66,null],[13,"EL2NSYNC","","",66,null],[13,"EL3HLT","","",66,null],[13,"EL3RST","","",66,null],[13,"ELNRNG","","",66,null],[13,"EUNATCH","","",66,null],[13,"ENOCSI","","",66,null],[13,"EL2HLT","","",66,null],[13,"EBADE","","",66,null],[13,"EBADR","","",66,null],[13,"EXFULL","","",66,null],[13,"ENOANO","","",66,null],[13,"EBADRQC","","",66,null],[13,"EBADSLT","","",66,null],[13,"EBFONT","","",66,null],[13,"ENOSTR","","",66,null],[13,"ENODATA","","",66,null],[13,"ETIME","","",66,null],[13,"ENOSR","","",66,null],[13,"ENONET","","",66,null],[13,"ENOPKG","","",66,null],[13,"EREMOTE","","",66,null],[13,"ENOLINK","","",66,null],[13,"EADV","","",66,null],[13,"ESRMNT","","",66,null],[13,"ECOMM","","",66,null],[13,"EPROTO","","",66,null],[13,"EMULTIHOP","","",66,null],[13,"EDOTDOT","","",66,null],[13,"EBADMSG","","",66,null],[13,"EOVERFLOW","","",66,null],[13,"ENOTUNIQ","","",66,null],[13,"EBADFD","","",66,null],[13,"EREMCHG","","",66,null],[13,"ELIBACC","","",66,null],[13,"ELIBBAD","","",66,null],[13,"ELIBSCN","","",66,null],[13,"ELIBMAX","","",66,null],[13,"ELIBEXEC","","",66,null],[13,"EILSEQ","","",66,null],[13,"ERESTART","","",66,null],[13,"ESTRPIPE","","",66,null],[13,"EUSERS","","",66,null],[13,"ENOTSOCK","","",66,null],[13,"EDESTADDRREQ","","",66,null],[13,"EMSGSIZE","","",66,null],[13,"EPROTOTYPE","","",66,null],[13,"ENOPROTOOPT","","",66,null],[13,"EPROTONOSUPPORT","","",66,null],[13,"ESOCKTNOSUPPORT","","",66,null],[13,"EOPNOTSUPP","","",66,null],[13,"EPFNOSUPPORT","","",66,null],[13,"EAFNOSUPPORT","","",66,null],[13,"EADDRINUSE","","",66,null],[13,"EADDRNOTAVAIL","","",66,null],[13,"ENETDOWN","","",66,null],[13,"ENETUNREACH","","",66,null],[13,"ENETRESET","","",66,null],[13,"ECONNABORTED","","",66,null],[13,"ECONNRESET","","",66,null],[13,"ENOBUFS","","",66,null],[13,"EISCONN","","",66,null],[13,"ENOTCONN","","",66,null],[13,"ESHUTDOWN","","",66,null],[13,"ETOOMANYREFS","","",66,null],[13,"ETIMEDOUT","","",66,null],[13,"ECONNREFUSED","","",66,null],[13,"EHOSTDOWN","","",66,null],[13,"EHOSTUNREACH","","",66,null],[13,"EALREADY","","",66,null],[13,"EINPROGRESS","","",66,null],[13,"ESTALE","","",66,null],[13,"EUCLEAN","","",66,null],[13,"ENOTNAM","","",66,null],[13,"ENAVAIL","","",66,null],[13,"EISNAM","","",66,null],[13,"EREMOTEIO","","",66,null],[13,"EDQUOT","","",66,null],[13,"ENOMEDIUM","","",66,null],[13,"EMEDIUMTYPE","","",66,null],[13,"ECANCELED","","",66,null],[13,"ENOKEY","","",66,null],[13,"EKEYEXPIRED","","",66,null],[13,"EKEYREVOKED","","",66,null],[13,"EKEYREJECTED","","",66,null],[13,"EOWNERDEAD","","",66,null],[13,"ENOTRECOVERABLE","","",66,null],[13,"ERFKILL","","",66,null],[13,"EHWPOISON","","",66,null],[4,"Error","","",null,null],[13,"Sys","","",67,null],[13,"InvalidPath","","",67,null],[0,"libc","","",null,null],[0,"errno","","",null,null],[4,"Errno","nix::errno","",null,null],[13,"UnknownErrno","","",66,null],[13,"EPERM","","",66,null],[13,"ENOENT","","",66,null],[13,"ESRCH","","",66,null],[13,"EINTR","","",66,null],[13,"EIO","","",66,null],[13,"ENXIO","","",66,null],[13,"E2BIG","","",66,null],[13,"ENOEXEC","","",66,null],[13,"EBADF","","",66,null],[13,"ECHILD","","",66,null],[13,"EAGAIN","","",66,null],[13,"ENOMEM","","",66,null],[13,"EACCES","","",66,null],[13,"EFAULT","","",66,null],[13,"ENOTBLK","","",66,null],[13,"EBUSY","","",66,null],[13,"EEXIST","","",66,null],[13,"EXDEV","","",66,null],[13,"ENODEV","","",66,null],[13,"ENOTDIR","","",66,null],[13,"EISDIR","","",66,null],[13,"EINVAL","","",66,null],[13,"ENFILE","","",66,null],[13,"EMFILE","","",66,null],[13,"ENOTTY","","",66,null],[13,"ETXTBSY","","",66,null],[13,"EFBIG","","",66,null],[13,"ENOSPC","","",66,null],[13,"ESPIPE","","",66,null],[13,"EROFS","","",66,null],[13,"EMLINK","","",66,null],[13,"EPIPE","","",66,null],[13,"EDOM","","",66,null],[13,"ERANGE","","",66,null],[13,"EDEADLK","","",66,null],[13,"ENAMETOOLONG","","",66,null],[13,"ENOLCK","","",66,null],[13,"ENOSYS","","",66,null],[13,"ENOTEMPTY","","",66,null],[13,"ELOOP","","",66,null],[13,"ENOMSG","","",66,null],[13,"EIDRM","","",66,null],[13,"ECHRNG","","",66,null],[13,"EL2NSYNC","","",66,null],[13,"EL3HLT","","",66,null],[13,"EL3RST","","",66,null],[13,"ELNRNG","","",66,null],[13,"EUNATCH","","",66,null],[13,"ENOCSI","","",66,null],[13,"EL2HLT","","",66,null],[13,"EBADE","","",66,null],[13,"EBADR","","",66,null],[13,"EXFULL","","",66,null],[13,"ENOANO","","",66,null],[13,"EBADRQC","","",66,null],[13,"EBADSLT","","",66,null],[13,"EBFONT","","",66,null],[13,"ENOSTR","","",66,null],[13,"ENODATA","","",66,null],[13,"ETIME","","",66,null],[13,"ENOSR","","",66,null],[13,"ENONET","","",66,null],[13,"ENOPKG","","",66,null],[13,"EREMOTE","","",66,null],[13,"ENOLINK","","",66,null],[13,"EADV","","",66,null],[13,"ESRMNT","","",66,null],[13,"ECOMM","","",66,null],[13,"EPROTO","","",66,null],[13,"EMULTIHOP","","",66,null],[13,"EDOTDOT","","",66,null],[13,"EBADMSG","","",66,null],[13,"EOVERFLOW","","",66,null],[13,"ENOTUNIQ","","",66,null],[13,"EBADFD","","",66,null],[13,"EREMCHG","","",66,null],[13,"ELIBACC","","",66,null],[13,"ELIBBAD","","",66,null],[13,"ELIBSCN","","",66,null],[13,"ELIBMAX","","",66,null],[13,"ELIBEXEC","","",66,null],[13,"EILSEQ","","",66,null],[13,"ERESTART","","",66,null],[13,"ESTRPIPE","","",66,null],[13,"EUSERS","","",66,null],[13,"ENOTSOCK","","",66,null],[13,"EDESTADDRREQ","","",66,null],[13,"EMSGSIZE","","",66,null],[13,"EPROTOTYPE","","",66,null],[13,"ENOPROTOOPT","","",66,null],[13,"EPROTONOSUPPORT","","",66,null],[13,"ESOCKTNOSUPPORT","","",66,null],[13,"EOPNOTSUPP","","",66,null],[13,"EPFNOSUPPORT","","",66,null],[13,"EAFNOSUPPORT","","",66,null],[13,"EADDRINUSE","","",66,null],[13,"EADDRNOTAVAIL","","",66,null],[13,"ENETDOWN","","",66,null],[13,"ENETUNREACH","","",66,null],[13,"ENETRESET","","",66,null],[13,"ECONNABORTED","","",66,null],[13,"ECONNRESET","","",66,null],[13,"ENOBUFS","","",66,null],[13,"EISCONN","","",66,null],[13,"ENOTCONN","","",66,null],[13,"ESHUTDOWN","","",66,null],[13,"ETOOMANYREFS","","",66,null],[13,"ETIMEDOUT","","",66,null],[13,"ECONNREFUSED","","",66,null],[13,"EHOSTDOWN","","",66,null],[13,"EHOSTUNREACH","","",66,null],[13,"EALREADY","","",66,null],[13,"EINPROGRESS","","",66,null],[13,"ESTALE","","",66,null],[13,"EUCLEAN","","",66,null],[13,"ENOTNAM","","",66,null],[13,"ENAVAIL","","",66,null],[13,"EISNAM","","",66,null],[13,"EREMOTEIO","","",66,null],[13,"EDQUOT","","",66,null],[13,"ENOMEDIUM","","",66,null],[13,"EMEDIUMTYPE","","",66,null],[13,"ECANCELED","","",66,null],[13,"ENOKEY","","",66,null],[13,"EKEYEXPIRED","","",66,null],[13,"EKEYREVOKED","","",66,null],[13,"EKEYREJECTED","","",66,null],[13,"EOWNERDEAD","","",66,null],[13,"ENOTRECOVERABLE","","",66,null],[13,"ERFKILL","","",66,null],[13,"EHWPOISON","","",66,null],[5,"from_i32","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"errno"}}],[5,"errno","","Returns the platform-specific value of errno",null,{"inputs":[],"output":{"name":"i32"}}],[11,"eq","nix","",66,null],[11,"clone","","",66,null],[11,"fmt","","",66,null],[17,"EWOULDBLOCK","nix::errno","",null,null],[17,"EDEADLOCK","","",null,null],[8,"ErrnoSentinel","","The sentinel value indicates that a function failed and more detailed\ninformation about the error can be found in `errno`",null,null],[10,"sentinel","","",68,{"inputs":[],"output":{"name":"self"}}],[11,"last","nix","",66,{"inputs":[],"output":{"name":"self"}}],[11,"desc","","",66,null],[11,"from_i32","","",66,{"inputs":[{"name":"i32"}],"output":{"name":"errno"}}],[11,"clear","","",66,null],[11,"result","","Returns `Ok(value)` if it does not contain the sentinel value. This\nshould not be used when `-1` is not the errno sentinel value.",66,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"description","","",66,null],[11,"fmt","","",66,null],[11,"from","std::io::error","",69,{"inputs":[{"name":"errno"}],"output":{"name":"self"}}],[0,"features","nix","",null,null],[5,"socket_atomic_cloexec","nix::features","",null,{"inputs":[],"output":{"name":"bool"}}],[0,"fcntl","nix","",null,null],[3,"SpliceFFlags","nix::fcntl","",null,null],[3,"OFlag","","",null,null],[3,"FdFlag","","",null,null],[3,"SealFlag","","",null,null],[4,"FcntlArg","","",null,null],[13,"F_DUPFD","","",70,null],[13,"F_DUPFD_CLOEXEC","","",70,null],[13,"F_GETFD","","",70,null],[13,"F_SETFD","","",70,null],[13,"F_GETFL","","",70,null],[13,"F_SETFL","","",70,null],[13,"F_SETLK","","",70,null],[13,"F_SETLKW","","",70,null],[13,"F_GETLK","","",70,null],[13,"F_OFD_SETLK","","",70,null],[13,"F_OFD_SETLKW","","",70,null],[13,"F_OFD_GETLK","","",70,null],[13,"F_ADD_SEALS","","",70,null],[13,"F_GET_SEALS","","",70,null],[4,"FlockArg","","",null,null],[13,"LockShared","","",71,null],[13,"LockExclusive","","",71,null],[13,"Unlock","","",71,null],[13,"LockSharedNonblock","","",71,null],[13,"LockExclusiveNonblock","","",71,null],[13,"UnlockNonblock","","",71,null],[5,"open","","",null,{"inputs":[{"name":"p"},{"name":"oflag"},{"name":"mode"}],"output":{"name":"result"}}],[5,"fcntl","","",null,{"inputs":[{"name":"rawfd"},{"name":"fcntlarg"}],"output":{"name":"result"}}],[5,"flock","","",null,{"inputs":[{"name":"rawfd"},{"name":"flockarg"}],"output":{"name":"result"}}],[5,"splice","","",null,{"inputs":[{"name":"rawfd"},{"name":"option"},{"name":"rawfd"},{"name":"option"},{"name":"usize"},{"name":"splicefflags"}],"output":{"name":"result"}}],[5,"tee","","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"},{"name":"usize"},{"name":"splicefflags"}],"output":{"name":"result"}}],[5,"vmsplice","","",null,null],[11,"hash","","",72,null],[11,"cmp","","",72,null],[11,"partial_cmp","","",72,null],[11,"lt","","",72,null],[11,"le","","",72,null],[11,"gt","","",72,null],[11,"ge","","",72,null],[11,"clone","","",72,null],[11,"eq","","",72,null],[11,"ne","","",72,null],[11,"fmt","","",72,null],[11,"empty","","Returns an empty set of flags.",72,{"inputs":[],"output":{"name":"splicefflags"}}],[11,"all","","Returns the set containing all flags.",72,{"inputs":[],"output":{"name":"splicefflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",72,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",72,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",72,{"inputs":[{"name":"c_uint"}],"output":{"name":"splicefflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",72,null],[11,"is_all","","Returns `true` if all flags are currently set.",72,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",72,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",72,null],[11,"insert","","Inserts the specified flags in-place.",72,null],[11,"remove","","Removes the specified flags in-place.",72,null],[11,"toggle","","Toggles the specified flags in-place.",72,null],[11,"bitor","","Returns the union of the two sets of flags.",72,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",72,null],[11,"bitand","","Returns the intersection between the two sets of flags.",72,null],[11,"sub","","Returns the set difference of the two sets of flags.",72,null],[11,"not","","Returns the complement of this set of flags.",72,null],[11,"from_iter","","",72,{"inputs":[{"name":"t"}],"output":{"name":"splicefflags"}}],[11,"hash","","",73,null],[11,"cmp","","",73,null],[11,"partial_cmp","","",73,null],[11,"lt","","",73,null],[11,"le","","",73,null],[11,"gt","","",73,null],[11,"ge","","",73,null],[11,"clone","","",73,null],[11,"eq","","",73,null],[11,"ne","","",73,null],[11,"fmt","","",73,null],[11,"empty","","Returns an empty set of flags.",73,{"inputs":[],"output":{"name":"oflag"}}],[11,"all","","Returns the set containing all flags.",73,{"inputs":[],"output":{"name":"oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",73,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",73,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",73,{"inputs":[{"name":"c_int"}],"output":{"name":"oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",73,null],[11,"is_all","","Returns `true` if all flags are currently set.",73,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",73,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",73,null],[11,"insert","","Inserts the specified flags in-place.",73,null],[11,"remove","","Removes the specified flags in-place.",73,null],[11,"toggle","","Toggles the specified flags in-place.",73,null],[11,"bitor","","Returns the union of the two sets of flags.",73,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",73,null],[11,"bitand","","Returns the intersection between the two sets of flags.",73,null],[11,"sub","","Returns the set difference of the two sets of flags.",73,null],[11,"not","","Returns the complement of this set of flags.",73,null],[11,"from_iter","","",73,{"inputs":[{"name":"t"}],"output":{"name":"oflag"}}],[11,"hash","","",74,null],[11,"cmp","","",74,null],[11,"partial_cmp","","",74,null],[11,"lt","","",74,null],[11,"le","","",74,null],[11,"gt","","",74,null],[11,"ge","","",74,null],[11,"clone","","",74,null],[11,"eq","","",74,null],[11,"ne","","",74,null],[11,"fmt","","",74,null],[11,"empty","","Returns an empty set of flags.",74,{"inputs":[],"output":{"name":"fdflag"}}],[11,"all","","Returns the set containing all flags.",74,{"inputs":[],"output":{"name":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",74,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",74,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",74,{"inputs":[{"name":"c_int"}],"output":{"name":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",74,null],[11,"is_all","","Returns `true` if all flags are currently set.",74,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",74,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",74,null],[11,"insert","","Inserts the specified flags in-place.",74,null],[11,"remove","","Removes the specified flags in-place.",74,null],[11,"toggle","","Toggles the specified flags in-place.",74,null],[11,"bitor","","Returns the union of the two sets of flags.",74,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",74,null],[11,"bitand","","Returns the intersection between the two sets of flags.",74,null],[11,"sub","","Returns the set difference of the two sets of flags.",74,null],[11,"not","","Returns the complement of this set of flags.",74,null],[11,"from_iter","","",74,{"inputs":[{"name":"t"}],"output":{"name":"fdflag"}}],[11,"hash","","",75,null],[11,"cmp","","",75,null],[11,"partial_cmp","","",75,null],[11,"lt","","",75,null],[11,"le","","",75,null],[11,"gt","","",75,null],[11,"ge","","",75,null],[11,"clone","","",75,null],[11,"eq","","",75,null],[11,"ne","","",75,null],[11,"fmt","","",75,null],[11,"empty","","Returns an empty set of flags.",75,{"inputs":[],"output":{"name":"sealflag"}}],[11,"all","","Returns the set containing all flags.",75,{"inputs":[],"output":{"name":"sealflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",75,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",75,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",75,{"inputs":[{"name":"c_int"}],"output":{"name":"sealflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",75,null],[11,"is_all","","Returns `true` if all flags are currently set.",75,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",75,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",75,null],[11,"insert","","Inserts the specified flags in-place.",75,null],[11,"remove","","Removes the specified flags in-place.",75,null],[11,"toggle","","Toggles the specified flags in-place.",75,null],[11,"bitor","","Returns the union of the two sets of flags.",75,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",75,null],[11,"bitand","","Returns the intersection between the two sets of flags.",75,null],[11,"sub","","Returns the set difference of the two sets of flags.",75,null],[11,"not","","Returns the complement of this set of flags.",75,null],[11,"from_iter","","",75,{"inputs":[{"name":"t"}],"output":{"name":"sealflag"}}],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_LARGEFILE","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_PATH","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"O_NDELAY","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[0,"mount","nix","",null,null],[3,"MsFlags","nix::mount","",null,null],[3,"MntFlags","","",null,null],[5,"mount","","",null,{"inputs":[{"name":"option"},{"name":"p2"},{"name":"option"},{"name":"msflags"},{"name":"option"}],"output":{"name":"result"}}],[5,"umount","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"umount2","","",null,{"inputs":[{"name":"p"},{"name":"mntflags"}],"output":{"name":"result"}}],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_VERBOSE","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_NOSEC","","",null,null],[17,"MS_BORN","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[11,"hash","","",76,null],[11,"cmp","","",76,null],[11,"partial_cmp","","",76,null],[11,"lt","","",76,null],[11,"le","","",76,null],[11,"gt","","",76,null],[11,"ge","","",76,null],[11,"clone","","",76,null],[11,"eq","","",76,null],[11,"ne","","",76,null],[11,"fmt","","",76,null],[11,"empty","","Returns an empty set of flags.",76,{"inputs":[],"output":{"name":"msflags"}}],[11,"all","","Returns the set containing all flags.",76,{"inputs":[],"output":{"name":"msflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",76,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",76,{"inputs":[{"name":"c_ulong"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",76,{"inputs":[{"name":"c_ulong"}],"output":{"name":"msflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",76,null],[11,"is_all","","Returns `true` if all flags are currently set.",76,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",76,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",76,null],[11,"insert","","Inserts the specified flags in-place.",76,null],[11,"remove","","Removes the specified flags in-place.",76,null],[11,"toggle","","Toggles the specified flags in-place.",76,null],[11,"bitor","","Returns the union of the two sets of flags.",76,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",76,null],[11,"bitand","","Returns the intersection between the two sets of flags.",76,null],[11,"sub","","Returns the set difference of the two sets of flags.",76,null],[11,"not","","Returns the complement of this set of flags.",76,null],[11,"from_iter","","",76,{"inputs":[{"name":"t"}],"output":{"name":"msflags"}}],[11,"hash","","",77,null],[11,"cmp","","",77,null],[11,"partial_cmp","","",77,null],[11,"lt","","",77,null],[11,"le","","",77,null],[11,"gt","","",77,null],[11,"ge","","",77,null],[11,"clone","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"fmt","","",77,null],[11,"empty","","Returns an empty set of flags.",77,{"inputs":[],"output":{"name":"mntflags"}}],[11,"all","","Returns the set containing all flags.",77,{"inputs":[],"output":{"name":"mntflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",77,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",77,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",77,{"inputs":[{"name":"c_int"}],"output":{"name":"mntflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",77,null],[11,"is_all","","Returns `true` if all flags are currently set.",77,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",77,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",77,null],[11,"insert","","Inserts the specified flags in-place.",77,null],[11,"remove","","Removes the specified flags in-place.",77,null],[11,"toggle","","Toggles the specified flags in-place.",77,null],[11,"bitor","","Returns the union of the two sets of flags.",77,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",77,null],[11,"bitand","","Returns the intersection between the two sets of flags.",77,null],[11,"sub","","Returns the set difference of the two sets of flags.",77,null],[11,"not","","Returns the complement of this set of flags.",77,null],[11,"from_iter","","",77,{"inputs":[{"name":"t"}],"output":{"name":"mntflags"}}],[0,"mqueue","nix","Posix Message Queue functions",null,null],[3,"MQ_OFlag","nix::mqueue","",null,null],[3,"FdFlag","","",null,null],[3,"MqAttr","","",null,null],[12,"mq_flags","","",78,null],[12,"mq_maxmsg","","",78,null],[12,"mq_msgsize","","",78,null],[12,"mq_curmsgs","","",78,null],[5,"mq_open","","",null,{"inputs":[{"name":"cstring"},{"name":"mq_oflag"},{"name":"mode"},{"name":"option"}],"output":{"name":"result"}}],[5,"mq_unlink","","",null,{"inputs":[{"name":"cstring"}],"output":{"name":"result"}}],[5,"mq_close","","",null,{"inputs":[{"name":"mqd"}],"output":{"name":"result"}}],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,{"inputs":[{"name":"mqd"}],"output":{"name":"result"}}],[5,"mq_setattr","","Set the attributes of the message queue. Only `O_NONBLOCK` can be set, everything else will be ignored\nReturns the old attributes\nIt is recommend to use the `mq_set_nonblock()` and `mq_remove_nonblock()` convenience functions as they are easier to use",null,{"inputs":[{"name":"mqd"},{"name":"mqattr"}],"output":{"name":"result"}}],[5,"mq_set_nonblock","","Convenience function.\nSets the `O_NONBLOCK` attribute for a given message queue descriptor\nReturns the old attributes",null,{"inputs":[{"name":"mqd"}],"output":{"name":"result"}}],[5,"mq_remove_nonblock","","Convenience function.\nRemoves `O_NONBLOCK` attribute for a given message queue descriptor\nReturns the old attributes",null,{"inputs":[{"name":"mqd"}],"output":{"name":"result"}}],[11,"hash","","",79,null],[11,"cmp","","",79,null],[11,"partial_cmp","","",79,null],[11,"lt","","",79,null],[11,"le","","",79,null],[11,"gt","","",79,null],[11,"ge","","",79,null],[11,"clone","","",79,null],[11,"eq","","",79,null],[11,"ne","","",79,null],[11,"fmt","","",79,null],[11,"empty","","Returns an empty set of flags.",79,{"inputs":[],"output":{"name":"mq_oflag"}}],[11,"all","","Returns the set containing all flags.",79,{"inputs":[],"output":{"name":"mq_oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",79,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",79,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",79,{"inputs":[{"name":"c_int"}],"output":{"name":"mq_oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",79,null],[11,"is_all","","Returns `true` if all flags are currently set.",79,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",79,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",79,null],[11,"insert","","Inserts the specified flags in-place.",79,null],[11,"remove","","Removes the specified flags in-place.",79,null],[11,"toggle","","Toggles the specified flags in-place.",79,null],[11,"bitor","","Returns the union of the two sets of flags.",79,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",79,null],[11,"bitand","","Returns the intersection between the two sets of flags.",79,null],[11,"sub","","Returns the set difference of the two sets of flags.",79,null],[11,"not","","Returns the complement of this set of flags.",79,null],[11,"from_iter","","",79,{"inputs":[{"name":"t"}],"output":{"name":"mq_oflag"}}],[11,"hash","","",80,null],[11,"cmp","","",80,null],[11,"partial_cmp","","",80,null],[11,"lt","","",80,null],[11,"le","","",80,null],[11,"gt","","",80,null],[11,"ge","","",80,null],[11,"clone","","",80,null],[11,"eq","","",80,null],[11,"ne","","",80,null],[11,"fmt","","",80,null],[11,"empty","","Returns an empty set of flags.",80,{"inputs":[],"output":{"name":"fdflag"}}],[11,"all","","Returns the set containing all flags.",80,{"inputs":[],"output":{"name":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",80,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",80,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",80,{"inputs":[{"name":"c_int"}],"output":{"name":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",80,null],[11,"is_all","","Returns `true` if all flags are currently set.",80,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",80,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",80,null],[11,"insert","","Inserts the specified flags in-place.",80,null],[11,"remove","","Removes the specified flags in-place.",80,null],[11,"toggle","","Toggles the specified flags in-place.",80,null],[11,"bitor","","Returns the union of the two sets of flags.",80,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",80,null],[11,"bitand","","Returns the intersection between the two sets of flags.",80,null],[11,"sub","","Returns the set difference of the two sets of flags.",80,null],[11,"not","","Returns the complement of this set of flags.",80,null],[11,"from_iter","","",80,{"inputs":[{"name":"t"}],"output":{"name":"fdflag"}}],[6,"MQd","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"FD_CLOEXEC","","",null,null],[11,"eq","","",78,null],[11,"ne","","",78,null],[11,"fmt","","",78,null],[11,"clone","","",78,null],[11,"new","","",78,{"inputs":[{"name":"c_long"},{"name":"c_long"},{"name":"c_long"},{"name":"c_long"}],"output":{"name":"mqattr"}}],[0,"poll","nix","",null,null],[3,"PollFd","nix::poll","",null,null],[12,"fd","","",81,null],[12,"events","","",81,null],[12,"revents","","",81,null],[3,"EventFlags","","",null,null],[5,"poll","","",null,null],[11,"hash","","",82,null],[11,"cmp","","",82,null],[11,"partial_cmp","","",82,null],[11,"lt","","",82,null],[11,"le","","",82,null],[11,"gt","","",82,null],[11,"ge","","",82,null],[11,"clone","","",82,null],[11,"eq","","",82,null],[11,"ne","","",82,null],[11,"fmt","","",82,null],[11,"empty","","Returns an empty set of flags.",82,{"inputs":[],"output":{"name":"eventflags"}}],[11,"all","","Returns the set containing all flags.",82,{"inputs":[],"output":{"name":"eventflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",82,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",82,{"inputs":[{"name":"c_short"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",82,{"inputs":[{"name":"c_short"}],"output":{"name":"eventflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",82,null],[11,"is_all","","Returns `true` if all flags are currently set.",82,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",82,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",82,null],[11,"insert","","Inserts the specified flags in-place.",82,null],[11,"remove","","Removes the specified flags in-place.",82,null],[11,"toggle","","Toggles the specified flags in-place.",82,null],[11,"bitor","","Returns the union of the two sets of flags.",82,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",82,null],[11,"bitand","","Returns the intersection between the two sets of flags.",82,null],[11,"sub","","Returns the set difference of the two sets of flags.",82,null],[11,"not","","Returns the complement of this set of flags.",82,null],[11,"from_iter","","",82,{"inputs":[{"name":"t"}],"output":{"name":"eventflags"}}],[11,"fmt","","",81,null],[11,"clone","","",81,null],[6,"nfds_t","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[0,"net","nix","",null,null],[0,"if_","nix::net","Network interface name resolution.",null,null],[5,"if_nametoindex","nix::net::if_","Resolve an interface into a interface number.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[0,"sched","nix","",null,null],[3,"CloneFlags","nix::sched","",null,null],[3,"CpuSet","","",null,null],[5,"sched_setaffinity","","",null,{"inputs":[{"name":"isize"},{"name":"cpuset"}],"output":{"name":"result"}}],[5,"clone","","",null,null],[5,"unshare","","",null,{"inputs":[{"name":"cloneflags"}],"output":{"name":"result"}}],[5,"setns","","",null,{"inputs":[{"name":"rawfd"},{"name":"cloneflags"}],"output":{"name":"result"}}],[6,"CloneCb","","",null,null],[6,"CpuMask","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[11,"hash","","",83,null],[11,"cmp","","",83,null],[11,"partial_cmp","","",83,null],[11,"lt","","",83,null],[11,"le","","",83,null],[11,"gt","","",83,null],[11,"ge","","",83,null],[11,"clone","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"fmt","","",83,null],[11,"empty","","Returns an empty set of flags.",83,{"inputs":[],"output":{"name":"cloneflags"}}],[11,"all","","Returns the set containing all flags.",83,{"inputs":[],"output":{"name":"cloneflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",83,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",83,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",83,{"inputs":[{"name":"c_int"}],"output":{"name":"cloneflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",83,null],[11,"is_all","","Returns `true` if all flags are currently set.",83,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",83,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",83,null],[11,"insert","","Inserts the specified flags in-place.",83,null],[11,"remove","","Removes the specified flags in-place.",83,null],[11,"toggle","","Toggles the specified flags in-place.",83,null],[11,"bitor","","Returns the union of the two sets of flags.",83,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",83,null],[11,"bitand","","Returns the intersection between the two sets of flags.",83,null],[11,"sub","","Returns the set difference of the two sets of flags.",83,null],[11,"not","","Returns the complement of this set of flags.",83,null],[11,"from_iter","","",83,{"inputs":[{"name":"t"}],"output":{"name":"cloneflags"}}],[11,"clone","","",84,null],[11,"new","","",84,{"inputs":[],"output":{"name":"cpuset"}}],[11,"set","","",84,null],[11,"unset","","",84,null],[0,"sys","nix","",null,null],[0,"epoll","nix::sys","",null,null],[3,"EpollEventKind","nix::sys::epoll","",null,null],[3,"EpollEvent","","",null,null],[12,"events","","",85,null],[12,"data","","",85,null],[4,"EpollOp","","",null,null],[13,"EpollCtlAdd","","",86,null],[13,"EpollCtlDel","","",86,null],[13,"EpollCtlMod","","",86,null],[5,"epoll_create","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"epoll_ctl","","",null,{"inputs":[{"name":"rawfd"},{"name":"epollop"},{"name":"rawfd"},{"name":"epollevent"}],"output":{"name":"result"}}],[5,"epoll_wait","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"EPOLLET","","",null,null],[11,"hash","","",87,null],[11,"cmp","","",87,null],[11,"partial_cmp","","",87,null],[11,"lt","","",87,null],[11,"le","","",87,null],[11,"gt","","",87,null],[11,"ge","","",87,null],[11,"clone","","",87,null],[11,"eq","","",87,null],[11,"ne","","",87,null],[11,"fmt","","",87,null],[11,"empty","","Returns an empty set of flags.",87,{"inputs":[],"output":{"name":"epolleventkind"}}],[11,"all","","Returns the set containing all flags.",87,{"inputs":[],"output":{"name":"epolleventkind"}}],[11,"bits","","Returns the raw value of the flags currently stored.",87,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",87,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",87,{"inputs":[{"name":"u32"}],"output":{"name":"epolleventkind"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",87,null],[11,"is_all","","Returns `true` if all flags are currently set.",87,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",87,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",87,null],[11,"insert","","Inserts the specified flags in-place.",87,null],[11,"remove","","Removes the specified flags in-place.",87,null],[11,"toggle","","Toggles the specified flags in-place.",87,null],[11,"bitor","","Returns the union of the two sets of flags.",87,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",87,null],[11,"bitand","","Returns the intersection between the two sets of flags.",87,null],[11,"sub","","Returns the set difference of the two sets of flags.",87,null],[11,"not","","Returns the complement of this set of flags.",87,null],[11,"from_iter","","",87,{"inputs":[{"name":"t"}],"output":{"name":"epolleventkind"}}],[11,"clone","","",86,null],[11,"clone","","",85,null],[0,"memfd","nix::sys","",null,null],[3,"MemFdCreateFlag","nix::sys::memfd","",null,null],[5,"memfd_create","","",null,{"inputs":[{"name":"cstr"},{"name":"memfdcreateflag"}],"output":{"name":"result"}}],[17,"MFD_CLOEXEC","","",null,null],[17,"MFD_ALLOW_SEALING","","",null,null],[11,"hash","","",88,null],[11,"cmp","","",88,null],[11,"partial_cmp","","",88,null],[11,"lt","","",88,null],[11,"le","","",88,null],[11,"gt","","",88,null],[11,"ge","","",88,null],[11,"clone","","",88,null],[11,"eq","","",88,null],[11,"ne","","",88,null],[11,"fmt","","",88,null],[11,"empty","","Returns an empty set of flags.",88,{"inputs":[],"output":{"name":"memfdcreateflag"}}],[11,"all","","Returns the set containing all flags.",88,{"inputs":[],"output":{"name":"memfdcreateflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",88,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",88,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",88,{"inputs":[{"name":"c_uint"}],"output":{"name":"memfdcreateflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",88,null],[11,"is_all","","Returns `true` if all flags are currently set.",88,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",88,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",88,null],[11,"insert","","Inserts the specified flags in-place.",88,null],[11,"remove","","Removes the specified flags in-place.",88,null],[11,"toggle","","Toggles the specified flags in-place.",88,null],[11,"bitor","","Returns the union of the two sets of flags.",88,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",88,null],[11,"bitand","","Returns the intersection between the two sets of flags.",88,null],[11,"sub","","Returns the set difference of the two sets of flags.",88,null],[11,"not","","Returns the complement of this set of flags.",88,null],[11,"from_iter","","",88,{"inputs":[{"name":"t"}],"output":{"name":"memfdcreateflag"}}],[0,"ioctl","nix::sys","Provide helpers for making ioctl system calls",null,null],[5,"ioc_dir","nix::sys::ioctl","Extracts the &quot;direction&quot; (read/write/none) from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[5,"ioc_type","","Extracts the type from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"ioc_nr","","Extracts the ioctl number from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"ioc_size","","Extracts the size from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[17,"NRBITS","","",null,null],[17,"TYPEBITS","","",null,null],[17,"NONE","","",null,null],[17,"READ","","",null,null],[17,"WRITE","","",null,null],[17,"SIZEBITS","","",null,null],[17,"DIRBITS","","",null,null],[17,"NRSHIFT","","",null,null],[17,"TYPESHIFT","","",null,null],[17,"SIZESHIFT","","",null,null],[17,"DIRSHIFT","","",null,null],[17,"NRMASK","","",null,null],[17,"TYPEMASK","","",null,null],[17,"SIZEMASK","","",null,null],[17,"DIRMASK","","",null,null],[17,"IN","","",null,null],[17,"OUT","","",null,null],[17,"INOUT","","",null,null],[17,"SIZE_MASK","","",null,null],[0,"sendfile","nix::sys","",null,null],[5,"sendfile","nix::sys::sendfile","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"},{"name":"option"},{"name":"usize"}],"output":{"name":"result"}}],[0,"signal","nix::sys","",null,null],[17,"SIGHUP","nix::sys::signal","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGTRAP","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGIOT","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGUNUSED","","",null,null],[3,"SaFlags","","",null,null],[3,"SigFlags","","",null,null],[3,"SigSet","","",null,null],[3,"SigAction","","",null,null],[4,"SigHandler","","",null,null],[13,"SigDfl","","",89,null],[13,"SigIgn","","",89,null],[13,"Handler","","",89,null],[13,"SigAction","","",89,null],[5,"sigaction","","",null,{"inputs":[{"name":"signum"},{"name":"sigaction"}],"output":{"name":"result"}}],[5,"pthread_sigmask","","Manages the signal mask (set of blocked signals) for the calling thread.",null,{"inputs":[{"name":"sigflags"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[5,"kill","","",null,{"inputs":[{"name":"pid_t"},{"name":"signum"}],"output":{"name":"result"}}],[5,"raise","","",null,{"inputs":[{"name":"signum"}],"output":{"name":"result"}}],[6,"SigNum","","",null,null],[17,"NSIG","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"SIG_SETMASK","","",null,null],[11,"hash","","",90,null],[11,"cmp","","",90,null],[11,"partial_cmp","","",90,null],[11,"lt","","",90,null],[11,"le","","",90,null],[11,"gt","","",90,null],[11,"ge","","",90,null],[11,"clone","","",90,null],[11,"eq","","",90,null],[11,"ne","","",90,null],[11,"fmt","","",90,null],[11,"empty","","Returns an empty set of flags.",90,{"inputs":[],"output":{"name":"saflags"}}],[11,"all","","Returns the set containing all flags.",90,{"inputs":[],"output":{"name":"saflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",90,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",90,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",90,{"inputs":[{"name":"c_int"}],"output":{"name":"saflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",90,null],[11,"is_all","","Returns `true` if all flags are currently set.",90,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",90,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",90,null],[11,"insert","","Inserts the specified flags in-place.",90,null],[11,"remove","","Removes the specified flags in-place.",90,null],[11,"toggle","","Toggles the specified flags in-place.",90,null],[11,"bitor","","Returns the union of the two sets of flags.",90,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",90,null],[11,"bitand","","Returns the intersection between the two sets of flags.",90,null],[11,"sub","","Returns the set difference of the two sets of flags.",90,null],[11,"not","","Returns the complement of this set of flags.",90,null],[11,"from_iter","","",90,{"inputs":[{"name":"t"}],"output":{"name":"saflags"}}],[11,"hash","","",91,null],[11,"cmp","","",91,null],[11,"partial_cmp","","",91,null],[11,"lt","","",91,null],[11,"le","","",91,null],[11,"gt","","",91,null],[11,"ge","","",91,null],[11,"clone","","",91,null],[11,"eq","","",91,null],[11,"ne","","",91,null],[11,"fmt","","",91,null],[11,"empty","","Returns an empty set of flags.",91,{"inputs":[],"output":{"name":"sigflags"}}],[11,"all","","Returns the set containing all flags.",91,{"inputs":[],"output":{"name":"sigflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",91,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",91,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",91,{"inputs":[{"name":"c_int"}],"output":{"name":"sigflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",91,null],[11,"is_all","","Returns `true` if all flags are currently set.",91,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",91,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",91,null],[11,"insert","","Inserts the specified flags in-place.",91,null],[11,"remove","","Removes the specified flags in-place.",91,null],[11,"toggle","","Toggles the specified flags in-place.",91,null],[11,"bitor","","Returns the union of the two sets of flags.",91,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",91,null],[11,"bitand","","Returns the intersection between the two sets of flags.",91,null],[11,"sub","","Returns the set difference of the two sets of flags.",91,null],[11,"not","","Returns the complement of this set of flags.",91,null],[11,"from_iter","","",91,{"inputs":[{"name":"t"}],"output":{"name":"sigflags"}}],[11,"clone","","",92,null],[11,"all","","",92,{"inputs":[],"output":{"name":"sigset"}}],[11,"empty","","",92,{"inputs":[],"output":{"name":"sigset"}}],[11,"add","","",92,null],[11,"clear","","",92,null],[11,"remove","","",92,null],[11,"extend","","",92,null],[11,"contains","","",92,null],[11,"thread_get_mask","","Gets the currently blocked (masked) set of signals for the calling thread.",92,{"inputs":[],"output":{"name":"result"}}],[11,"thread_set_mask","","Sets the set of signals as the signal mask for the calling thread.",92,null],[11,"thread_block","","Adds the set of signals to the signal mask for the calling thread.",92,null],[11,"thread_unblock","","Removes the set of signals from the signal mask for the calling thread.",92,null],[11,"thread_swap_mask","","Sets the set of signals as the signal mask, and returns the old mask.",92,null],[11,"wait","","Suspends execution of the calling thread until one of the signals in the\nsignal mask becomes pending, and returns the accepted signal.",92,null],[11,"as_ref","","",92,null],[11,"eq","","",89,null],[11,"ne","","",89,null],[11,"clone","","",89,null],[11,"new","","This function will set or unset the flag `SA_SIGINFO` depending on the\ntype of the `handler` argument.",93,{"inputs":[{"name":"sighandler"},{"name":"saflags"},{"name":"sigset"}],"output":{"name":"sigaction"}}],[0,"socket","nix::sys","Socket interface functions",null,null],[3,"in_addr","nix::sys::socket","",null,null],[12,"s_addr","","",5,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",13,null],[12,"sa_data","","",13,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",14,null],[12,"sin_port","","",14,null],[12,"sin_addr","","",14,null],[12,"sin_zero","","",14,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",15,null],[12,"sin6_port","","",15,null],[12,"sin6_flowinfo","","",15,null],[12,"sin6_addr","","",15,null],[12,"sin6_scope_id","","",15,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",16,null],[12,"sun_path","","",16,null],[6,"sa_family_t","","",null,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",17,null],[3,"UnixAddr","","A wrapper around `sockaddr_un`. We track the length of `sun_path`,\nbecause it may not be null-terminated (unconnected and abstract\nsockets). Note that the actual sockaddr length is greater by\n`size_of::&lt;sa_family_t&gt;()`.",null,null],[12,"0","","",94,null],[12,"1","","",94,null],[3,"Ipv4Addr","","",null,null],[12,"0","","",95,null],[3,"Ipv6Addr","","",null,null],[12,"0","","",96,null],[3,"NetlinkAddr","","",null,null],[12,"0","","",97,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",98,null],[12,"imr_interface","","",98,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",99,null],[12,"ipv6mr_interface","","",99,null],[3,"MsgFlags","","",null,null],[3,"SockFlag","","",null,null],[3,"CmsgSpace","","A structure used to make room in a cmsghdr passed to recvmsg. The\nsize and alignment match that of a cmsghdr followed by a T, but the\nfields are not accessible, as the actual types will change on a call\nto recvmsg.",null,null],[3,"RecvMsg","","",null,null],[12,"bytes","","",100,null],[12,"address","","",100,null],[12,"flags","","",100,null],[3,"CmsgIterator","","",null,null],[3,"linger","","",null,null],[12,"l_onoff","","",101,null],[12,"l_linger","","",101,null],[3,"ucred","","",null,null],[4,"AddressFamily","","",null,null],[13,"Unix","","",102,null],[13,"Inet","","",102,null],[13,"Inet6","","",102,null],[13,"Netlink","","",102,null],[13,"Packet","","",102,null],[4,"SockAddr","","Represents a socket address",null,null],[13,"Inet","","",103,null],[13,"Unix","","",103,null],[13,"Netlink","","",103,null],[4,"InetAddr","","",null,null],[13,"V4","","",104,null],[13,"V6","","",104,null],[4,"IpAddr","","",null,null],[13,"V4","","",105,null],[13,"V6","","",105,null],[4,"SockType","","",null,null],[13,"Stream","","",106,null],[13,"Datagram","","",106,null],[13,"SeqPacket","","",106,null],[13,"Raw","","",106,null],[13,"Rdm","","",106,null],[4,"ControlMessage","","A type-safe wrapper around a single control message. More types may\nbe added to this enum; do not exhaustively pattern-match it.\n[Further reading](http://man7.org/linux/man-pages/man3/cmsg.3.html)",null,null],[13,"ScmRights","","A message of type SCM_RIGHTS, containing an array of file\ndescriptors passed between processes. See the description in the\n&quot;Ancillary messages&quot; section of the\n[unix(7) man page](http://man7.org/linux/man-pages/man7/unix.7.html).",107,null],[4,"SockLevel","","The protocol level at which to get / set socket options. Used as an\nargument to `getsockopt` and `setsockopt`.",null,null],[13,"Socket","","",108,null],[13,"Tcp","","",108,null],[13,"Ip","","",108,null],[13,"Ipv6","","",108,null],[13,"Udp","","",108,null],[13,"Netlink","","",108,null],[4,"Shutdown","","",null,null],[13,"Read","","Further receptions will be disallowed.",109,null],[13,"Write","","Further  transmissions will be disallowed.",109,null],[13,"Both","","Further receptions and transmissions will be disallowed.",109,null],[5,"sendmsg","","Send data in scatter-gather vectors to a socket, possibly accompanied\nby ancillary data. Optionally direct the message at the given address,\nas with sendto.",null,null],[5,"recvmsg","","Receive message in scatter-gather vectors from a socket, and\noptionally receive ancillary data into the provided buffer.\nIf no ancillary data is desired, use () as the type parameter.",null,null],[5,"socket","","Create an endpoint for communication",null,{"inputs":[{"name":"addressfamily"},{"name":"socktype"},{"name":"sockflag"},{"name":"c_int"}],"output":{"name":"result"}}],[5,"socketpair","","Create a pair of connected sockets",null,{"inputs":[{"name":"addressfamily"},{"name":"socktype"},{"name":"c_int"},{"name":"sockflag"}],"output":{"name":"result"}}],[5,"listen","","Listen for connections on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"usize"}],"output":{"name":"result"}}],[5,"bind","","Bind a name to a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockaddr"}],"output":{"name":"result"}}],[5,"accept","","Accept a connection on a socket",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"accept4","","Accept a connection on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockflag"}],"output":{"name":"result"}}],[5,"connect","","Initiate a connection on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockaddr"}],"output":{"name":"result"}}],[5,"recv","","Receive data from a connection-oriented socket. Returns the number of\nbytes read",null,null],[5,"recvfrom","","Receive data from a connectionless or connection-oriented socket. Returns\nthe number of bytes read and the socket address of the sender.",null,null],[5,"sendto","","",null,null],[5,"send","","Send data to a connection-oriented socket. Returns the number of bytes read",null,null],[5,"getsockopt","","Get the current value for the requested socket option",null,{"inputs":[{"name":"rawfd"},{"name":"o"}],"output":{"name":"result"}}],[5,"setsockopt","","Sets the value for the requested socket option",null,{"inputs":[{"name":"rawfd"},{"name":"o"},{"name":"val"}],"output":{"name":"result"}}],[5,"getpeername","","Get the address of the peer connected to the socket `fd`.",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"getsockname","","Get the current address to which the socket `fd` is bound.",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"sockaddr_storage_to_addr","","",null,{"inputs":[{"name":"sockaddr_storage"},{"name":"usize"}],"output":{"name":"result"}}],[5,"shutdown","","Shut down part of a full-duplex connection.",null,{"inputs":[{"name":"rawfd"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"clone","","",97,null],[11,"eq","","",97,null],[11,"hash","","",97,null],[11,"new","","",97,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"netlinkaddr"}}],[11,"pid","","",97,null],[11,"groups","","",97,null],[11,"fmt","","",97,null],[11,"hash","","",102,null],[11,"fmt","","",102,null],[11,"eq","","",102,null],[11,"clone","","",102,null],[11,"from_std","","",104,{"inputs":[{"name":"socketaddr"}],"output":{"name":"inetaddr"}}],[11,"new","","",104,{"inputs":[{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"inetaddr"}}],[11,"ip","","Gets the IP address associated with this socket address.",104,null],[11,"port","","Gets the port number associated with this socket address",104,null],[11,"to_std","","",104,null],[11,"to_str","","",104,null],[11,"eq","","",104,null],[11,"hash","","",104,null],[11,"clone","","",104,null],[11,"fmt","","",104,null],[11,"new_v4","","Create a new IpAddr that contains an IPv4 address.",105,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipaddr"}}],[11,"new_v6","","Create a new IpAddr that contains an IPv6 address.",105,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",105,null],[11,"new","","",95,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"from_std","","",95,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"any","","",95,{"inputs":[],"output":{"name":"ipv4addr"}}],[11,"octets","","",95,null],[11,"to_std","","",95,null],[11,"eq","","",95,null],[11,"hash","","",95,null],[11,"clone","","",95,null],[11,"fmt","","",95,null],[11,"clone","","",96,null],[11,"new","","",96,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"from_std","","",96,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Return the eight 16-bit segments that make up this address",96,null],[11,"to_std","","",96,null],[11,"fmt","","",96,null],[11,"new","","Create a new sockaddr_un representing a filesystem path.",94,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"new_abstract","","Create a new sockaddr_un representing an address in the\n&quot;abstract namespace&quot;. This is a Linux-specific extension,\nprimarily used to allow chrooted processes to communicate with\nspecific daemons.",94,null],[11,"path","","If this address represents a filesystem path, return that path.",94,null],[11,"eq","","",94,null],[11,"hash","","",94,null],[11,"clone","","",94,null],[11,"fmt","","",94,null],[11,"new_inet","","",103,{"inputs":[{"name":"inetaddr"}],"output":{"name":"sockaddr"}}],[11,"new_unix","","",103,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"new_netlink","","",103,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"sockaddr"}}],[11,"family","","",103,null],[11,"to_str","","",103,null],[11,"as_ffi_pair","","",103,null],[11,"eq","","",103,null],[11,"hash","","",103,null],[11,"clone","","",103,null],[11,"fmt","","",103,null],[11,"hash","","",110,null],[11,"cmp","","",110,null],[11,"partial_cmp","","",110,null],[11,"lt","","",110,null],[11,"le","","",110,null],[11,"gt","","",110,null],[11,"ge","","",110,null],[11,"clone","","",110,null],[11,"eq","","",110,null],[11,"ne","","",110,null],[11,"fmt","","",110,null],[11,"empty","","Returns an empty set of flags.",110,{"inputs":[],"output":{"name":"msgflags"}}],[11,"all","","Returns the set containing all flags.",110,{"inputs":[],"output":{"name":"msgflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",110,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",110,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",110,{"inputs":[{"name":"c_int"}],"output":{"name":"msgflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",110,null],[11,"is_all","","Returns `true` if all flags are currently set.",110,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",110,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",110,null],[11,"insert","","Inserts the specified flags in-place.",110,null],[11,"remove","","Removes the specified flags in-place.",110,null],[11,"toggle","","Toggles the specified flags in-place.",110,null],[11,"bitor","","Returns the union of the two sets of flags.",110,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",110,null],[11,"bitand","","Returns the intersection between the two sets of flags.",110,null],[11,"sub","","Returns the set difference of the two sets of flags.",110,null],[11,"not","","Returns the complement of this set of flags.",110,null],[11,"from_iter","","",110,{"inputs":[{"name":"t"}],"output":{"name":"msgflags"}}],[11,"clone","","",98,null],[11,"fmt","","",98,null],[11,"new","","",98,{"inputs":[{"name":"ipv4addr"},{"name":"option"}],"output":{"name":"ip_mreq"}}],[11,"new","","",99,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6_mreq"}}],[0,"sockopt","","",null,null],[3,"ReuseAddr","nix::sys::socket::sockopt","",null,null],[3,"ReusePort","","",null,null],[3,"TcpNoDelay","","",null,null],[3,"Linger","","",null,null],[3,"IpAddMembership","","",null,null],[3,"IpDropMembership","","",null,null],[3,"Ipv6AddMembership","","",null,null],[3,"Ipv6DropMembership","","",null,null],[3,"IpMulticastTtl","","",null,null],[3,"IpMulticastLoop","","",null,null],[3,"ReceiveTimeout","","",null,null],[3,"SendTimeout","","",null,null],[3,"Broadcast","","",null,null],[3,"OobInline","","",null,null],[3,"SocketError","","",null,null],[3,"KeepAlive","","",null,null],[3,"PeerCredentials","","",null,null],[3,"TcpKeepIdle","","",null,null],[3,"RcvBuf","","",null,null],[3,"SndBuf","","",null,null],[3,"RcvBufForce","","",null,null],[3,"SndBufForce","","",null,null],[3,"SockType","","",null,null],[3,"AcceptConn","","",null,null],[3,"OriginalDst","","",null,null],[11,"fmt","","",111,null],[11,"clone","","",111,null],[11,"set","","",111,null],[11,"get","","",111,null],[11,"fmt","","",112,null],[11,"clone","","",112,null],[11,"set","","",112,null],[11,"get","","",112,null],[11,"fmt","","",113,null],[11,"clone","","",113,null],[11,"set","","",113,null],[11,"get","","",113,null],[11,"fmt","","",114,null],[11,"clone","","",114,null],[11,"set","","",114,null],[11,"get","","",114,null],[11,"fmt","","",115,null],[11,"clone","","",115,null],[11,"set","","",115,null],[11,"fmt","","",116,null],[11,"clone","","",116,null],[11,"set","","",116,null],[11,"fmt","","",117,null],[11,"clone","","",117,null],[11,"set","","",117,null],[11,"fmt","","",118,null],[11,"clone","","",118,null],[11,"set","","",118,null],[11,"fmt","","",119,null],[11,"clone","","",119,null],[11,"set","","",119,null],[11,"get","","",119,null],[11,"fmt","","",120,null],[11,"clone","","",120,null],[11,"set","","",120,null],[11,"get","","",120,null],[11,"fmt","","",121,null],[11,"clone","","",121,null],[11,"set","","",121,null],[11,"get","","",121,null],[11,"fmt","","",122,null],[11,"clone","","",122,null],[11,"set","","",122,null],[11,"get","","",122,null],[11,"fmt","","",123,null],[11,"clone","","",123,null],[11,"set","","",123,null],[11,"get","","",123,null],[11,"fmt","","",124,null],[11,"clone","","",124,null],[11,"set","","",124,null],[11,"get","","",124,null],[11,"fmt","","",125,null],[11,"clone","","",125,null],[11,"get","","",125,null],[11,"fmt","","",126,null],[11,"clone","","",126,null],[11,"set","","",126,null],[11,"get","","",126,null],[11,"fmt","","",127,null],[11,"clone","","",127,null],[11,"get","","",127,null],[11,"fmt","","",128,null],[11,"clone","","",128,null],[11,"set","","",128,null],[11,"get","","",128,null],[11,"fmt","","",129,null],[11,"clone","","",129,null],[11,"set","","",129,null],[11,"get","","",129,null],[11,"fmt","","",130,null],[11,"clone","","",130,null],[11,"set","","",130,null],[11,"get","","",130,null],[11,"fmt","","",131,null],[11,"clone","","",131,null],[11,"set","","",131,null],[11,"fmt","","",132,null],[11,"clone","","",132,null],[11,"set","","",132,null],[11,"fmt","","",133,null],[11,"clone","","",133,null],[11,"get","","",133,null],[11,"fmt","","",134,null],[11,"clone","","",134,null],[11,"get","","",134,null],[11,"fmt","","",135,null],[11,"clone","","",135,null],[11,"get","","",135,null],[6,"IpMulticastTtl","nix::sys::socket","",null,null],[6,"InAddrT","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_PACKET","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_ORIGINAL_DST","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[8,"GetSockOpt","","Represents a socket option that can be accessed or set. Used as an argument\nto `getsockopt`",null,null],[16,"Val","","",136,null],[8,"SetSockOpt","","Represents a socket option that can be accessed or set. Used as an argument\nto `setsockopt`",null,null],[16,"Val","","",137,null],[11,"fmt","","",106,null],[11,"eq","","",106,null],[11,"clone","","",106,null],[11,"hash","","",138,null],[11,"cmp","","",138,null],[11,"partial_cmp","","",138,null],[11,"lt","","",138,null],[11,"le","","",138,null],[11,"gt","","",138,null],[11,"ge","","",138,null],[11,"clone","","",138,null],[11,"eq","","",138,null],[11,"ne","","",138,null],[11,"fmt","","",138,null],[11,"empty","","Returns an empty set of flags.",138,{"inputs":[],"output":{"name":"sockflag"}}],[11,"all","","Returns the set containing all flags.",138,{"inputs":[],"output":{"name":"sockflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",138,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",138,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",138,{"inputs":[{"name":"c_int"}],"output":{"name":"sockflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",138,null],[11,"is_all","","Returns `true` if all flags are currently set.",138,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",138,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",138,null],[11,"insert","","Inserts the specified flags in-place.",138,null],[11,"remove","","Removes the specified flags in-place.",138,null],[11,"toggle","","Toggles the specified flags in-place.",138,null],[11,"bitor","","Returns the union of the two sets of flags.",138,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",138,null],[11,"bitand","","Returns the intersection between the two sets of flags.",138,null],[11,"sub","","Returns the set difference of the two sets of flags.",138,null],[11,"not","","Returns the complement of this set of flags.",138,null],[11,"from_iter","","",138,{"inputs":[{"name":"t"}],"output":{"name":"sockflag"}}],[11,"new","","Create a CmsgSpace&lt;T&gt;. The structure is used only for space, so\nthe fields are uninitialized.",139,{"inputs":[],"output":{"name":"self"}}],[11,"cmsgs","","Iterate over the valid control messages pointed to by this\nmsghdr.",100,null],[11,"next","","",140,null],[11,"fmt","","",101,null],[11,"clone","","",101,null],[11,"fmt","","",141,null],[11,"eq","","",141,null],[11,"ne","","",141,null],[11,"clone","","",141,null],[11,"fmt","","",109,null],[11,"eq","","",109,null],[11,"clone","","",109,null],[0,"stat","nix::sys","",null,null],[6,"dev_t","nix::sys::stat","",null,null],[3,"FileStat","","",null,null],[12,"st_dev","","",58,null],[12,"st_ino","","",58,null],[12,"st_nlink","","",58,null],[12,"st_mode","","",58,null],[12,"st_uid","","",58,null],[12,"st_gid","","",58,null],[12,"st_rdev","","",58,null],[12,"st_size","","",58,null],[12,"st_blksize","","",58,null],[12,"st_blocks","","",58,null],[12,"st_atime","","",58,null],[12,"st_atime_nsec","","",58,null],[12,"st_mtime","","",58,null],[12,"st_mtime_nsec","","",58,null],[12,"st_ctime","","",58,null],[12,"st_ctime_nsec","","",58,null],[3,"SFlag","","",null,null],[3,"Mode","","",null,null],[5,"mknod","","",null,{"inputs":[{"name":"p"},{"name":"sflag"},{"name":"mode"},{"name":"dev_t"}],"output":{"name":"result"}}],[5,"mkdev","","",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"dev_t"}}],[5,"umask","","",null,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[5,"stat","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"lstat","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"fstat","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IROTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[11,"hash","","",142,null],[11,"cmp","","",142,null],[11,"partial_cmp","","",142,null],[11,"lt","","",142,null],[11,"le","","",142,null],[11,"gt","","",142,null],[11,"ge","","",142,null],[11,"clone","","",142,null],[11,"eq","","",142,null],[11,"ne","","",142,null],[11,"fmt","","",142,null],[11,"empty","","Returns an empty set of flags.",142,{"inputs":[],"output":{"name":"sflag"}}],[11,"all","","Returns the set containing all flags.",142,{"inputs":[],"output":{"name":"sflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",142,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",142,{"inputs":[{"name":"mode_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",142,{"inputs":[{"name":"mode_t"}],"output":{"name":"sflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",142,null],[11,"is_all","","Returns `true` if all flags are currently set.",142,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",142,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",142,null],[11,"insert","","Inserts the specified flags in-place.",142,null],[11,"remove","","Removes the specified flags in-place.",142,null],[11,"toggle","","Toggles the specified flags in-place.",142,null],[11,"bitor","","Returns the union of the two sets of flags.",142,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",142,null],[11,"bitand","","Returns the intersection between the two sets of flags.",142,null],[11,"sub","","Returns the set difference of the two sets of flags.",142,null],[11,"not","","Returns the complement of this set of flags.",142,null],[11,"from_iter","","",142,{"inputs":[{"name":"t"}],"output":{"name":"sflag"}}],[11,"hash","","",143,null],[11,"cmp","","",143,null],[11,"partial_cmp","","",143,null],[11,"lt","","",143,null],[11,"le","","",143,null],[11,"gt","","",143,null],[11,"ge","","",143,null],[11,"clone","","",143,null],[11,"eq","","",143,null],[11,"ne","","",143,null],[11,"fmt","","",143,null],[11,"empty","","Returns an empty set of flags.",143,{"inputs":[],"output":{"name":"mode"}}],[11,"all","","Returns the set containing all flags.",143,{"inputs":[],"output":{"name":"mode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",143,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",143,{"inputs":[{"name":"mode_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",143,{"inputs":[{"name":"mode_t"}],"output":{"name":"mode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",143,null],[11,"is_all","","Returns `true` if all flags are currently set.",143,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",143,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",143,null],[11,"insert","","Inserts the specified flags in-place.",143,null],[11,"remove","","Removes the specified flags in-place.",143,null],[11,"toggle","","Toggles the specified flags in-place.",143,null],[11,"bitor","","Returns the union of the two sets of flags.",143,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",143,null],[11,"bitand","","Returns the intersection between the two sets of flags.",143,null],[11,"sub","","Returns the set difference of the two sets of flags.",143,null],[11,"not","","Returns the complement of this set of flags.",143,null],[11,"from_iter","","",143,{"inputs":[{"name":"t"}],"output":{"name":"mode"}}],[0,"syscall","nix::sys","Indirect system call",null,null],[5,"syscall","nix::sys::syscall","",null,null],[6,"Syscall","","",null,null],[7,"SYSPIVOTROOT","","",null,null],[7,"MEMFD_CREATE","","",null,null],[0,"termios","nix::sys","",null,null],[3,"Termios","nix::sys::termios","",null,null],[12,"c_iflag","","",144,null],[12,"c_oflag","","",144,null],[12,"c_cflag","","",144,null],[12,"c_lflag","","",144,null],[12,"c_line","","",144,null],[12,"c_cc","","",144,null],[12,"c_ispeed","","",144,null],[12,"c_ospeed","","",144,null],[3,"InputFlags","","",null,null],[3,"OutputFlags","","",null,null],[3,"ControlFlags","","",null,null],[3,"LocalFlags","","",null,null],[4,"SetArg","","",null,null],[13,"TCSANOW","","",145,null],[13,"TCSADRAIN","","",145,null],[13,"TCSAFLUSH","","",145,null],[4,"FlushArg","","",null,null],[13,"TCIFLUSH","","",146,null],[13,"TCOFLUSH","","",146,null],[13,"TCIOFLUSH","","",146,null],[4,"FlowArg","","",null,null],[13,"TCOOFF","","",147,null],[13,"TCOON","","",147,null],[13,"TCIOFF","","",147,null],[13,"TCION","","",147,null],[5,"cfgetispeed","","",null,{"inputs":[{"name":"termios"}],"output":{"name":"speed_t"}}],[5,"cfgetospeed","","",null,{"inputs":[{"name":"termios"}],"output":{"name":"speed_t"}}],[5,"cfsetispeed","","",null,{"inputs":[{"name":"termios"},{"name":"speed_t"}],"output":{"name":"result"}}],[5,"cfsetospeed","","",null,{"inputs":[{"name":"termios"},{"name":"speed_t"}],"output":{"name":"result"}}],[5,"tcgetattr","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"tcsetattr","","",null,{"inputs":[{"name":"rawfd"},{"name":"setarg"},{"name":"termios"}],"output":{"name":"result"}}],[5,"tcdrain","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"tcflow","","",null,{"inputs":[{"name":"rawfd"},{"name":"flowarg"}],"output":{"name":"result"}}],[5,"tcflush","","",null,{"inputs":[{"name":"rawfd"},{"name":"flusharg"}],"output":{"name":"result"}}],[5,"tcsendbreak","","",null,{"inputs":[{"name":"rawfd"},{"name":"c_int"}],"output":{"name":"result"}}],[11,"clone","","",144,null],[11,"hash","","",148,null],[11,"cmp","","",148,null],[11,"partial_cmp","","",148,null],[11,"lt","","",148,null],[11,"le","","",148,null],[11,"gt","","",148,null],[11,"ge","","",148,null],[11,"clone","","",148,null],[11,"eq","","",148,null],[11,"ne","","",148,null],[11,"fmt","","",148,null],[11,"empty","","Returns an empty set of flags.",148,{"inputs":[],"output":{"name":"inputflags"}}],[11,"all","","Returns the set containing all flags.",148,{"inputs":[],"output":{"name":"inputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",148,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",148,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",148,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"inputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",148,null],[11,"is_all","","Returns `true` if all flags are currently set.",148,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",148,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",148,null],[11,"insert","","Inserts the specified flags in-place.",148,null],[11,"remove","","Removes the specified flags in-place.",148,null],[11,"toggle","","Toggles the specified flags in-place.",148,null],[11,"bitor","","Returns the union of the two sets of flags.",148,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",148,null],[11,"bitand","","Returns the intersection between the two sets of flags.",148,null],[11,"sub","","Returns the set difference of the two sets of flags.",148,null],[11,"not","","Returns the complement of this set of flags.",148,null],[11,"from_iter","","",148,{"inputs":[{"name":"t"}],"output":{"name":"inputflags"}}],[11,"hash","","",149,null],[11,"cmp","","",149,null],[11,"partial_cmp","","",149,null],[11,"lt","","",149,null],[11,"le","","",149,null],[11,"gt","","",149,null],[11,"ge","","",149,null],[11,"clone","","",149,null],[11,"eq","","",149,null],[11,"ne","","",149,null],[11,"fmt","","",149,null],[11,"empty","","Returns an empty set of flags.",149,{"inputs":[],"output":{"name":"outputflags"}}],[11,"all","","Returns the set containing all flags.",149,{"inputs":[],"output":{"name":"outputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",149,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",149,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",149,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"outputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",149,null],[11,"is_all","","Returns `true` if all flags are currently set.",149,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",149,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",149,null],[11,"insert","","Inserts the specified flags in-place.",149,null],[11,"remove","","Removes the specified flags in-place.",149,null],[11,"toggle","","Toggles the specified flags in-place.",149,null],[11,"bitor","","Returns the union of the two sets of flags.",149,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",149,null],[11,"bitand","","Returns the intersection between the two sets of flags.",149,null],[11,"sub","","Returns the set difference of the two sets of flags.",149,null],[11,"not","","Returns the complement of this set of flags.",149,null],[11,"from_iter","","",149,{"inputs":[{"name":"t"}],"output":{"name":"outputflags"}}],[11,"hash","","",150,null],[11,"cmp","","",150,null],[11,"partial_cmp","","",150,null],[11,"lt","","",150,null],[11,"le","","",150,null],[11,"gt","","",150,null],[11,"ge","","",150,null],[11,"clone","","",150,null],[11,"eq","","",150,null],[11,"ne","","",150,null],[11,"fmt","","",150,null],[11,"empty","","Returns an empty set of flags.",150,{"inputs":[],"output":{"name":"controlflags"}}],[11,"all","","Returns the set containing all flags.",150,{"inputs":[],"output":{"name":"controlflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",150,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",150,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",150,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"controlflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",150,null],[11,"is_all","","Returns `true` if all flags are currently set.",150,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",150,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",150,null],[11,"insert","","Inserts the specified flags in-place.",150,null],[11,"remove","","Removes the specified flags in-place.",150,null],[11,"toggle","","Toggles the specified flags in-place.",150,null],[11,"bitor","","Returns the union of the two sets of flags.",150,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",150,null],[11,"bitand","","Returns the intersection between the two sets of flags.",150,null],[11,"sub","","Returns the set difference of the two sets of flags.",150,null],[11,"not","","Returns the complement of this set of flags.",150,null],[11,"from_iter","","",150,{"inputs":[{"name":"t"}],"output":{"name":"controlflags"}}],[11,"hash","","",151,null],[11,"cmp","","",151,null],[11,"partial_cmp","","",151,null],[11,"lt","","",151,null],[11,"le","","",151,null],[11,"gt","","",151,null],[11,"ge","","",151,null],[11,"clone","","",151,null],[11,"eq","","",151,null],[11,"ne","","",151,null],[11,"fmt","","",151,null],[11,"empty","","Returns an empty set of flags.",151,{"inputs":[],"output":{"name":"localflags"}}],[11,"all","","Returns the set containing all flags.",151,{"inputs":[],"output":{"name":"localflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",151,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",151,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",151,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"localflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",151,null],[11,"is_all","","Returns `true` if all flags are currently set.",151,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",151,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",151,null],[11,"insert","","Inserts the specified flags in-place.",151,null],[11,"remove","","Removes the specified flags in-place.",151,null],[11,"toggle","","Toggles the specified flags in-place.",151,null],[11,"bitor","","Returns the union of the two sets of flags.",151,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",151,null],[11,"bitand","","Returns the intersection between the two sets of flags.",151,null],[11,"sub","","Returns the set difference of the two sets of flags.",151,null],[11,"not","","Returns the complement of this set of flags.",151,null],[11,"from_iter","","",151,{"inputs":[{"name":"t"}],"output":{"name":"localflags"}}],[11,"clone","","",145,null],[11,"clone","","",146,null],[11,"clone","","",147,null],[6,"tcflag_t","","",null,null],[6,"cc_t","","",null,null],[6,"speed_t","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VMIN","","",null,null],[17,"VTIME","","",null,null],[17,"NCCS","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"IUTF8","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"IEXTEN","","",null,null],[17,"EXTPROC","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[0,"utsname","nix::sys","",null,null],[3,"UtsName","nix::sys::utsname","",null,null],[5,"uname","","",null,{"inputs":[],"output":{"name":"utsname"}}],[11,"clone","","",152,null],[11,"sysname","","",152,null],[11,"nodename","","",152,null],[11,"release","","",152,null],[11,"version","","",152,null],[11,"machine","","",152,null],[0,"wait","nix::sys","",null,null],[3,"WaitPidFlag","nix::sys::wait","",null,null],[4,"WaitStatus","","",null,null],[13,"Exited","","",153,null],[13,"Signaled","","",153,null],[13,"Stopped","","",153,null],[13,"Continued","","",153,null],[13,"StillAlive","","",153,null],[5,"waitpid","","",null,{"inputs":[{"name":"pid_t"},{"name":"option"}],"output":{"name":"result"}}],[5,"wait","","",null,{"inputs":[],"output":{"name":"result"}}],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[11,"hash","","",154,null],[11,"cmp","","",154,null],[11,"partial_cmp","","",154,null],[11,"lt","","",154,null],[11,"le","","",154,null],[11,"gt","","",154,null],[11,"ge","","",154,null],[11,"clone","","",154,null],[11,"eq","","",154,null],[11,"ne","","",154,null],[11,"fmt","","",154,null],[11,"empty","","Returns an empty set of flags.",154,{"inputs":[],"output":{"name":"waitpidflag"}}],[11,"all","","Returns the set containing all flags.",154,{"inputs":[],"output":{"name":"waitpidflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",154,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",154,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",154,{"inputs":[{"name":"c_int"}],"output":{"name":"waitpidflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",154,null],[11,"is_all","","Returns `true` if all flags are currently set.",154,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",154,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",154,null],[11,"insert","","Inserts the specified flags in-place.",154,null],[11,"remove","","Removes the specified flags in-place.",154,null],[11,"toggle","","Toggles the specified flags in-place.",154,null],[11,"bitor","","Returns the union of the two sets of flags.",154,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",154,null],[11,"bitand","","Returns the intersection between the two sets of flags.",154,null],[11,"sub","","Returns the set difference of the two sets of flags.",154,null],[11,"not","","Returns the complement of this set of flags.",154,null],[11,"from_iter","","",154,{"inputs":[{"name":"t"}],"output":{"name":"waitpidflag"}}],[11,"fmt","","",153,null],[11,"clone","","",153,null],[11,"eq","","",153,null],[11,"ne","","",153,null],[0,"mman","nix::sys","",null,null],[3,"MapFlags","nix::sys::mman","",null,null],[3,"MsFlags","","",null,null],[3,"ProtFlags","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mmap","","Calls to mmap are inherently unsafe, so they must be made in an unsafe block. Typically\na higher-level abstraction will hide the unsafe interactions with the mmap&#39;d region.",null,null],[5,"munmap","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"shm_open","","",null,{"inputs":[{"name":"p"},{"name":"oflag"},{"name":"mode"}],"output":{"name":"result"}}],[5,"shm_unlink","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"hash","","",155,null],[11,"cmp","","",155,null],[11,"partial_cmp","","",155,null],[11,"lt","","",155,null],[11,"le","","",155,null],[11,"gt","","",155,null],[11,"ge","","",155,null],[11,"clone","","",155,null],[11,"eq","","",155,null],[11,"ne","","",155,null],[11,"fmt","","",155,null],[11,"empty","","Returns an empty set of flags.",155,{"inputs":[],"output":{"name":"mapflags"}}],[11,"all","","Returns the set containing all flags.",155,{"inputs":[],"output":{"name":"mapflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",155,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",155,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",155,{"inputs":[{"name":"c_int"}],"output":{"name":"mapflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",155,null],[11,"is_all","","Returns `true` if all flags are currently set.",155,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",155,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",155,null],[11,"insert","","Inserts the specified flags in-place.",155,null],[11,"remove","","Removes the specified flags in-place.",155,null],[11,"toggle","","Toggles the specified flags in-place.",155,null],[11,"bitor","","Returns the union of the two sets of flags.",155,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",155,null],[11,"bitand","","Returns the intersection between the two sets of flags.",155,null],[11,"sub","","Returns the set difference of the two sets of flags.",155,null],[11,"not","","Returns the complement of this set of flags.",155,null],[11,"from_iter","","",155,{"inputs":[{"name":"t"}],"output":{"name":"mapflags"}}],[11,"hash","","",156,null],[11,"cmp","","",156,null],[11,"partial_cmp","","",156,null],[11,"lt","","",156,null],[11,"le","","",156,null],[11,"gt","","",156,null],[11,"ge","","",156,null],[11,"clone","","",156,null],[11,"eq","","",156,null],[11,"ne","","",156,null],[11,"fmt","","",156,null],[11,"empty","","Returns an empty set of flags.",156,{"inputs":[],"output":{"name":"msflags"}}],[11,"all","","Returns the set containing all flags.",156,{"inputs":[],"output":{"name":"msflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",156,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",156,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",156,{"inputs":[{"name":"c_int"}],"output":{"name":"msflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",156,null],[11,"is_all","","Returns `true` if all flags are currently set.",156,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",156,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",156,null],[11,"insert","","Inserts the specified flags in-place.",156,null],[11,"remove","","Removes the specified flags in-place.",156,null],[11,"toggle","","Toggles the specified flags in-place.",156,null],[11,"bitor","","Returns the union of the two sets of flags.",156,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",156,null],[11,"bitand","","Returns the intersection between the two sets of flags.",156,null],[11,"sub","","Returns the set difference of the two sets of flags.",156,null],[11,"not","","Returns the complement of this set of flags.",156,null],[11,"from_iter","","",156,{"inputs":[{"name":"t"}],"output":{"name":"msflags"}}],[6,"MmapAdvise","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[11,"hash","","",157,null],[11,"cmp","","",157,null],[11,"partial_cmp","","",157,null],[11,"lt","","",157,null],[11,"le","","",157,null],[11,"gt","","",157,null],[11,"ge","","",157,null],[11,"clone","","",157,null],[11,"eq","","",157,null],[11,"ne","","",157,null],[11,"fmt","","",157,null],[11,"empty","","Returns an empty set of flags.",157,{"inputs":[],"output":{"name":"protflags"}}],[11,"all","","Returns the set containing all flags.",157,{"inputs":[],"output":{"name":"protflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",157,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",157,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",157,{"inputs":[{"name":"c_int"}],"output":{"name":"protflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",157,null],[11,"is_all","","Returns `true` if all flags are currently set.",157,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",157,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",157,null],[11,"insert","","Inserts the specified flags in-place.",157,null],[11,"remove","","Removes the specified flags in-place.",157,null],[11,"toggle","","Toggles the specified flags in-place.",157,null],[11,"bitor","","Returns the union of the two sets of flags.",157,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",157,null],[11,"bitand","","Returns the intersection between the two sets of flags.",157,null],[11,"sub","","Returns the set difference of the two sets of flags.",157,null],[11,"not","","Returns the complement of this set of flags.",157,null],[11,"from_iter","","",157,{"inputs":[{"name":"t"}],"output":{"name":"protflags"}}],[0,"uio","nix::sys","",null,null],[3,"IoVec","nix::sys::uio","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"pwrite","","",null,null],[5,"pread","","",null,null],[11,"as_slice","","",158,null],[11,"from_slice","","",158,null],[11,"from_mut_slice","","",158,null],[0,"time","nix::sys","",null,null],[3,"TimeVal","nix::sys::time","",null,null],[12,"tv_sec","","",159,null],[12,"tv_usec","","",159,null],[11,"fmt","","",159,null],[11,"cmp","","",159,null],[11,"partial_cmp","","",159,null],[11,"lt","","",159,null],[11,"le","","",159,null],[11,"gt","","",159,null],[11,"ge","","",159,null],[11,"eq","","",159,null],[11,"ne","","",159,null],[11,"clone","","",159,null],[11,"zero","","",159,{"inputs":[],"output":{"name":"timeval"}}],[11,"hours","","",159,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"minutes","","",159,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"seconds","","",159,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"milliseconds","","",159,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"microseconds","","Makes a new `TimeVal` with given number of microseconds.",159,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"num_hours","","",159,null],[11,"num_minutes","","",159,null],[11,"num_seconds","","",159,null],[11,"num_milliseconds","","",159,null],[11,"num_microseconds","","",159,null],[11,"neg","","",159,null],[11,"add","","",159,null],[11,"sub","","",159,null],[11,"mul","","",159,null],[11,"div","","",159,null],[11,"fmt","","",159,null],[0,"ptrace","nix::sys","",null,null],[5,"ptrace","nix::sys::ptrace","",null,null],[5,"ptrace_setoptions","","Set options, as with `ptrace(PTRACE_SETOPTIONS,...)`.",null,{"inputs":[{"name":"pid_t"},{"name":"ptraceoptions"}],"output":{"name":"result"}}],[0,"ptrace","","",null,null],[6,"PtraceRequest","nix::sys::ptrace::ptrace","",null,null],[6,"PtraceEvent","","",null,null],[6,"PtraceOptions","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"PTRACE_EVENT_STOP","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[0,"select","nix::sys","",null,null],[3,"FdSet","nix::sys::select","",null,null],[5,"select","","",null,{"inputs":[{"name":"c_int"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[17,"FD_SETSIZE","","",null,null],[11,"clone","","",160,null],[11,"new","","",160,{"inputs":[],"output":{"name":"fdset"}}],[11,"insert","","",160,null],[11,"remove","","",160,null],[11,"contains","","",160,null],[11,"clear","","",160,null],[0,"quota","nix::sys","",null,null],[5,"quotactl_on","nix::sys::quota","",null,{"inputs":[{"name":"quotatype"},{"name":"p"},{"name":"quotafmt"},{"name":"p"}],"output":{"name":"result"}}],[5,"quotactl_off","","",null,{"inputs":[{"name":"quotatype"},{"name":"p"}],"output":{"name":"result"}}],[5,"quotactl_sync","","",null,{"inputs":[{"name":"quotatype"},{"name":"option"}],"output":{"name":"result"}}],[5,"quotactl_get","","",null,{"inputs":[{"name":"quotatype"},{"name":"p"},{"name":"c_int"},{"name":"dqblk"}],"output":{"name":"result"}}],[5,"quotactl_set","","",null,{"inputs":[{"name":"quotatype"},{"name":"p"},{"name":"c_int"},{"name":"dqblk"}],"output":{"name":"result"}}],[0,"quota","","",null,null],[3,"QuotaCmd","nix::sys::quota::quota","",null,null],[12,"0","","",161,null],[12,"1","","",161,null],[3,"QuotaValidFlags","","",null,null],[3,"Dqblk","","",null,null],[12,"bhardlimit","","",162,null],[12,"bsoftlimit","","",162,null],[12,"curspace","","",162,null],[12,"ihardlimit","","",162,null],[12,"isoftlimit","","",162,null],[12,"curinodes","","",162,null],[12,"btime","","",162,null],[12,"itime","","",162,null],[12,"valid","","",162,null],[6,"QuotaSubCmd","","",null,null],[6,"QuotaType","","",null,null],[6,"QuotaFmt","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[11,"as_int","","",161,null],[11,"hash","","",163,null],[11,"cmp","","",163,null],[11,"partial_cmp","","",163,null],[11,"lt","","",163,null],[11,"le","","",163,null],[11,"gt","","",163,null],[11,"ge","","",163,null],[11,"clone","","",163,null],[11,"eq","","",163,null],[11,"ne","","",163,null],[11,"default","","",163,{"inputs":[],"output":{"name":"quotavalidflags"}}],[11,"fmt","","",163,null],[11,"empty","","Returns an empty set of flags.",163,{"inputs":[],"output":{"name":"quotavalidflags"}}],[11,"all","","Returns the set containing all flags.",163,{"inputs":[],"output":{"name":"quotavalidflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",163,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",163,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",163,{"inputs":[{"name":"u32"}],"output":{"name":"quotavalidflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",163,null],[11,"is_all","","Returns `true` if all flags are currently set.",163,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",163,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",163,null],[11,"insert","","Inserts the specified flags in-place.",163,null],[11,"remove","","Removes the specified flags in-place.",163,null],[11,"toggle","","Toggles the specified flags in-place.",163,null],[11,"bitor","","Returns the union of the two sets of flags.",163,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",163,null],[11,"bitand","","Returns the intersection between the two sets of flags.",163,null],[11,"sub","","Returns the set difference of the two sets of flags.",163,null],[11,"not","","Returns the complement of this set of flags.",163,null],[11,"from_iter","","",163,{"inputs":[{"name":"t"}],"output":{"name":"quotavalidflags"}}],[11,"clone","","",162,null],[11,"fmt","","",162,null],[11,"default","","",162,{"inputs":[],"output":{"name":"dqblk"}}],[0,"statfs","nix::sys","",null,null],[5,"statfs","nix::sys::statfs","",null,{"inputs":[{"name":"p"},{"name":"statfs"}],"output":{"name":"result"}}],[5,"fstatfs","","",null,{"inputs":[{"name":"t"},{"name":"statfs"}],"output":{"name":"result"}}],[0,"vfs","","",null,null],[3,"Statfs","nix::sys::statfs::vfs","",null,null],[12,"f_type","","",164,null],[12,"f_bsize","","",164,null],[12,"f_blocks","","",164,null],[12,"f_bfree","","",164,null],[12,"f_bavail","","",164,null],[12,"f_files","","",164,null],[12,"f_ffree","","",164,null],[12,"f_fsid","","",164,null],[12,"f_namelen","","",164,null],[12,"f_frsize","","",164,null],[12,"f_spare","","",164,null],[0,"hwdep","","",null,null],[6,"FsType","nix::sys::statfs::vfs::hwdep","",null,null],[6,"BlockSize","","",null,null],[6,"NameLen","","",null,null],[6,"FragmentSize","","",null,null],[6,"SwordType","","",null,null],[17,"ADFS_SUPER_MAGIC","nix::sys::statfs::vfs","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"BEFS_SUPER_MAGIC","","",null,null],[17,"BFS_MAGIC","","",null,null],[17,"CIFS_MAGIC_NUMBER","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"COH_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"DEVFS_SUPER_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT_SUPER_MAGIC","","",null,null],[17,"EXT2_OLD_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HFS_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"JFS_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"NTFS_SB_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"ROMFS_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"SYSV2_SUPER_MAGIC","","",null,null],[17,"SYSV4_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"UDF_SUPER_MAGIC","","",null,null],[17,"UFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VXFS_SUPER_MAGIC","","",null,null],[17,"XENIX_SUPER_MAGIC","","",null,null],[17,"XFS_SUPER_MAGIC","","",null,null],[17,"_XIAFS_SUPER_MAGIC","","",null,null],[11,"clone","","",164,null],[11,"fmt","","",164,null],[0,"statvfs","nix::sys","FFI for statvfs functions",null,null],[5,"statvfs","nix::sys::statvfs","Fill an existing `Statvfs` object with information about the `path`",null,{"inputs":[{"name":"p"},{"name":"statvfs"}],"output":{"name":"result"}}],[5,"fstatvfs","","Fill an existing `Statvfs` object with information about `fd`",null,{"inputs":[{"name":"t"},{"name":"statvfs"}],"output":{"name":"result"}}],[0,"vfs","","Structs related to the `statvfs` and `fstatvfs` functions",null,null],[3,"FsFlags","nix::sys::statvfs::vfs","Mount Flags",null,null],[3,"Statvfs","","The posix statvfs struct",null,null],[12,"f_bsize","","Filesystem block size. This is the value that will lead to\nmost efficient use of the filesystem",165,null],[12,"f_frsize","","Fragment Size -- actual minimum unit of allocation on this\nfilesystem",165,null],[12,"f_blocks","","Total number of blocks on the filesystem",165,null],[12,"f_bfree","","Number of unused blocks on the filesystem, including those\nreserved for root",165,null],[12,"f_bavail","","Number of blocks available to non-root users",165,null],[12,"f_files","","Total number of inodes available on the filesystem",165,null],[12,"f_ffree","","Number of inodes available on the filesystem",165,null],[12,"f_favail","","Number of inodes available to non-root users",165,null],[12,"f_fsid","","File System ID",165,null],[12,"f_flag","","Mount Flags",165,null],[12,"f_namemax","","Maximum filename length",165,null],[17,"RDONLY","","Read Only",null,null],[17,"NOSUID","","Do not allow the set-uid bits to have an effect",null,null],[17,"NODEV","","Do not interpret character or block-special devices",null,null],[17,"NOEXEC","","Do not allow execution of binaries on the filesystem",null,null],[17,"SYNCHRONOUS","","All IO should be done synchronously",null,null],[17,"MANDLOCK","","Allow mandatory locks on the filesystem",null,null],[17,"WRITE","","",null,null],[17,"APPEND","","",null,null],[17,"IMMUTABLE","","",null,null],[17,"NOATIME","","Do not update access times on files",null,null],[17,"NODIRATIME","","Do not update access times on files",null,null],[17,"RELATIME","","Update access time relative to modify/change time",null,null],[11,"hash","","",166,null],[11,"cmp","","",166,null],[11,"partial_cmp","","",166,null],[11,"lt","","",166,null],[11,"le","","",166,null],[11,"gt","","",166,null],[11,"ge","","",166,null],[11,"clone","","",166,null],[11,"eq","","",166,null],[11,"ne","","",166,null],[11,"default","","",166,{"inputs":[],"output":{"name":"fsflags"}}],[11,"fmt","","",166,null],[11,"empty","","Returns an empty set of flags.",166,{"inputs":[],"output":{"name":"fsflags"}}],[11,"all","","Returns the set containing all flags.",166,{"inputs":[],"output":{"name":"fsflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",166,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",166,{"inputs":[{"name":"c_ulong"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",166,{"inputs":[{"name":"c_ulong"}],"output":{"name":"fsflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",166,null],[11,"is_all","","Returns `true` if all flags are currently set.",166,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",166,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",166,null],[11,"insert","","Inserts the specified flags in-place.",166,null],[11,"remove","","Removes the specified flags in-place.",166,null],[11,"toggle","","Toggles the specified flags in-place.",166,null],[11,"bitor","","Returns the union of the two sets of flags.",166,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",166,null],[11,"bitand","","Returns the intersection between the two sets of flags.",166,null],[11,"sub","","Returns the set difference of the two sets of flags.",166,null],[11,"not","","Returns the complement of this set of flags.",166,null],[11,"from_iter","","",166,{"inputs":[{"name":"t"}],"output":{"name":"fsflags"}}],[11,"clone","","",165,null],[11,"fmt","","",165,null],[11,"for_path","","Create a new `Statvfs` object and fill it with information about\nthe mount that contains `path`",165,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"update_with_path","","Replace information in this struct with information about `path`",165,null],[11,"for_fd","","Create a new `Statvfs` object and fill it with information from fd",165,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"update_with_fd","","Replace information in this struct with information about `fd`",165,null],[11,"default","","Create a statvfs object initialized to all zeros",165,{"inputs":[],"output":{"name":"self"}}],[0,"ucontext","nix","",null,null],[3,"UContext","nix::ucontext","",null,null],[11,"clone","","",167,null],[11,"get","","",167,{"inputs":[],"output":{"name":"result"}}],[11,"set","","",167,null],[0,"unistd","nix","Standard symbolic constants and types",null,null],[4,"ForkResult","nix::unistd","",null,null],[13,"Parent","","",168,null],[12,"child","nix::unistd::ForkResult","",168,null],[13,"Child","nix::unistd","",168,null],[5,"pivot_root","","",null,{"inputs":[{"name":"p1"},{"name":"p2"}],"output":{"name":"result"}}],[5,"fork","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"getpid","","",null,{"inputs":[],"output":{"name":"pid_t"}}],[5,"getppid","","",null,{"inputs":[],"output":{"name":"pid_t"}}],[5,"setpgid","","",null,{"inputs":[{"name":"pid_t"},{"name":"pid_t"}],"output":{"name":"result"}}],[5,"gettid","","",null,{"inputs":[],"output":{"name":"pid_t"}}],[5,"dup","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"dup2","","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"}],"output":{"name":"result"}}],[5,"dup3","","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"},{"name":"oflag"}],"output":{"name":"result"}}],[5,"chdir","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"chown","","",null,{"inputs":[{"name":"p"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"daemon","","",null,{"inputs":[{"name":"bool"},{"name":"bool"}],"output":{"name":"result"}}],[5,"sethostname","","",null,null],[5,"gethostname","","",null,null],[5,"close","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"read","","",null,null],[5,"write","","",null,null],[5,"pipe","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"pipe2","","",null,{"inputs":[{"name":"oflag"}],"output":{"name":"result"}}],[5,"ftruncate","","",null,{"inputs":[{"name":"rawfd"},{"name":"off_t"}],"output":{"name":"result"}}],[5,"isatty","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"unlink","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"chroot","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"fsync","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"fdatasync","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"getuid","","",null,{"inputs":[],"output":{"name":"uid_t"}}],[5,"geteuid","","",null,{"inputs":[],"output":{"name":"uid_t"}}],[5,"getgid","","",null,{"inputs":[],"output":{"name":"gid_t"}}],[5,"getegid","","",null,{"inputs":[],"output":{"name":"gid_t"}}],[5,"setuid","","",null,{"inputs":[{"name":"uid_t"}],"output":{"name":"result"}}],[5,"setgid","","",null,{"inputs":[{"name":"gid_t"}],"output":{"name":"result"}}],[5,"pause","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"sleep","","",null,{"inputs":[{"name":"c_uint"}],"output":{"name":"c_uint"}}],[11,"clone","","",168,null],[11,"is_child","","",168,null],[11,"is_parent","","",168,null],[6,"Result","nix","",null,null],[8,"NixPath","","",null,null],[10,"len","","",169,null],[10,"with_nix_path","","",169,null],[11,"eq","","",67,null],[11,"ne","","",67,null],[11,"fmt","","",67,null],[11,"clone","","",67,null],[11,"from_errno","","",67,{"inputs":[{"name":"errno"}],"output":{"name":"error"}}],[11,"last","","",67,{"inputs":[],"output":{"name":"error"}}],[11,"invalid_argument","","",67,{"inputs":[],"output":{"name":"error"}}],[11,"errno","","",67,null],[11,"from","","",67,{"inputs":[{"name":"errno"}],"output":{"name":"error"}}],[11,"description","","",67,null],[11,"fmt","","",67,null],[11,"from","std::io::error","",69,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"len","std::ffi::os_str","",170,null],[11,"with_nix_path","","",170,null],[11,"len","std::ffi::c_str","",171,null],[11,"with_nix_path","","",171,null],[11,"len","std::path","",172,null],[11,"with_nix_path","","",172,null],[11,"len","","",173,null],[11,"with_nix_path","","",173,null],[11,"len","core::option","",174,null],[11,"with_nix_path","","",174,null],[14,"ioc!","nix","Encode an ioctl command.",null,null],[14,"io!","","Encode an ioctl command that has no associated data.",null,null],[14,"ior!","","Encode an ioctl command that reads.",null,null],[14,"iow!","","Encode an ioctl command that writes.",null,null],[14,"iorw!","","Encode an ioctl command that both reads and writes.",null,null],[14,"convert_ioctl_res!","","Convert raw ioctl return value to a Nix result",null,null],[14,"ioctl!","","Declare a wrapper function around an ioctl.",null,null]],"paths":[[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"fd_set"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"fsid_t"],[3,"mq_attr"],[3,"cpu_set_t"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"sem_t"],[3,"sigset_t"],[3,"sysinfo"],[3,"FileStat"],[3,"stat64"],[3,"pthread_attr_t"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[4,"Errno"],[4,"Error"],[8,"ErrnoSentinel"],[3,"Error"],[4,"FcntlArg"],[4,"FlockArg"],[3,"SpliceFFlags"],[3,"OFlag"],[3,"FdFlag"],[3,"SealFlag"],[3,"MsFlags"],[3,"MntFlags"],[3,"MqAttr"],[3,"MQ_OFlag"],[3,"FdFlag"],[3,"PollFd"],[3,"EventFlags"],[3,"CloneFlags"],[3,"CpuSet"],[3,"EpollEvent"],[4,"EpollOp"],[3,"EpollEventKind"],[3,"MemFdCreateFlag"],[4,"SigHandler"],[3,"SaFlags"],[3,"SigFlags"],[3,"SigSet"],[3,"SigAction"],[3,"UnixAddr"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"NetlinkAddr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"RecvMsg"],[3,"linger"],[4,"AddressFamily"],[4,"SockAddr"],[4,"InetAddr"],[4,"IpAddr"],[4,"SockType"],[4,"ControlMessage"],[4,"SockLevel"],[4,"Shutdown"],[3,"MsgFlags"],[3,"ReuseAddr"],[3,"ReusePort"],[3,"TcpNoDelay"],[3,"Linger"],[3,"IpAddMembership"],[3,"IpDropMembership"],[3,"Ipv6AddMembership"],[3,"Ipv6DropMembership"],[3,"IpMulticastTtl"],[3,"IpMulticastLoop"],[3,"ReceiveTimeout"],[3,"SendTimeout"],[3,"Broadcast"],[3,"OobInline"],[3,"SocketError"],[3,"KeepAlive"],[3,"PeerCredentials"],[3,"TcpKeepIdle"],[3,"RcvBuf"],[3,"SndBuf"],[3,"RcvBufForce"],[3,"SndBufForce"],[3,"SockType"],[3,"AcceptConn"],[3,"OriginalDst"],[8,"GetSockOpt"],[8,"SetSockOpt"],[3,"SockFlag"],[3,"CmsgSpace"],[3,"CmsgIterator"],[3,"ucred"],[3,"SFlag"],[3,"Mode"],[3,"Termios"],[4,"SetArg"],[4,"FlushArg"],[4,"FlowArg"],[3,"InputFlags"],[3,"OutputFlags"],[3,"ControlFlags"],[3,"LocalFlags"],[3,"UtsName"],[4,"WaitStatus"],[3,"WaitPidFlag"],[3,"MapFlags"],[3,"MsFlags"],[3,"ProtFlags"],[3,"IoVec"],[3,"TimeVal"],[3,"FdSet"],[3,"QuotaCmd"],[3,"Dqblk"],[3,"QuotaValidFlags"],[3,"Statfs"],[3,"Statvfs"],[3,"FsFlags"],[3,"UContext"],[4,"ForkResult"],[8,"NixPath"],[3,"OsStr"],[3,"CStr"],[3,"Path"],[3,"PathBuf"],[4,"Option"]]};
searchIndex["void"] = {"doc":"# Void","items":[[4,"Void","void","The empty type for cases which can&#39;t occur.",null,null],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",null,{"inputs":[{"name":"void"}],"output":null}],[11,"hash","core::num","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",0,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"eq","core::num::dec2flt","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"fmt","core::num","",2,null],[11,"eq","","",2,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"hash","core::nonzero","",5,null],[11,"fmt","","",5,null],[11,"partial_cmp","","",5,null],[11,"lt","","",5,null],[11,"le","","",5,null],[11,"gt","","",5,null],[11,"ge","","",5,null],[11,"cmp","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",5,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",5,null],[11,"new","core::ptr","Creates a new `Unique`.",6,null],[11,"get","","Dereferences the content.",6,null],[11,"get_mut","","Mutably dereferences the content.",6,null],[11,"deref","","",6,null],[11,"fmt","","",6,null],[11,"new","","Creates a new `Shared`.",7,null],[11,"clone","","",7,null],[11,"deref","","",7,null],[11,"fmt","","",7,null],[11,"hash","core::marker","",8,null],[11,"eq","","",8,null],[11,"partial_cmp","","",8,null],[11,"cmp","","",8,null],[11,"clone","","",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"hash","core::ops","",9,null],[11,"eq","","",9,null],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"hash","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"contains","","# Examples",10,null],[11,"hash","","",11,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"contains","","# Examples",11,null],[11,"hash","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"clone","","",12,null],[11,"fmt","","",12,null],[11,"contains","","# Examples",12,null],[11,"hash","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"contains","","# Examples",13,null],[11,"hash","","",14,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"clone","","",14,null],[11,"fmt","","",14,null],[11,"contains","","# Examples",14,null],[11,"hash","core::cmp","",15,null],[11,"fmt","","",15,null],[11,"eq","","",15,null],[11,"clone","","",15,null],[11,"reverse","","Reverse the `Ordering`.",15,null],[11,"cmp","","",15,null],[11,"partial_cmp","","",15,null],[11,"fmt","void::coreprovider","",16,null],[11,"fmt","","",16,null],[11,"is","","Returns true if the boxed type is the same as `T`",16,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,null],[11,"is","","Forwards to the method defined on the type `Any`.",16,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",16,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",16,null],[11,"hash","core::any","",17,null],[11,"fmt","","",17,null],[11,"eq","","",17,null],[11,"ne","","",17,null],[11,"clone","","",17,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",17,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",18,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",20,null],[11,"clone","","",20,null],[11,"new","","Creates a new `AtomicBool`.",18,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",18,null],[11,"store","","Stores a value into the bool.",18,null],[11,"swap","","Stores a value into the bool, returning the old value.",18,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",18,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",18,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",18,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",18,null],[11,"new","","Creates a new `AtomicPtr`.",19,null],[11,"load","","Loads a value from the pointer.",19,null],[11,"store","","Stores a value into the pointer.",19,null],[11,"swap","","Stores a value into the pointer, returning the old value.",19,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"default","","",21,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",21,null],[11,"new","","Creates a new atomic integer.",21,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",21,null],[11,"store","","Stores a value into the atomic integer.",21,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",21,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"fetch_add","","Add to the current value, returning the previous value.",21,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",21,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",21,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",21,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",21,null],[11,"default","","",22,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",22,null],[11,"new","","Creates a new atomic integer.",22,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",22,null],[11,"store","","Stores a value into the atomic integer.",22,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",22,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"fetch_add","","Add to the current value, returning the previous value.",22,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",22,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",22,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",22,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",22,null],[11,"default","","",23,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",23,null],[11,"new","","Creates a new atomic integer.",23,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",23,null],[11,"store","","Stores a value into the atomic integer.",23,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",23,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"fetch_add","","Add to the current value, returning the previous value.",23,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",23,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",23,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",23,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",23,null],[11,"default","","",24,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",24,null],[11,"new","","Creates a new atomic integer.",24,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",24,null],[11,"store","","Stores a value into the atomic integer.",24,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",24,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"fetch_add","","Add to the current value, returning the previous value.",24,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",24,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",24,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",24,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",24,null],[11,"default","","",25,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",25,null],[11,"new","","Creates a new atomic integer.",25,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",25,null],[11,"store","","Stores a value into the atomic integer.",25,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",25,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"fetch_add","","Add to the current value, returning the previous value.",25,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",25,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",25,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",25,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",25,null],[11,"default","","",26,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",26,null],[11,"new","","Creates a new atomic integer.",26,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",26,null],[11,"store","","Stores a value into the atomic integer.",26,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",26,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"fetch_add","","Add to the current value, returning the previous value.",26,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",26,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",26,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",26,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",26,null],[11,"default","","",27,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",27,null],[11,"new","","Creates a new atomic integer.",27,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",27,null],[11,"store","","Stores a value into the atomic integer.",27,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",27,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"fetch_add","","Add to the current value, returning the previous value.",27,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",27,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",27,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",27,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",27,null],[11,"default","","",28,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",28,null],[11,"new","","Creates a new atomic integer.",28,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",28,null],[11,"store","","Stores a value into the atomic integer.",28,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",28,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"fetch_add","","Add to the current value, returning the previous value.",28,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",28,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",28,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",28,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",28,null],[11,"default","","",29,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",29,null],[11,"new","","Creates a new atomic integer.",29,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",29,null],[11,"store","","Stores a value into the atomic integer.",29,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",29,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"fetch_add","","Add to the current value, returning the previous value.",29,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",29,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",29,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",29,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",29,null],[11,"default","","",30,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",30,null],[11,"new","","Creates a new atomic integer.",30,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",30,null],[11,"store","","Stores a value into the atomic integer.",30,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",30,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"fetch_add","","Add to the current value, returning the previous value.",30,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",30,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",30,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",30,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",30,null],[11,"fmt","","",18,null],[11,"fmt","","",19,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",31,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",31,null],[11,"set","","Sets the contained value.",31,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",31,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",31,null],[11,"clone","","",31,null],[11,"default","","",31,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",31,null],[11,"partial_cmp","","",31,null],[11,"lt","","",31,null],[11,"le","","",31,null],[11,"gt","","",31,null],[11,"ge","","",31,null],[11,"cmp","","",31,null],[11,"fmt","","",32,null],[11,"eq","","",32,null],[11,"clone","","",32,null],[11,"new","","Creates a new `RefCell` containing `value`.",33,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",33,null],[11,"borrow_state","","Query the current state of this `RefCell`",33,null],[11,"borrow","","Immutably borrows the wrapped value.",33,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",33,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",33,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",33,null],[11,"clone","","",33,null],[11,"default","","",33,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",33,null],[11,"partial_cmp","","",33,null],[11,"lt","","",33,null],[11,"le","","",33,null],[11,"gt","","",33,null],[11,"ge","","",33,null],[11,"cmp","","",33,null],[11,"deref","","",34,null],[11,"clone","","Copies a `Ref`.",34,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",34,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",35,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"deref","","",35,null],[11,"deref_mut","","",35,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",36,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",36,null],[11,"get","","Gets a mutable pointer to the wrapped value.",36,null],[11,"default","","",36,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",37,null],[11,"clone","","",37,null],[11,"next","","",37,null],[11,"size_hint","","",37,null],[11,"count","","",37,null],[11,"last","","",37,null],[11,"len","","",37,null],[11,"fmt","","",38,null],[11,"clone","","",38,null],[11,"next","","",38,null],[11,"size_hint","","",38,null],[11,"count","","",38,null],[11,"nth","","",38,null],[11,"last","","",38,null],[11,"len","","",38,null],[11,"fmt","","",39,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",39,null],[11,"next","","",39,null],[11,"size_hint","","",39,null],[11,"fmt","","",40,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",40,null],[11,"next","","",40,null],[11,"size_hint","","",40,null],[11,"fmt","core::iter::range","",41,null],[11,"clone","","",41,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",11,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",10,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",13,null],[11,"next","core::iter::range","",41,null],[11,"size_hint","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next","core::ops","",10,null],[11,"size_hint","","",10,null],[11,"next_back","","",10,null],[11,"next","","",11,null],[11,"next","","",13,null],[11,"size_hint","","",13,null],[11,"next_back","","",13,null],[11,"fmt","core::iter::sources","",42,null],[11,"clone","","",42,null],[11,"next","","",42,null],[11,"size_hint","","",42,null],[11,"next_back","","",42,null],[11,"fmt","","",43,null],[11,"next","","",43,null],[11,"size_hint","","",43,null],[11,"next_back","","",43,null],[11,"len","","",43,null],[11,"clone","","",43,null],[11,"default","","",43,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",44,null],[11,"clone","","",44,null],[11,"next","","",44,null],[11,"size_hint","","",44,null],[11,"next_back","","",44,null],[11,"len","","",44,null],[11,"fmt","core::iter","",45,null],[11,"clone","","",45,null],[11,"next","","",45,null],[11,"size_hint","","",45,null],[11,"next_back","","",45,null],[11,"fmt","","",46,null],[11,"clone","","",46,null],[11,"next","","",46,null],[11,"size_hint","","",46,null],[11,"next_back","","",46,null],[11,"fmt","","",47,null],[11,"clone","","",47,null],[11,"next","","",47,null],[11,"size_hint","","",47,null],[11,"fmt","","",48,null],[11,"clone","","",48,null],[11,"next","","",48,null],[11,"count","","",48,null],[11,"nth","","",48,null],[11,"find","","",48,null],[11,"last","","",48,null],[11,"size_hint","","",48,null],[11,"next_back","","",48,null],[11,"fmt","","",49,null],[11,"clone","","",49,null],[11,"next","","",49,null],[11,"size_hint","","",49,null],[11,"next_back","","",49,null],[11,"clone","","",50,null],[11,"fmt","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next_back","","",50,null],[11,"clone","","",51,null],[11,"fmt","","",51,null],[11,"next","","",51,null],[11,"size_hint","","",51,null],[11,"next_back","","",51,null],[11,"clone","","",52,null],[11,"fmt","","",52,null],[11,"next","","",52,null],[11,"size_hint","","",52,null],[11,"next_back","","",52,null],[11,"fmt","","",53,null],[11,"clone","","",53,null],[11,"next","","# Overflow Behavior",53,null],[11,"size_hint","","",53,null],[11,"nth","","",53,null],[11,"count","","",53,null],[11,"next_back","","",53,null],[11,"fmt","","",54,null],[11,"clone","","",54,null],[11,"next","","",54,null],[11,"count","","",54,null],[11,"nth","","",54,null],[11,"last","","",54,null],[11,"size_hint","","",54,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",54,null],[11,"is_empty","","Checks if the iterator has finished iterating.",54,null],[11,"clone","","",55,null],[11,"fmt","","",55,null],[11,"next","","",55,null],[11,"size_hint","","",55,null],[11,"clone","","",56,null],[11,"fmt","","",56,null],[11,"next","","",56,null],[11,"size_hint","","",56,null],[11,"fmt","","",57,null],[11,"clone","","",57,null],[11,"next","","",57,null],[11,"nth","","",57,null],[11,"count","","",57,null],[11,"last","","",57,null],[11,"size_hint","","",57,null],[11,"next_back","","",57,null],[11,"fmt","","",58,null],[11,"clone","","",58,null],[11,"next","","",58,null],[11,"nth","","",58,null],[11,"size_hint","","",58,null],[11,"clone","","",59,null],[11,"fmt","","",59,null],[11,"next","","",59,null],[11,"size_hint","","",59,null],[11,"clone","","",60,null],[11,"fmt","","",60,null],[11,"next","","",60,null],[11,"size_hint","","",60,null],[11,"next_back","","",60,null],[11,"fmt","","",61,null],[11,"clone","","",61,null],[11,"next","","",61,null],[11,"nth","","",61,null],[11,"last","","",61,null],[11,"count","","",61,null],[11,"size_hint","","",61,null],[11,"next_back","","",61,null],[11,"clone","","",62,null],[11,"fmt","","",62,null],[11,"next","","",62,null],[11,"size_hint","","",62,null],[11,"next_back","","",62,null],[11,"hash","core::option","",63,null],[11,"fmt","","",63,null],[11,"cmp","","",63,null],[11,"partial_cmp","","",63,null],[11,"lt","","",63,null],[11,"le","","",63,null],[11,"gt","","",63,null],[11,"ge","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"clone","","",63,null],[11,"is_some","","Returns `true` if the option is a `Some` value",63,null],[11,"is_none","","Returns `true` if the option is a `None` value",63,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",63,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",63,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",63,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",63,null],[11,"unwrap_or","","Returns the contained value or a default.",63,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",63,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",63,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",63,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",63,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",63,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",63,null],[11,"iter","","Returns an iterator over the possibly contained value.",63,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",63,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",63,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",63,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",63,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",63,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",63,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",63,null],[11,"unwrap_or_default","","Returns the contained value or a default",63,null],[11,"default","","",63,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",63,null],[11,"fmt","","",64,null],[11,"next","","",64,null],[11,"size_hint","","",64,null],[11,"next_back","","",64,null],[11,"clone","","",64,null],[11,"fmt","","",65,null],[11,"next","","",65,null],[11,"size_hint","","",65,null],[11,"next_back","","",65,null],[11,"fmt","","",66,null],[11,"clone","","",66,null],[11,"next","","",66,null],[11,"size_hint","","",66,null],[11,"next_back","","",66,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",63,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",67,null],[11,"hash","core::result","",68,null],[11,"fmt","","",68,null],[11,"cmp","","",68,null],[11,"partial_cmp","","",68,null],[11,"lt","","",68,null],[11,"le","","",68,null],[11,"gt","","",68,null],[11,"ge","","",68,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"clone","","",68,null],[11,"is_ok","","Returns true if the result is `Ok`",68,null],[11,"is_err","","Returns true if the result is `Err`",68,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",68,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",68,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",68,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",68,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",68,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",68,null],[11,"iter","","Returns an iterator over the possibly contained value.",68,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",68,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",68,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",68,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",68,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",68,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",68,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",68,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",68,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",68,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",68,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",68,null],[11,"fmt","","",69,null],[11,"next","","",69,null],[11,"size_hint","","",69,null],[11,"next_back","","",69,null],[11,"clone","","",69,null],[11,"fmt","","",70,null],[11,"next","","",70,null],[11,"size_hint","","",70,null],[11,"next_back","","",70,null],[11,"fmt","","",71,null],[11,"next","","",71,null],[11,"size_hint","","",71,null],[11,"next_back","","",71,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",68,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",72,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",72,null],[11,"next","","",72,null],[11,"size_hint","","",72,null],[11,"count","","",72,null],[11,"nth","","",72,null],[11,"last","","",72,null],[11,"next_back","","",72,null],[11,"clone","","",72,null],[11,"fmt","","",73,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",73,null],[11,"next","","",73,null],[11,"size_hint","","",73,null],[11,"count","","",73,null],[11,"nth","","",73,null],[11,"last","","",73,null],[11,"next_back","","",73,null],[11,"fmt","","",74,null],[11,"clone","","",74,null],[11,"next","","",74,null],[11,"size_hint","","",74,null],[11,"next_back","","",74,null],[11,"fmt","","",75,null],[11,"next","","",75,null],[11,"size_hint","","",75,null],[11,"next_back","","",75,null],[11,"fmt","","",76,null],[11,"fmt","","",77,null],[11,"fmt","","",78,null],[11,"fmt","","",79,null],[11,"next","","",76,null],[11,"size_hint","","",76,null],[11,"next","","",77,null],[11,"size_hint","","",77,null],[11,"next","","",78,null],[11,"size_hint","","",78,null],[11,"next","","",79,null],[11,"size_hint","","",79,null],[11,"fmt","","",80,null],[11,"clone","","",80,null],[11,"next","","",80,null],[11,"size_hint","","",80,null],[11,"count","","",80,null],[11,"nth","","",80,null],[11,"last","","",80,null],[11,"next_back","","",80,null],[11,"fmt","","",81,null],[11,"clone","","",81,null],[11,"next","","",81,null],[11,"size_hint","","",81,null],[11,"count","","",81,null],[11,"nth","","",81,null],[11,"last","","",81,null],[11,"next_back","","",81,null],[11,"fmt","","",82,null],[11,"next","","",82,null],[11,"size_hint","","",82,null],[11,"count","","",82,null],[11,"nth","","",82,null],[11,"last","","",82,null],[11,"next_back","","",82,null],[11,"fmt","core::str::pattern","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"clone","","",83,null],[11,"fmt","","",84,null],[11,"clone","","",84,null],[11,"haystack","","",84,null],[11,"next","","",84,null],[11,"next_match","","",84,null],[11,"next_reject","","",84,null],[11,"next_back","","",84,null],[11,"next_match_back","","",84,null],[11,"next_reject_back","","",84,null],[11,"fmt","","",85,null],[11,"clone","","",85,null],[11,"haystack","","",85,null],[11,"next","","",85,null],[11,"next_match","","",85,null],[11,"next_reject","","",85,null],[11,"next_back","","",85,null],[11,"next_match_back","","",85,null],[11,"next_reject_back","","",85,null],[11,"clone","","",86,null],[11,"fmt","","",86,null],[11,"haystack","","",86,null],[11,"next","","",86,null],[11,"next_match","","",86,null],[11,"next_reject","","",86,null],[11,"next_back","","",86,null],[11,"next_match_back","","",86,null],[11,"next_reject_back","","",86,null],[11,"fmt","","",87,null],[11,"clone","","",87,null],[11,"haystack","","",87,null],[11,"next","","",87,null],[11,"next_match","","",87,null],[11,"next_back","","",87,null],[11,"next_match_back","","",87,null],[11,"eq","core::str","",88,null],[11,"ne","","",88,null],[11,"clone","","",88,null],[11,"fmt","","",88,null],[11,"fmt","","",88,null],[11,"fmt","","",89,null],[11,"clone","","",89,null],[11,"eq","","",89,null],[11,"ne","","",89,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",89,null],[11,"fmt","","",89,null],[11,"fmt","","",90,null],[11,"clone","","",90,null],[11,"next","","",90,null],[11,"size_hint","","",90,null],[11,"next_back","","",90,null],[11,"as_str","","View the underlying data as a subslice of the original data.",90,null],[11,"fmt","","",91,null],[11,"clone","","",91,null],[11,"next","","",91,null],[11,"size_hint","","",91,null],[11,"next_back","","",91,null],[11,"as_str","","View the underlying data as a subslice of the original data.",91,null],[11,"fmt","","",92,null],[11,"clone","","",92,null],[11,"next","","",92,null],[11,"size_hint","","",92,null],[11,"count","","",92,null],[11,"last","","",92,null],[11,"nth","","",92,null],[11,"next_back","","",92,null],[11,"len","","",92,null],[11,"fmt","","",93,null],[11,"next","","",93,null],[11,"clone","","",93,null],[11,"fmt","","",94,null],[11,"next","","",94,null],[11,"clone","","",94,null],[11,"next_back","","",93,null],[11,"next_back","","",94,null],[11,"fmt","","",95,null],[11,"next","","",95,null],[11,"clone","","",95,null],[11,"fmt","","",96,null],[11,"next","","",96,null],[11,"clone","","",96,null],[11,"next_back","","",95,null],[11,"next_back","","",96,null],[11,"fmt","","",97,null],[11,"next","","",97,null],[11,"clone","","",97,null],[11,"fmt","","",98,null],[11,"next","","",98,null],[11,"clone","","",98,null],[11,"fmt","","",99,null],[11,"next","","",99,null],[11,"clone","","",99,null],[11,"fmt","","",100,null],[11,"next","","",100,null],[11,"clone","","",100,null],[11,"next_back","","",99,null],[11,"next_back","","",100,null],[11,"fmt","","",101,null],[11,"next","","",101,null],[11,"clone","","",101,null],[11,"fmt","","",102,null],[11,"next","","",102,null],[11,"clone","","",102,null],[11,"next_back","","",101,null],[11,"next_back","","",102,null],[11,"fmt","","",103,null],[11,"clone","","",103,null],[11,"next","","",103,null],[11,"size_hint","","",103,null],[11,"next_back","","",103,null],[11,"fmt","","",104,null],[11,"clone","","",104,null],[11,"next","","",104,null],[11,"size_hint","","",104,null],[11,"next_back","","",104,null],[11,"default","core::hash::sip","",105,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"clone","","",105,null],[11,"fmt","","",105,null],[11,"default","","",106,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"clone","","",106,null],[11,"fmt","","",106,null],[11,"default","","",107,{"inputs":[],"output":{"name":"siphasher"}}],[11,"clone","","",107,null],[11,"fmt","","",107,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",107,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",107,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",105,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",105,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",106,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",106,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"write","","",107,null],[11,"finish","","",107,null],[11,"write","","",105,null],[11,"finish","","",105,null],[11,"write","","",106,null],[11,"finish","","",106,null],[11,"fmt","core::hash","",108,null],[11,"build_hasher","","",108,null],[11,"clone","","",108,null],[11,"default","","",108,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",109,null],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",110,null],[11,"finish","","Finishes output and returns any error encountered.",110,null],[11,"field","","Adds a new field to the generated tuple struct output.",111,null],[11,"finish","","Finishes output and returns any error encountered.",111,null],[11,"entry","","Adds a new entry to the set output.",112,null],[11,"entries","","Adds the contents of an iterator of entries to the set output.",112,null],[11,"finish","","Finishes output and returns any error encountered.",112,null],[11,"entry","","Adds a new entry to the list output.",113,null],[11,"entries","","Adds the contents of an iterator of entries to the list output.",113,null],[11,"finish","","Finishes output and returns any error encountered.",113,null],[11,"entry","","Adds a new entry to the map output.",114,null],[11,"entries","","Adds the contents of an iterator of entries to the map output.",114,null],[11,"finish","","Finishes output and returns any error encountered.",114,null],[11,"partial_cmp","core::fmt","",115,null],[11,"eq","","",115,null],[11,"cmp","","",115,null],[11,"hash","","",115,null],[11,"default","","",115,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",115,null],[11,"clone","","",115,null],[11,"clone","","",116,null],[11,"fmt","","",116,null],[11,"fmt","","",116,null],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",117,null],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",117,null],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",117,null],[11,"write_fmt","","Writes some formatted information into this instance",117,null],[11,"flags","","Flags for formatting (packed version of rt::Flag)",117,null],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",117,null],[11,"align","","Flag indicating what form of alignment was requested",117,null],[11,"width","","Optionally specified integer width that the output should be",117,null],[11,"precision","","Optionally specified precision for numeric types",117,null],[11,"sign_plus","","Determines if the `+` flag was specified.",117,null],[11,"sign_minus","","Determines if the `-` flag was specified.",117,null],[11,"alternate","","Determines if the `#` flag was specified.",117,null],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",117,null],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",117,null],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",117,null],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",117,null],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",117,null],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",117,null],[11,"write_str","","",117,null],[11,"write_char","","",117,null],[11,"write_fmt","","",117,null],[11,"fmt","","",115,null],[11,"fmt","core::marker","",8,null],[11,"fmt","core::cell","",31,null],[11,"fmt","","",33,null],[11,"fmt","","",34,null],[11,"fmt","","",35,null],[11,"fmt","","",36,null],[11,"write_char","void::coreprovider::fmt","Writes a `char` into this writer, returning whether the write succeeded.",118,null],[11,"write_fmt","","Glue for usage of the `write!` macro with implementors of this trait.",118,null],[11,"ne","void::coreprovider::cmp","This method tests for `!=`.",119,null],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `&lt;` operator.",120,null],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `&lt;=`\noperator.",120,null],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `&gt;` operator.",120,null],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `&gt;=`\noperator.",120,null],[11,"is","void::coreprovider","Returns true if the boxed type is the same as `T`",121,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",121,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",121,null],[11,"is","","Forwards to the method defined on the type `Any`.",121,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",121,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",121,null],[11,"is","","Forwards to the method defined on the type `Any`.",121,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",121,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",121,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",121,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",121,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",121,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"from","alloc::boxed","",122,{"inputs":[{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",122,{"inputs":[{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",122,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",122,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",122,{"inputs":[{"name":"str"}],"output":{"name":"box"}}],[11,"from","","",122,{"inputs":[{"name":"str"}],"output":{"name":"box"}}],[11,"description","core::str","",88,null],[11,"description","","",89,null],[11,"description","core::num","",4,null],[11,"description","","",3,null],[11,"description","core::num::dec2flt","",1,null],[11,"description","collections::string","",123,null],[11,"description","","",124,null],[11,"description","","",125,null],[11,"description","rustc_unicode::char","",126,null],[11,"description","alloc::boxed","",122,null],[11,"cause","","",122,null],[11,"description","core::fmt","",115,null],[11,"next","std::ascii","",127,null],[11,"size_hint","","",127,null],[11,"next_back","","",127,null],[11,"clone","std::thread::local","",128,null],[11,"eq","","",128,null],[11,"with","","Acquires a reference to the value in this TLS key.",129,null],[11,"state","","Query the current state of this key.",129,null],[11,"new","std::thread::local::elf","",130,{"inputs":[],"output":{"name":"key"}}],[11,"get","","",130,null],[11,"new","std::thread::local::os","",131,{"inputs":[],"output":{"name":"key"}}],[11,"get","","",131,null],[11,"new","std::thread","Generates the base configuration for spawning a thread, from which\nconfiguration methods can be chained.",132,{"inputs":[],"output":{"name":"builder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification\nonly in panic messages.",132,null],[11,"stack_size","","Sets the size of the stack for the new thread.",132,null],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",132,null],[11,"clone","","",133,null],[11,"unpark","","Atomically makes the handle&#39;s token available if it is not already.",133,null],[11,"name","","Gets the thread&#39;s name.",133,null],[11,"fmt","","",133,null],[11,"thread","","Extracts a handle to the underlying thread",134,null],[11,"join","","Waits for the associated thread to finish.",134,null],[11,"clone","std::collections::hash::map","",135,null],[11,"new","","Creates an empty HashMap.",135,{"inputs":[],"output":{"name":"hashmap"}}],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",135,{"inputs":[{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"with_hasher","","Creates an empty hashmap which will use the given hash builder to hash\nkeys.",135,{"inputs":[{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hasher","","Creates an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",135,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"hasher","","Returns a reference to the map&#39;s hasher.",135,null],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",135,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.",135,null],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",135,null],[11,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&amp;&#39;a K`.",135,null],[11,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&amp;&#39;a V`.",135,null],[11,"values_mut","","An iterator visiting all values mutably in arbitrary order.\nIterator element type is `&amp;&#39;a mut V`.",135,null],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&amp;&#39;a K, &amp;&#39;a V)`.",135,null],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&amp;&#39;a K, &amp;&#39;a mut V)`.",135,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",135,null],[11,"len","","Returns the number of elements in the map.",135,null],[11,"is_empty","","Returns true if the map contains no elements.",135,null],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.",135,null],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",135,null],[11,"get","","Returns a reference to the value corresponding to the key.",135,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",135,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",135,null],[11,"insert","","Inserts a key-value pair into the map.",135,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",135,null],[11,"eq","","",135,null],[11,"fmt","","",135,null],[11,"default","","",135,{"inputs":[],"output":{"name":"hashmap"}}],[11,"index","","",135,null],[11,"clone","","",136,null],[11,"clone","","",137,null],[11,"clone","","",138,null],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",135,null],[11,"next","","",136,null],[11,"size_hint","","",136,null],[11,"len","","",136,null],[11,"next","","",139,null],[11,"size_hint","","",139,null],[11,"len","","",139,null],[11,"next","","",140,null],[11,"size_hint","","",140,null],[11,"len","","",140,null],[11,"next","","",137,null],[11,"size_hint","","",137,null],[11,"len","","",137,null],[11,"next","","",138,null],[11,"size_hint","","",138,null],[11,"len","","",138,null],[11,"next","","",141,null],[11,"size_hint","","",141,null],[11,"len","","",141,null],[11,"next","","",142,null],[11,"size_hint","","",142,null],[11,"len","","",142,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",143,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",143,null],[11,"key","","Returns a reference to this entry&#39;s key.",143,null],[11,"key","","Gets a reference to the key in the entry.",144,null],[11,"remove_pair","","Take the ownership of the key and value from the map.",144,null],[11,"get","","Gets a reference to the value in the entry.",144,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",144,null],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",144,null],[11,"insert","","Sets the value of the entry, and returns the entry&#39;s old value",144,null],[11,"remove","","Takes the value out of the entry, and returns it",144,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",145,null],[11,"into_key","","Take ownership of the key.",145,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it",145,null],[11,"from_iter","","",135,{"inputs":[{"name":"t"}],"output":{"name":"hashmap"}}],[11,"extend","","",135,null],[11,"extend","","",135,null],[11,"clone","","",146,null],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",146,{"inputs":[],"output":{"name":"randomstate"}}],[11,"build_hasher","","",146,null],[11,"write","","",147,null],[11,"finish","","",147,null],[11,"default","","",146,{"inputs":[],"output":{"name":"randomstate"}}],[11,"clone","std::collections::hash::set","",148,null],[11,"new","","Creates an empty HashSet.",148,{"inputs":[],"output":{"name":"hashset"}}],[11,"with_capacity","","Creates an empty HashSet with space for at least `n` elements in\nthe hash table.",148,{"inputs":[{"name":"usize"}],"output":{"name":"hashset"}}],[11,"with_hasher","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",148,{"inputs":[{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hasher","","Creates an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",148,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"hasher","","Returns a reference to the set&#39;s hasher.",148,null],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",148,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.",148,null],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",148,null],[11,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &amp;&#39;a T.",148,null],[11,"difference","","Visit the values representing the difference.",148,null],[11,"symmetric_difference","","Visit the values representing the symmetric difference.",148,null],[11,"intersection","","Visit the values representing the intersection.",148,null],[11,"union","","Visit the values representing the union.",148,null],[11,"len","","Returns the number of elements in the set.",148,null],[11,"is_empty","","Returns true if the set contains no elements.",148,null],[11,"drain","","Clears the set, returning all elements in an iterator.",148,null],[11,"clear","","Clears the set, removing all values.",148,null],[11,"contains","","Returns `true` if the set contains a value.",148,null],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",148,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",148,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",148,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",148,null],[11,"insert","","Adds a value to the set.",148,null],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",148,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",148,null],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",148,null],[11,"eq","","",148,null],[11,"fmt","","",148,null],[11,"from_iter","","",148,{"inputs":[{"name":"i"}],"output":{"name":"hashset"}}],[11,"extend","","",148,null],[11,"extend","","",148,null],[11,"default","","",148,{"inputs":[],"output":{"name":"hashset"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",148,null],[11,"clone","","",149,null],[11,"next","","",149,null],[11,"size_hint","","",149,null],[11,"len","","",149,null],[11,"next","","",150,null],[11,"size_hint","","",150,null],[11,"len","","",150,null],[11,"next","","",151,null],[11,"size_hint","","",151,null],[11,"len","","",151,null],[11,"clone","","",152,null],[11,"next","","",152,null],[11,"size_hint","","",152,null],[11,"clone","","",153,null],[11,"next","","",153,null],[11,"size_hint","","",153,null],[11,"clone","","",154,null],[11,"next","","",154,null],[11,"size_hint","","",154,null],[11,"clone","","",155,null],[11,"next","","",155,null],[11,"size_hint","","",155,null],[11,"drop","collections::binary_heap","",156,null],[11,"deref","","",156,null],[11,"deref_mut","","",156,null],[11,"clone","","",157,null],[11,"clone_from","","",157,null],[11,"default","","",157,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",157,null],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",157,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",157,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",157,null],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",157,null],[11,"peek_mut","","Returns a mutable reference to the greatest item in the binary heap, or\n`None` if it is empty.",157,null],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",157,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",157,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",157,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",157,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",157,null],[11,"push","","Pushes an item onto the binary heap.",157,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",157,null],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",157,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",157,null],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",157,null],[11,"len","","Returns the length of the binary heap.",157,null],[11,"is_empty","","Checks if the binary heap is empty.",157,null],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",157,null],[11,"clear","","Drops all items from the binary heap.",157,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",157,null],[11,"clone","","",158,null],[11,"next","","",158,null],[11,"size_hint","","",158,null],[11,"next_back","","",158,null],[11,"clone","","",159,null],[11,"next","","",159,null],[11,"size_hint","","",159,null],[11,"next_back","","",159,null],[11,"next","","",160,null],[11,"size_hint","","",160,null],[11,"next_back","","",160,null],[11,"from","","",157,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",161,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",157,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",157,null],[11,"extend","","",157,null],[11,"extend","","",157,null],[11,"clone","collections::vec_deque","",162,null],[11,"drop","","",162,null],[11,"default","","",162,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",162,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",162,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",162,null],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",162,null],[11,"swap","","Swaps elements at indices `i` and `j`.",162,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",162,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",162,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",162,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",162,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",162,null],[11,"iter","","Returns a front-to-back iterator.",162,null],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",162,null],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",162,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",162,null],[11,"len","","Returns the number of elements in the `VecDeque`.",162,null],[11,"is_empty","","Returns true if the buffer contains no elements",162,null],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",162,null],[11,"clear","","Clears the buffer, removing all values.",162,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the\ngiven value.",162,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",162,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",162,null],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",162,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",162,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",162,null],[11,"push_front","","Inserts an element first in the sequence.",162,null],[11,"push_back","","Appends an element to the back of a buffer",162,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",162,null],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",162,null],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",162,null],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",162,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",162,null],[11,"split_off","","Splits the collection into two at the given index.",162,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",162,null],[11,"retain","","Retains only the elements specified by the predicate.",162,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",162,null],[11,"clone","","",163,null],[11,"next","","",163,null],[11,"size_hint","","",163,null],[11,"next_back","","",163,null],[11,"next","","",164,null],[11,"size_hint","","",164,null],[11,"next_back","","",164,null],[11,"clone","","",165,null],[11,"next","","",165,null],[11,"size_hint","","",165,null],[11,"next_back","","",165,null],[11,"drop","","",166,null],[11,"next","","",166,null],[11,"size_hint","","",166,null],[11,"next_back","","",166,null],[11,"eq","","",162,null],[11,"partial_cmp","","",162,null],[11,"cmp","","",162,null],[11,"hash","","",162,null],[11,"index","","",162,null],[11,"index_mut","","",162,null],[11,"from_iter","","",162,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",162,null],[11,"extend","","",162,null],[11,"extend","","",162,null],[11,"fmt","","",162,null],[11,"from","","",162,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","collections::vec","",161,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"clone","collections::linked_list","",167,null],[11,"clone","","",168,null],[11,"default","","",169,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",169,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",169,null],[11,"iter","","Provides a forward iterator.",169,null],[11,"iter_mut","","Provides a forward iterator with mutable references.",169,null],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",169,null],[11,"len","","Returns the length of the `LinkedList`.",169,null],[11,"clear","","Removes all elements from the `LinkedList`.",169,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the\ngiven value.",169,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",169,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",169,null],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",169,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",169,null],[11,"push_front","","Adds an element first in the list.",169,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",169,null],[11,"push_back","","Appends an element to the back of a list",169,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",169,null],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",169,null],[11,"front_place","","Returns a place for insertion at the front of the list.",169,null],[11,"back_place","","Returns a place for insertion at the back of the list.",169,null],[11,"drop","","",169,null],[11,"next","","",167,null],[11,"size_hint","","",167,null],[11,"next_back","","",167,null],[11,"next","","",170,null],[11,"size_hint","","",170,null],[11,"next_back","","",170,null],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",170,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",170,null],[11,"next","","",168,null],[11,"size_hint","","",168,null],[11,"next_back","","",168,null],[11,"from_iter","","",169,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",169,null],[11,"extend","","",169,null],[11,"extend","","",169,null],[11,"eq","","",169,null],[11,"ne","","",169,null],[11,"partial_cmp","","",169,null],[11,"cmp","","",169,null],[11,"clone","","",169,null],[11,"fmt","","",169,null],[11,"hash","","",169,null],[11,"make_place","","",171,null],[11,"pointer","","",171,null],[11,"finalize","","",171,null],[11,"make_place","","",172,null],[11,"pointer","","",172,null],[11,"finalize","","",172,null],[11,"next","std::env","",173,null],[11,"size_hint","","",173,null],[11,"next","","",174,null],[11,"size_hint","","",174,null],[11,"clone","","",175,null],[11,"eq","","",175,null],[11,"ne","","",175,null],[11,"fmt","","",175,null],[11,"fmt","","",175,null],[11,"description","","",175,null],[11,"next","","",176,null],[11,"size_hint","","",176,null],[11,"fmt","","",177,null],[11,"fmt","","",177,null],[11,"description","","",177,null],[11,"next","","",178,null],[11,"size_hint","","",178,null],[11,"len","","",178,null],[11,"next","","",179,null],[11,"size_hint","","",179,null],[11,"len","","",179,null],[11,"clone","std::ffi::c_str","",180,null],[11,"hash","","",180,null],[11,"cmp","","",180,null],[11,"partial_cmp","","",180,null],[11,"lt","","",180,null],[11,"le","","",180,null],[11,"gt","","",180,null],[11,"ge","","",180,null],[11,"eq","","",180,null],[11,"ne","","",180,null],[11,"hash","","",181,null],[11,"fmt","","",182,null],[11,"eq","","",182,null],[11,"ne","","",182,null],[11,"clone","","",182,null],[11,"fmt","","",183,null],[11,"eq","","",183,null],[11,"ne","","",183,null],[11,"clone","","",183,null],[11,"fmt","","",184,null],[11,"eq","","",184,null],[11,"ne","","",184,null],[11,"clone","","",184,null],[11,"new","","Creates a new C-compatible string from a container of bytes.",180,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"from_vec_unchecked","","Creates a C-compatible string from a byte vector without checking for\ninterior 0 bytes.",180,{"inputs":[{"name":"vec"}],"output":{"name":"cstring"}}],[11,"from_raw","","Retakes ownership of a `CString` that was transferred to C.",180,null],[11,"into_raw","","Transfers ownership of the string to a C caller.",180,null],[11,"into_string","","Converts the `CString` into a `String` if it contains valid Unicode data.",180,null],[11,"into_bytes","","Returns the underlying byte buffer.",180,null],[11,"into_bytes_with_nul","","Equivalent to the `into_bytes` function except that the returned vector\nincludes the trailing nul byte.",180,null],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",180,null],[11,"as_bytes_with_nul","","Equivalent to the `as_bytes` function except that the returned slice\nincludes the trailing nul byte.",180,null],[11,"from_ptr","","Casts a raw C string to a safe C string wrapper.",181,null],[11,"from_bytes_with_nul","","Creates a C string wrapper from a byte slice.",181,null],[11,"from_bytes_with_nul_unchecked","","Unsafely creates a C string wrapper from a byte slice.",181,null],[11,"as_ptr","","Returns the inner pointer to this C string.",181,null],[11,"to_bytes","","Converts this C string to a byte slice.",181,null],[11,"to_bytes_with_nul","","Converts this C string to a byte slice containing the trailing 0 byte.",181,null],[11,"to_str","","Yields a `&amp;str` slice if the `CStr` contains valid UTF-8.",181,null],[11,"to_string_lossy","","Converts a `CStr` into a `Cow&lt;str&gt;`.",181,null],[11,"deref","","",180,null],[11,"fmt","","",180,null],[11,"from","collections::vec","",161,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"fmt","std::ffi::c_str","",181,null],[11,"default","","",180,{"inputs":[],"output":{"name":"cstring"}}],[11,"borrow","","",180,null],[11,"nul_position","","Returns the position of the nul byte in the slice that was provided to\n`CString::new`.",182,null],[11,"into_vec","","Consumes this error, returning the underlying vector of bytes which\ngenerated the error in the first place.",182,null],[11,"description","","",182,null],[11,"fmt","","",182,null],[11,"from","std::io::error","",185,{"inputs":[{"name":"nulerror"}],"output":{"name":"error"}}],[11,"into_cstring","std::ffi::c_str","Consumes this error, returning original `CString` which generated the\nerror.",184,null],[11,"utf8_error","","Access the underlying UTF-8 error that was the cause of this error.",184,null],[11,"description","","",184,null],[11,"cause","","",184,null],[11,"fmt","","",184,null],[11,"eq","","",181,null],[11,"partial_cmp","","",181,null],[11,"cmp","","",181,null],[11,"to_owned","","",181,null],[11,"from","","",180,{"inputs":[{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"index","","",180,null],[11,"as_ref","","",181,null],[11,"as_ref","","",180,null],[11,"clone","std::ffi::os_str","",186,null],[11,"new","","Constructs a new empty `OsString`.",186,{"inputs":[],"output":{"name":"osstring"}}],[11,"as_os_str","","Converts to an `OsStr` slice.",186,null],[11,"into_string","","Converts the `OsString` into a `String` if it contains valid Unicode data.",186,null],[11,"push","","Extends the string with the given `&amp;OsStr` slice.",186,null],[11,"with_capacity","","Creates a new `OsString` with the given capacity.",186,{"inputs":[{"name":"usize"}],"output":{"name":"osstring"}}],[11,"clear","","Truncates the `OsString` to zero length.",186,null],[11,"capacity","","Returns the capacity this `OsString` can hold without reallocating.",186,null],[11,"reserve","","Reserves capacity for at least `additional` more capacity to be inserted\nin the given `OsString`.",186,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more capacity to\nbe inserted in the given `OsString`. Does nothing if the capacity is\nalready sufficient.",186,null],[11,"from","","",186,{"inputs":[{"name":"string"}],"output":{"name":"osstring"}}],[11,"from","","",186,{"inputs":[{"name":"t"}],"output":{"name":"osstring"}}],[11,"index","","",186,null],[11,"new","","Coerces into an `OsStr` slice.",187,{"inputs":[{"name":"s"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&amp;str` slice if the `OsStr` is valid Unicode.",187,null],[11,"to_string_lossy","","Converts an `OsStr` to a `Cow&lt;str&gt;`.",187,null],[11,"to_os_string","","Copies the slice into an owned `OsString`.",187,null],[11,"is_empty","","Checks whether the `OsStr` is empty.",187,null],[11,"len","","Returns the length of this `OsStr`.",187,null],[11,"deref","","",186,null],[11,"default","","",186,{"inputs":[],"output":{"name":"osstring"}}],[11,"fmt","","",186,null],[11,"eq","","",186,null],[11,"eq","","",186,null],[11,"partial_cmp","","",186,null],[11,"lt","","",186,null],[11,"le","","",186,null],[11,"gt","","",186,null],[11,"ge","","",186,null],[11,"partial_cmp","","",186,null],[11,"cmp","","",186,null],[11,"hash","","",186,null],[11,"eq","","",187,null],[11,"eq","","",187,null],[11,"partial_cmp","","",187,null],[11,"lt","","",187,null],[11,"le","","",187,null],[11,"gt","","",187,null],[11,"ge","","",187,null],[11,"partial_cmp","","",187,null],[11,"cmp","","",187,null],[11,"eq","","",186,null],[11,"eq","","",187,null],[11,"partial_cmp","","",186,null],[11,"partial_cmp","","",187,null],[11,"eq","","",186,null],[11,"partial_cmp","","",186,null],[11,"eq","collections::borrow","",188,null],[11,"eq","std::ffi::os_str","",187,null],[11,"partial_cmp","collections::borrow","",188,null],[11,"partial_cmp","std::ffi::os_str","",187,null],[11,"eq","collections::borrow","",188,null],[11,"partial_cmp","","",188,null],[11,"eq","","",188,null],[11,"eq","std::ffi::os_str","",186,null],[11,"partial_cmp","collections::borrow","",188,null],[11,"partial_cmp","std::ffi::os_str","",186,null],[11,"hash","","",187,null],[11,"fmt","","",187,null],[11,"borrow","","",186,null],[11,"to_owned","","",187,null],[11,"as_ref","","",187,null],[11,"as_ref","","",186,null],[11,"as_ref","collections::string","",189,null],[11,"clone","std::fs","",190,null],[11,"clone","","",191,null],[11,"fmt","","",192,null],[11,"eq","","",192,null],[11,"ne","","",192,null],[11,"clone","","",192,null],[11,"hash","","",193,null],[11,"eq","","",193,null],[11,"ne","","",193,null],[11,"clone","","",193,null],[11,"open","","Attempts to open a file in read-only mode.",194,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"create","","Opens a file in write-only mode.",194,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"sync_all","","Attempts to sync all OS-internal metadata to disk.",194,null],[11,"sync_data","","This function is similar to `sync_all`, except that it may not\nsynchronize file metadata to the filesystem.",194,null],[11,"set_len","","Truncates or extends the underlying file, updating the size of\nthis file to become `size`.",194,null],[11,"metadata","","Queries metadata about the underlying file.",194,null],[11,"try_clone","","Creates a new independently owned handle to the underlying file.",194,null],[11,"fmt","","",194,null],[11,"read","","",194,null],[11,"read_to_end","","",194,null],[11,"write","","",194,null],[11,"flush","","",194,null],[11,"seek","","",194,null],[11,"new","","Creates a blank new set of options ready for configuration.",191,{"inputs":[],"output":{"name":"openoptions"}}],[11,"read","","Sets the option for read access.",191,null],[11,"write","","Sets the option for write access.",191,null],[11,"append","","Sets the option for the append mode.",191,null],[11,"truncate","","Sets the option for truncating a previous file.",191,null],[11,"create","","Sets the option for creating a new file.",191,null],[11,"create_new","","Sets the option to always create a new file.",191,null],[11,"open","","Opens a file at `path` with the options specified by `self`.",191,null],[11,"file_type","","Returns the file type for this metadata.",190,null],[11,"is_dir","","Returns whether this metadata is for a directory.",190,null],[11,"is_file","","Returns whether this metadata is for a regular file.",190,null],[11,"len","","Returns the size of the file, in bytes, this metadata is for.",190,null],[11,"permissions","","Returns the permissions of the file this metadata is for.",190,null],[11,"modified","","Returns the last modification time listed in this metadata.",190,null],[11,"accessed","","Returns the last access time of this metadata.",190,null],[11,"created","","Returns the creation time listed in the this metadata.",190,null],[11,"readonly","","Returns whether these permissions describe a readonly file.",192,null],[11,"set_readonly","","Modifies the readonly flag for this set of permissions.",192,null],[11,"is_dir","","Test whether this file type represents a directory.",193,null],[11,"is_file","","Test whether this file type represents a regular file.",193,null],[11,"is_symlink","","Test whether this file type represents a symbolic link.",193,null],[11,"next","","",195,null],[11,"path","","Returns the full path to the file that this entry represents.",196,null],[11,"metadata","","Return the metadata for the file that this entry points at.",196,null],[11,"file_type","","Return the file type for the file that this entry points at.",196,null],[11,"file_name","","Returns the bare file name of this directory entry without any other\nleading path component.",196,null],[11,"new","","Creates a new set of options with default mode/security settings for all\nplatforms and also non-recursive.",197,{"inputs":[],"output":{"name":"dirbuilder"}}],[11,"recursive","","Indicate that directories create should be created recursively, creating\nall parent directories if they do not exist with the same security and\npermissions settings.",197,null],[11,"create","","Create the specified directory with the options configured in this\nbuilder.",197,null],[11,"new","std::io::buffered","Creates a new `BufReader` with a default buffer capacity.",198,{"inputs":[{"name":"r"}],"output":{"name":"bufreader"}}],[11,"with_capacity","","Creates a new `BufReader` with the specified buffer capacity.",198,{"inputs":[{"name":"usize"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"get_ref","","Gets a reference to the underlying reader.",198,null],[11,"get_mut","","Gets a mutable reference to the underlying reader.",198,null],[11,"into_inner","","Unwraps this `BufReader`, returning the underlying reader.",198,null],[11,"read","","",198,null],[11,"fill_buf","","",198,null],[11,"consume","","",198,null],[11,"fmt","","",198,null],[11,"seek","","Seek to an offset, in bytes, in the underlying reader.",198,null],[11,"fmt","","",199,null],[11,"new","","Creates a new `BufWriter` with a default buffer capacity.",200,{"inputs":[{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"with_capacity","","Creates a new `BufWriter` with the specified buffer capacity.",200,{"inputs":[{"name":"usize"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",200,null],[11,"get_mut","","Gets a mutable reference to the underlying writer.",200,null],[11,"into_inner","","Unwraps this `BufWriter`, returning the underlying writer.",200,null],[11,"write","","",200,null],[11,"flush","","",200,null],[11,"fmt","","",200,null],[11,"seek","","Seek to the offset, in bytes, in the underlying writer.",200,null],[11,"drop","","",200,null],[11,"error","","Returns the error which caused the call to `into_inner()` to fail.",199,null],[11,"into_inner","","Returns the buffered writer instance which generated the error.",199,null],[11,"from","std::io::error","",185,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"description","std::io::buffered","",199,null],[11,"fmt","","",199,null],[11,"new","","Creates a new `LineWriter`.",201,{"inputs":[{"name":"w"}],"output":{"name":"linewriter"}}],[11,"with_capacity","","Creates a new `LineWriter` with a specified capacity for the internal\nbuffer.",201,{"inputs":[{"name":"usize"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",201,null],[11,"get_mut","","Gets a mutable reference to the underlying writer.",201,null],[11,"into_inner","","Unwraps this `LineWriter`, returning the underlying writer.",201,null],[11,"write","","",201,null],[11,"flush","","",201,null],[11,"fmt","","",201,null],[11,"fmt","std::io::cursor","",202,null],[11,"clone","","",202,null],[11,"new","","Creates a new cursor wrapping the provided underlying I/O object.",202,{"inputs":[{"name":"t"}],"output":{"name":"cursor"}}],[11,"into_inner","","Consumes this cursor, returning the underlying value.",202,null],[11,"get_ref","","Gets a reference to the underlying value in this cursor.",202,null],[11,"get_mut","","Gets a mutable reference to the underlying value in this cursor.",202,null],[11,"position","","Returns the current position of this cursor.",202,null],[11,"set_position","","Sets the position of this cursor.",202,null],[11,"seek","","",202,null],[11,"read","","",202,null],[11,"fill_buf","","",202,null],[11,"consume","","",202,null],[11,"write","","",202,null],[11,"flush","","",202,null],[11,"write","","",202,null],[11,"flush","","",202,null],[11,"write","","",202,null],[11,"flush","","",202,null],[11,"fmt","std::io::error","",185,null],[11,"fmt","","",203,null],[11,"clone","","",203,null],[11,"eq","","",203,null],[11,"new","","Creates a new I/O error from a known kind of error as well as an\narbitrary error payload.",185,{"inputs":[{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",185,{"inputs":[],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",185,{"inputs":[{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",185,null],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",185,null],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error\n(if any).",185,null],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",185,null],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",185,null],[11,"fmt","","",185,null],[11,"description","","",185,null],[11,"cause","","",185,null],[11,"read","alloc::boxed","",122,null],[11,"read_to_end","","",122,null],[11,"read_to_string","","",122,null],[11,"read_exact","","",122,null],[11,"write","","",122,null],[11,"flush","","",122,null],[11,"write_all","","",122,null],[11,"write_fmt","","",122,null],[11,"seek","","",122,null],[11,"fill_buf","","",122,null],[11,"consume","","",122,null],[11,"read_until","","",122,null],[11,"read_line","","",122,null],[11,"write","collections::vec","",161,null],[11,"write_all","","",161,null],[11,"flush","","",161,null],[11,"read","std::io::util","",204,null],[11,"fill_buf","","",204,null],[11,"consume","","",204,null],[11,"read","","",205,null],[11,"write","","",206,null],[11,"flush","","",206,null],[11,"lock","std::io::stdio","Locks this handle to the standard input stream, returning a readable\nguard.",207,null],[11,"read_line","","Locks this handle and reads a line of input into the specified buffer.",207,null],[11,"read","","",207,null],[11,"read_to_end","","",207,null],[11,"read_to_string","","",207,null],[11,"read_exact","","",207,null],[11,"read","","",208,null],[11,"read_to_end","","",208,null],[11,"fill_buf","","",208,null],[11,"consume","","",208,null],[11,"lock","","Locks this handle to the standard output stream, returning a writable\nguard.",209,null],[11,"write","","",209,null],[11,"flush","","",209,null],[11,"write_all","","",209,null],[11,"write_fmt","","",209,null],[11,"write","","",210,null],[11,"flush","","",210,null],[11,"lock","","Locks this handle to the standard error stream, returning a writable\nguard.",211,null],[11,"write","","",211,null],[11,"flush","","",211,null],[11,"write_all","","",211,null],[11,"write_fmt","","",211,null],[11,"write","","",212,null],[11,"flush","","",212,null],[11,"fmt","std::io","",213,null],[11,"clone","","",213,null],[11,"eq","","",213,null],[11,"ne","","",213,null],[11,"read","","",214,null],[11,"fill_buf","","",214,null],[11,"consume","","",214,null],[11,"limit","","Returns the number of bytes that can be read before this instance will\nreturn EOF.",215,null],[11,"read","","",215,null],[11,"fill_buf","","",215,null],[11,"consume","","",215,null],[11,"next","","",216,null],[11,"fmt","","",217,null],[11,"next","","",218,null],[11,"description","","",217,null],[11,"cause","","",217,null],[11,"fmt","","",217,null],[11,"next","","",219,null],[11,"next","","",220,null],[11,"cmp","std::net::ip","",221,null],[11,"partial_cmp","","",221,null],[11,"lt","","",221,null],[11,"le","","",221,null],[11,"gt","","",221,null],[11,"ge","","",221,null],[11,"hash","","",221,null],[11,"fmt","","",221,null],[11,"eq","","",221,null],[11,"ne","","",221,null],[11,"clone","","",221,null],[11,"fmt","","",222,null],[11,"hash","","",222,null],[11,"clone","","",222,null],[11,"eq","","",222,null],[11,"new","","Creates a new IPv4 address from four eight-bit octets.",223,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address.",223,null],[11,"is_unspecified","","Returns true for the special &#39;unspecified&#39; address (0.0.0.0).",223,null],[11,"is_loopback","","Returns true if this is a loopback address (127.0.0.0/8).",223,null],[11,"is_private","","Returns true if this is a private address.",223,null],[11,"is_link_local","","Returns true if the address is link-local (169.254.0.0/16).",223,null],[11,"is_global","","Returns true if the address appears to be globally routable.\nSee [iana-ipv4-special-registry][ipv4-sr].\n[ipv4-sr]: http://goo.gl/RaZ7lg",223,null],[11,"is_multicast","","Returns true if this is a multicast address (224.0.0.0/4).",223,null],[11,"is_broadcast","","Returns true if this is a broadcast address (255.255.255.255).",223,null],[11,"is_documentation","","Returns true if this address is in a range designated for documentation.",223,null],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible IPv6 address.",223,null],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped IPv6 address.",223,null],[11,"fmt","","",221,null],[11,"fmt","","",223,null],[11,"fmt","","",223,null],[11,"clone","","",223,null],[11,"eq","","",223,null],[11,"hash","","",223,null],[11,"partial_cmp","","",223,null],[11,"cmp","","",223,null],[11,"from","","",223,{"inputs":[{"name":"u32"}],"output":{"name":"ipv4addr"}}],[11,"from","","",223,null],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",224,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Returns the eight 16-bit segments that make up this address.",224,null],[11,"is_unspecified","","Returns true for the special &#39;unspecified&#39; address (::).",224,null],[11,"is_loopback","","Returns true if this is a loopback address (::1).",224,null],[11,"is_global","","Returns true if the address appears to be globally routable.",224,null],[11,"is_unique_local","","Returns true if this is a unique local address (fc00::/7).",224,null],[11,"is_unicast_link_local","","Returns true if the address is unicast and link-local (fe80::/10).",224,null],[11,"is_unicast_site_local","","Returns true if this is a deprecated unicast site-local address\n(fec0::/10).",224,null],[11,"is_documentation","","Returns true if this is an address reserved for documentation\n(2001:db8::/32).",224,null],[11,"is_unicast_global","","Returns true if the address is a globally routable unicast address.",224,null],[11,"multicast_scope","","Returns the address&#39;s multicast scope if the address is multicast.",224,null],[11,"is_multicast","","Returns true if this is a multicast address (ff00::/8).",224,null],[11,"to_ipv4","","Converts this address to an IPv4 address. Returns None if this address is\nneither IPv4-compatible or IPv4-mapped.",224,null],[11,"octets","","Returns the sixteen eight-bit integers the IPv6 address consists of.",224,null],[11,"fmt","","",224,null],[11,"fmt","","",224,null],[11,"clone","","",224,null],[11,"eq","","",224,null],[11,"hash","","",224,null],[11,"partial_cmp","","",224,null],[11,"cmp","","",224,null],[11,"from","","",224,null],[11,"fmt","std::net::addr","",225,null],[11,"hash","","",225,null],[11,"eq","","",225,null],[11,"ne","","",225,null],[11,"clone","","",225,null],[11,"new","","Creates a new socket address from the (ip, port) pair.",225,{"inputs":[{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"socketaddr"}}],[11,"ip","","Returns the IP address associated with this socket address.",225,null],[11,"set_ip","","Change the IP address associated with this socket address.",225,null],[11,"port","","Returns the port number associated with this socket address.",225,null],[11,"set_port","","Change the port number associated with this socket address.",225,null],[11,"new","","Creates a new socket address from the (ip, port) pair.",226,{"inputs":[{"name":"ipv4addr"},{"name":"u16"}],"output":{"name":"socketaddrv4"}}],[11,"ip","","Returns the IP address associated with this socket address.",226,null],[11,"set_ip","","Change the IP address associated with this socket address.",226,null],[11,"port","","Returns the port number associated with this socket address.",226,null],[11,"set_port","","Change the port number associated with this socket address.",226,null],[11,"new","","Creates a new socket address from the ip/port/flowinfo/scope_id\ncomponents.",227,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u32"},{"name":"u32"}],"output":{"name":"socketaddrv6"}}],[11,"ip","","Returns the IP address associated with this socket address.",227,null],[11,"set_ip","","Change the IP address associated with this socket address.",227,null],[11,"port","","Returns the port number associated with this socket address.",227,null],[11,"set_port","","Change the port number associated with this socket address.",227,null],[11,"flowinfo","","Returns the flow information associated with this address,\ncorresponding to the `sin6_flowinfo` field in C.",227,null],[11,"set_flowinfo","","Change the flow information associated with this socket address.",227,null],[11,"scope_id","","Returns the scope ID associated with this address,\ncorresponding to the `sin6_scope_id` field in C.",227,null],[11,"set_scope_id","","Change the scope ID associated with this socket address.",227,null],[11,"fmt","","",225,null],[11,"fmt","","",226,null],[11,"fmt","","",226,null],[11,"fmt","","",227,null],[11,"fmt","","",227,null],[11,"clone","","",226,null],[11,"clone","","",227,null],[11,"eq","","",226,null],[11,"eq","","",227,null],[11,"hash","","",226,null],[11,"hash","","",227,null],[11,"to_socket_addrs","","",225,null],[11,"to_socket_addrs","","",226,null],[11,"to_socket_addrs","","",227,null],[11,"connect","std::net::tcp","Opens a TCP connection to a remote host.",228,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",228,null],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",228,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",228,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",228,null],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",228,null],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",228,null],[11,"read_timeout","","Returns the read timeout of this socket.",228,null],[11,"write_timeout","","Returns the write timeout of this socket.",228,null],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",228,null],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",228,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",228,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",228,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",228,null],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",228,null],[11,"read","","",228,null],[11,"read_to_end","","",228,null],[11,"write","","",228,null],[11,"flush","","",228,null],[11,"fmt","","",228,null],[11,"bind","","Creates a new `TcpListener` which will be bound to the specified\naddress.",229,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",229,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",229,null],[11,"accept","","Accept a new incoming connection from this listener.",229,null],[11,"incoming","","Returns an iterator over the connections being received on this\nlistener.",229,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",229,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",229,null],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",229,null],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",229,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",229,null],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",229,null],[11,"next","","",230,null],[11,"fmt","","",229,null],[11,"bind","std::net::udp","Creates a UDP socket from the given address.",231,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",231,null],[11,"send_to","","Sends data on the socket to the given address. On success, returns the\nnumber of bytes written.",231,null],[11,"local_addr","","Returns the socket address that this socket was created from.",231,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",231,null],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",231,null],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",231,null],[11,"read_timeout","","Returns the read timeout of this socket.",231,null],[11,"write_timeout","","Returns the write timeout of this socket.",231,null],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",231,null],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",231,null],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",231,null],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",231,null],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",231,null],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",231,null],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",231,null],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",231,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",231,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",231,null],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",231,null],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",231,null],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",231,null],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",231,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",231,null],[11,"connect","","Connects this UDP socket to a remote address, allowing the `send` and\n`recv` syscalls to be used to send data and also applies filters to only\nreceive data from the specified address.",231,null],[11,"send","","Sends data on the socket to the remote address to which it is connected.",231,null],[11,"recv","","Receives data on the socket from the remote address to which it is\nconnected.",231,null],[11,"set_nonblocking","","Moves this UDP socket into or out of nonblocking mode.",231,null],[11,"fmt","","",231,null],[11,"from_str","std::net::ip","",221,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",223,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",224,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","std::net::addr","",226,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",227,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",225,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","std::net::parser","",232,null],[11,"ne","","",232,null],[11,"clone","","",232,null],[11,"fmt","","",232,null],[11,"fmt","","",232,null],[11,"description","","",232,null],[11,"fmt","std::net","",233,null],[11,"eq","","",233,null],[11,"clone","","",233,null],[11,"next","","",234,null],[11,"clone","std::os::linux::raw::arch","",235,null],[11,"as_raw_stat","std::fs","",190,null],[11,"st_dev","","",190,null],[11,"st_ino","","",190,null],[11,"st_mode","","",190,null],[11,"st_nlink","","",190,null],[11,"st_uid","","",190,null],[11,"st_gid","","",190,null],[11,"st_rdev","","",190,null],[11,"st_size","","",190,null],[11,"st_atime","","",190,null],[11,"st_atime_nsec","","",190,null],[11,"st_mtime","","",190,null],[11,"st_mtime_nsec","","",190,null],[11,"st_ctime","","",190,null],[11,"st_ctime_nsec","","",190,null],[11,"st_blksize","","",190,null],[11,"st_blocks","","",190,null],[11,"as_raw_fd","","",194,null],[11,"from_raw_fd","","",194,{"inputs":[{"name":"i32"}],"output":{"name":"file"}}],[11,"into_raw_fd","","",194,null],[11,"as_raw_fd","std::net::tcp","",228,null],[11,"as_raw_fd","","",229,null],[11,"as_raw_fd","std::net::udp","",231,null],[11,"from_raw_fd","std::net::tcp","",228,{"inputs":[{"name":"i32"}],"output":{"name":"tcpstream"}}],[11,"from_raw_fd","","",229,{"inputs":[{"name":"i32"}],"output":{"name":"tcplistener"}}],[11,"from_raw_fd","std::net::udp","",231,{"inputs":[{"name":"i32"}],"output":{"name":"udpsocket"}}],[11,"into_raw_fd","std::net::tcp","",228,null],[11,"into_raw_fd","","",229,null],[11,"into_raw_fd","std::net::udp","",231,null],[11,"from_vec","std::ffi::os_str","",186,{"inputs":[{"name":"vec"}],"output":{"name":"osstring"}}],[11,"into_vec","","",186,null],[11,"from_bytes","","",187,null],[11,"as_bytes","","",187,null],[11,"mode","std::fs","",192,null],[11,"set_mode","","",192,null],[11,"from_mode","","",192,{"inputs":[{"name":"u32"}],"output":{"name":"permissions"}}],[11,"mode","","",191,null],[11,"custom_flags","","",191,null],[11,"dev","","",190,null],[11,"ino","","",190,null],[11,"mode","","",190,null],[11,"nlink","","",190,null],[11,"uid","","",190,null],[11,"gid","","",190,null],[11,"rdev","","",190,null],[11,"size","","",190,null],[11,"atime","","",190,null],[11,"atime_nsec","","",190,null],[11,"mtime","","",190,null],[11,"mtime_nsec","","",190,null],[11,"ctime","","",190,null],[11,"ctime_nsec","","",190,null],[11,"blksize","","",190,null],[11,"blocks","","",190,null],[11,"is_block_device","","",193,null],[11,"is_char_device","","",193,null],[11,"is_fifo","","",193,null],[11,"is_socket","","",193,null],[11,"ino","","",196,null],[11,"mode","","",197,null],[11,"uid","std::process","",236,null],[11,"gid","","",236,null],[11,"before_exec","","",236,null],[11,"exec","","",236,null],[11,"from_raw","","",237,{"inputs":[{"name":"i32"}],"output":{"name":"exitstatus"}}],[11,"signal","","",237,null],[11,"from_raw_fd","","",238,{"inputs":[{"name":"i32"}],"output":{"name":"stdio"}}],[11,"as_raw_fd","","",239,null],[11,"as_raw_fd","","",240,null],[11,"as_raw_fd","","",241,null],[11,"into_raw_fd","","",239,null],[11,"into_raw_fd","","",240,null],[11,"into_raw_fd","","",241,null],[11,"as_pthread_t","std::thread","",134,null],[11,"into_pthread_t","","",134,null],[11,"clone","std::sys::ext::net","",242,null],[11,"is_unnamed","","Returns true iff the address is unnamed.",242,null],[11,"as_pathname","","Returns the contents of this address if it is a `pathname` address.",242,null],[11,"fmt","","",242,null],[11,"fmt","","",243,null],[11,"connect","","Connects to the socket named by `path`.",243,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"pair","","Creates an unnamed pair of connected sockets.",243,{"inputs":[],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",243,null],[11,"local_addr","","Returns the socket address of the local half of this connection.",243,null],[11,"peer_addr","","Returns the socket address of the remote half of this connection.",243,null],[11,"set_read_timeout","","Sets the read timeout for the socket.",243,null],[11,"set_write_timeout","","Sets the write timeout for the socket.",243,null],[11,"read_timeout","","Returns the read timeout of this socket.",243,null],[11,"write_timeout","","Returns the write timeout of this socket.",243,null],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",243,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",243,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",243,null],[11,"read","","",243,null],[11,"read_to_end","","",243,null],[11,"write","","",243,null],[11,"flush","","",243,null],[11,"as_raw_fd","","",243,null],[11,"from_raw_fd","","",243,{"inputs":[{"name":"i32"}],"output":{"name":"unixstream"}}],[11,"into_raw_fd","","",243,null],[11,"fmt","","",244,null],[11,"bind","","Creates a new `UnixListener` bound to the specified socket.",244,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"accept","","Accepts a new incoming connection to this listener.",244,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",244,null],[11,"local_addr","","Returns the local socket address of this listener.",244,null],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",244,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",244,null],[11,"incoming","","Returns an iterator over incoming connections.",244,null],[11,"as_raw_fd","","",244,null],[11,"from_raw_fd","","",244,{"inputs":[{"name":"i32"}],"output":{"name":"unixlistener"}}],[11,"into_raw_fd","","",244,null],[11,"fmt","","",245,null],[11,"next","","",245,null],[11,"size_hint","","",245,null],[11,"fmt","","",246,null],[11,"bind","","Creates a Unix datagram socket bound to the given path.",246,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"unbound","","Creates a Unix Datagram socket which is not bound to any address.",246,{"inputs":[],"output":{"name":"result"}}],[11,"pair","","Create an unnamed pair of connected sockets.",246,{"inputs":[],"output":{"name":"result"}}],[11,"connect","","Connects the socket to the specified address.",246,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",246,null],[11,"local_addr","","Returns the address of this socket.",246,null],[11,"peer_addr","","Returns the address of this socket&#39;s peer.",246,null],[11,"recv_from","","Receives data from the socket.",246,null],[11,"recv","","Receives data from the socket.",246,null],[11,"send_to","","Sends data on the socket to the specified address.",246,null],[11,"send","","Sends data on the socket to the socket&#39;s peer.",246,null],[11,"set_read_timeout","","Sets the read timeout for the socket.",246,null],[11,"set_write_timeout","","Sets the write timeout for the socket.",246,null],[11,"read_timeout","","Returns the read timeout of this socket.",246,null],[11,"write_timeout","","Returns the write timeout of this socket.",246,null],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",246,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",246,null],[11,"shutdown","","Shut down the read, write, or both halves of this connection.",246,null],[11,"as_raw_fd","","",246,null],[11,"from_raw_fd","","",246,{"inputs":[{"name":"i32"}],"output":{"name":"unixdatagram"}}],[11,"into_raw_fd","","",246,null],[11,"deref","std::panic","",247,null],[11,"deref_mut","","",247,null],[11,"call_once","","",247,null],[11,"eq","std::path","",248,null],[11,"ne","","",248,null],[11,"cmp","","",248,null],[11,"partial_cmp","","",248,null],[11,"lt","","",248,null],[11,"le","","",248,null],[11,"gt","","",248,null],[11,"ge","","",248,null],[11,"hash","","",248,null],[11,"fmt","","",248,null],[11,"clone","","",248,null],[11,"is_verbatim","","Determines if the prefix is verbatim, i.e. begins with `\\\\?\\`.",248,null],[11,"fmt","","",249,null],[11,"clone","","",249,null],[11,"kind","","The parsed prefix data.",249,null],[11,"as_os_str","","The raw `OsStr` slice for this prefix.",249,null],[11,"eq","","",249,null],[11,"partial_cmp","","",249,null],[11,"cmp","","",249,null],[11,"hash","","",249,null],[11,"fmt","","",250,null],[11,"hash","","",250,null],[11,"cmp","","",250,null],[11,"partial_cmp","","",250,null],[11,"lt","","",250,null],[11,"le","","",250,null],[11,"gt","","",250,null],[11,"ge","","",250,null],[11,"eq","","",250,null],[11,"ne","","",250,null],[11,"clone","","",250,null],[11,"as_os_str","","Extracts the underlying `OsStr` slice",250,null],[11,"as_ref","","",250,null],[11,"clone","","",251,null],[11,"clone","","",252,null],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",251,null],[11,"as_ref","","",251,null],[11,"as_ref","","",251,null],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",252,null],[11,"as_ref","","",252,null],[11,"as_ref","","",252,null],[11,"next","","",252,null],[11,"next_back","","",252,null],[11,"next","","",251,null],[11,"next_back","","",251,null],[11,"eq","","",251,null],[11,"partial_cmp","","",251,null],[11,"cmp","","",251,null],[11,"clone","","",253,null],[11,"new","","Allocates an empty `PathBuf`.",253,{"inputs":[],"output":{"name":"pathbuf"}}],[11,"as_path","","Coerces to a `Path` slice.",253,null],[11,"push","","Extends `self` with `path`.",253,null],[11,"pop","","Truncate `self` to `self.parent()`.",253,null],[11,"set_file_name","","Updates `self.file_name()` to `file_name`.",253,null],[11,"set_extension","","Updates `self.extension()` to `extension`.",253,null],[11,"into_os_string","","Consumes the `PathBuf`, yielding its internal `OsString` storage.",253,null],[11,"from","","",253,{"inputs":[{"name":"t"}],"output":{"name":"pathbuf"}}],[11,"from","","",253,{"inputs":[{"name":"osstring"}],"output":{"name":"pathbuf"}}],[11,"from","","",253,{"inputs":[{"name":"string"}],"output":{"name":"pathbuf"}}],[11,"from_iter","","",253,{"inputs":[{"name":"i"}],"output":{"name":"pathbuf"}}],[11,"extend","","",253,null],[11,"fmt","","",253,null],[11,"new","","Directly wrap a string slice as a `Path` slice.",254,{"inputs":[{"name":"s"}],"output":{"name":"path"}}],[11,"as_os_str","","Yields the underlying `OsStr` slice.",254,null],[11,"to_str","","Yields a `&amp;str` slice if the `Path` is valid unicode.",254,null],[11,"to_string_lossy","","Converts a `Path` to a `Cow&lt;str&gt;`.",254,null],[11,"to_path_buf","","Converts a `Path` to an owned `PathBuf`.",254,null],[11,"is_absolute","","A path is *absolute* if it is independent of the current directory.",254,null],[11,"is_relative","","A path is *relative* if it is not absolute.",254,null],[11,"has_root","","A path has a root if the body of the path begins with the directory separator.",254,null],[11,"parent","","The path without its final component, if any.",254,null],[11,"file_name","","The final component of the path, if it is a normal file.",254,null],[11,"strip_prefix","","Returns a path that, when joined onto `base`, yields `self`.",254,null],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",254,null],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",254,null],[11,"file_stem","","Extracts the stem (non-extension) portion of `self.file_name()`.",254,null],[11,"extension","","Extracts the extension of `self.file_name()`, if possible.",254,null],[11,"join","","Creates an owned `PathBuf` with `path` adjoined to `self`.",254,null],[11,"with_file_name","","Creates an owned `PathBuf` like `self` but with the given file name.",254,null],[11,"with_extension","","Creates an owned `PathBuf` like `self` but with the given extension.",254,null],[11,"components","","Produce an iterator over the components of the path.",254,null],[11,"iter","","Produce an iterator over the path&#39;s components viewed as `OsStr` slices.",254,null],[11,"display","","Returns an object that implements `Display` for safely printing paths\nthat may contain non-Unicode data.",254,null],[11,"metadata","","Query the file system to get information about a file, directory, etc.",254,null],[11,"symlink_metadata","","Query the metadata about a file without following symlinks.",254,null],[11,"canonicalize","","Returns the canonical form of the path with all intermediate components\nnormalized and symbolic links resolved.",254,null],[11,"read_link","","Reads a symbolic link, returning the file that the link points to.",254,null],[11,"read_dir","","Returns an iterator over the entries within a directory.",254,null],[11,"exists","","Returns whether the path points at an existing entity.",254,null],[11,"is_file","","Returns whether the path is pointing at a regular file.",254,null],[11,"is_dir","","Returns whether the path is pointing at a directory.",254,null],[11,"deref","","",253,null],[11,"borrow","","",253,null],[11,"from","collections::borrow","",188,{"inputs":[{"name":"path"}],"output":{"name":"cow"}}],[11,"from","","",188,{"inputs":[{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"to_owned","std::path","",254,null],[11,"eq","","",253,null],[11,"hash","","",253,null],[11,"partial_cmp","","",253,null],[11,"cmp","","",253,null],[11,"as_ref","","",253,null],[11,"into","","",253,null],[11,"eq","","",255,null],[11,"ne","","",255,null],[11,"clone","","",255,null],[11,"fmt","","",255,null],[11,"as_ref","","",254,null],[11,"fmt","","",254,null],[11,"fmt","","",256,null],[11,"fmt","","",256,null],[11,"eq","","",254,null],[11,"hash","","",254,null],[11,"partial_cmp","","",254,null],[11,"cmp","","",254,null],[11,"as_ref","","",254,null],[11,"as_ref","std::ffi::os_str","",187,null],[11,"as_ref","collections::borrow","",188,null],[11,"as_ref","std::ffi::os_str","",186,null],[11,"as_ref","collections::string","",189,null],[11,"as_ref","std::path","",253,null],[11,"eq","","",253,null],[11,"eq","","",254,null],[11,"partial_cmp","","",253,null],[11,"partial_cmp","","",254,null],[11,"eq","","",253,null],[11,"partial_cmp","","",253,null],[11,"eq","collections::borrow","",188,null],[11,"eq","std::path","",254,null],[11,"partial_cmp","collections::borrow","",188,null],[11,"partial_cmp","std::path","",254,null],[11,"eq","collections::borrow","",188,null],[11,"partial_cmp","","",188,null],[11,"eq","","",188,null],[11,"eq","std::path","",253,null],[11,"partial_cmp","collections::borrow","",188,null],[11,"partial_cmp","std::path","",253,null],[11,"eq","","",253,null],[11,"eq","std::ffi::os_str","",187,null],[11,"partial_cmp","std::path","",253,null],[11,"partial_cmp","std::ffi::os_str","",187,null],[11,"eq","std::path","",253,null],[11,"partial_cmp","","",253,null],[11,"eq","","",253,null],[11,"eq","collections::borrow","",188,null],[11,"partial_cmp","std::path","",253,null],[11,"partial_cmp","collections::borrow","",188,null],[11,"eq","std::path","",253,null],[11,"eq","std::ffi::os_str","",186,null],[11,"partial_cmp","std::path","",253,null],[11,"partial_cmp","std::ffi::os_str","",186,null],[11,"eq","std::path","",254,null],[11,"eq","std::ffi::os_str","",187,null],[11,"partial_cmp","std::path","",254,null],[11,"partial_cmp","std::ffi::os_str","",187,null],[11,"eq","std::path","",254,null],[11,"partial_cmp","","",254,null],[11,"eq","","",254,null],[11,"eq","collections::borrow","",188,null],[11,"partial_cmp","std::path","",254,null],[11,"partial_cmp","collections::borrow","",188,null],[11,"eq","std::path","",254,null],[11,"eq","std::ffi::os_str","",186,null],[11,"partial_cmp","std::path","",254,null],[11,"partial_cmp","std::ffi::os_str","",186,null],[11,"eq","","",187,null],[11,"partial_cmp","","",187,null],[11,"eq","collections::borrow","",188,null],[11,"partial_cmp","","",188,null],[11,"eq","std::ffi::os_str","",186,null],[11,"partial_cmp","","",186,null],[11,"eq","collections::borrow","",188,null],[11,"eq","std::ffi::os_str","",187,null],[11,"partial_cmp","collections::borrow","",188,null],[11,"partial_cmp","std::ffi::os_str","",187,null],[11,"eq","collections::borrow","",188,null],[11,"partial_cmp","","",188,null],[11,"eq","","",188,null],[11,"eq","std::ffi::os_str","",186,null],[11,"partial_cmp","collections::borrow","",188,null],[11,"partial_cmp","std::ffi::os_str","",186,null],[11,"fmt","std::path","",255,null],[11,"description","","",255,null],[11,"write","std::process","",239,null],[11,"flush","","",239,null],[11,"read","","",240,null],[11,"read_to_end","","",240,null],[11,"read","","",241,null],[11,"read_to_end","","",241,null],[11,"new","","Constructs a new `Command` for launching the program at\npath `program`, with the following default configuration:",236,{"inputs":[{"name":"s"}],"output":{"name":"command"}}],[11,"arg","","Add an argument to pass to the program.",236,null],[11,"args","","Add multiple arguments to pass to the program.",236,null],[11,"env","","Inserts or updates an environment variable mapping.",236,null],[11,"env_remove","","Removes an environment variable mapping.",236,null],[11,"env_clear","","Clears the entire environment map for the child process.",236,null],[11,"current_dir","","Sets the working directory for the child process.",236,null],[11,"stdin","","Configuration for the child process&#39;s stdin handle (file descriptor 0).",236,null],[11,"stdout","","Configuration for the child process&#39;s stdout handle (file descriptor 1).",236,null],[11,"stderr","","Configuration for the child process&#39;s stderr handle (file descriptor 2).",236,null],[11,"spawn","","Executes the command as a child process, returning a handle to it.",236,null],[11,"output","","Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.",236,null],[11,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",236,null],[11,"fmt","","Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.",236,null],[11,"clone","","",257,null],[11,"eq","","",257,null],[11,"ne","","",257,null],[11,"fmt","","",257,null],[11,"piped","","A new pipe should be arranged to connect the parent and child processes.",238,{"inputs":[],"output":{"name":"stdio"}}],[11,"inherit","","The child inherits from the corresponding parent descriptor.",238,{"inputs":[],"output":{"name":"stdio"}}],[11,"null","","This stream will be ignored. This is the equivalent of attaching the\nstream to `/dev/null`",238,{"inputs":[],"output":{"name":"stdio"}}],[11,"fmt","","",237,null],[11,"clone","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"success","","Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",237,null],[11,"code","","Returns the exit code of the process, if any.",237,null],[11,"fmt","","",237,null],[11,"kill","","Forces the child to exit. This is equivalent to sending a\nSIGKILL on unix platforms.",258,null],[11,"id","","Returns the OS-assigned process identifier associated with this child.",258,null],[11,"wait","","Waits for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",258,null],[11,"wait_with_output","","Simultaneously waits for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning an `Output`\ninstance.",258,null],[11,"new","std::sync::mpsc::select","Creates a new selection structure. This set is initially empty.",259,{"inputs":[],"output":{"name":"select"}}],[11,"handle","","Creates a new handle into this receiver set for a new receiver. Note\nthat this does *not* add the receiver to the receiver set, for that you\nmust call the `add` method on the handle itself.",259,null],[11,"wait","","Waits for an event on this receiver set. The returned value is *not* an\nindex, but rather an id. This id can be queried against any active\n`Handle` structures (each one has an `id` method). The handle with\nthe matching `id` will have some sort of event available on it. The\nevent could either be that data is available or the corresponding\nchannel has been closed.",259,null],[11,"id","","Retrieves the id of this handle.",260,null],[11,"recv","","Blocks to receive a value on the underlying receiver, returning `Some` on\nsuccess or `None` if the channel disconnects. This function has the same\nsemantics as `Receiver.recv`",260,null],[11,"add","","Adds this handle to the receiver set that the handle was created from. This\nmethod can be called multiple times, but it has no effect if `add` was\ncalled previously.",260,null],[11,"remove","","Removes this handle from the `Select` set. This method is unsafe because\nit has no guarantee that the `Handle` was not moved since `add` was\ncalled.",260,null],[11,"drop","","",259,null],[11,"drop","","",260,null],[11,"fmt","","",259,null],[11,"fmt","","",260,null],[11,"clone","std::sync::mpsc","",261,null],[11,"eq","","",261,null],[11,"ne","","",261,null],[11,"fmt","","",262,null],[11,"clone","","",262,null],[11,"eq","","",262,null],[11,"fmt","","",263,null],[11,"clone","","",263,null],[11,"eq","","",263,null],[11,"fmt","","",264,null],[11,"clone","","",264,null],[11,"eq","","",264,null],[11,"clone","","",265,null],[11,"eq","","",265,null],[11,"ne","","",265,null],[11,"send","","Attempts to send a value on this channel, returning it back if it could\nnot be sent.",266,null],[11,"clone","","",266,null],[11,"drop","","",266,null],[11,"fmt","","",266,null],[11,"send","","Sends a value on this synchronous channel.",267,null],[11,"try_send","","Attempts to send a value on this channel without blocking.",267,null],[11,"clone","","",267,null],[11,"drop","","",267,null],[11,"fmt","","",267,null],[11,"try_recv","","Attempts to return a pending value on this receiver without blocking",268,null],[11,"recv","","Attempts to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up.",268,null],[11,"recv_timeout","","Attempts to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up, or if it waits more than `timeout`.",268,null],[11,"iter","","Returns an iterator that will block waiting for messages, but never\n`panic!`. It will return `None` when the channel has hung up.",268,null],[11,"next","","",269,null],[11,"next","","",270,null],[11,"into_iter","","",268,null],[11,"drop","","",268,null],[11,"fmt","","",268,null],[11,"fmt","","",261,null],[11,"fmt","","",261,null],[11,"description","","",261,null],[11,"cause","","",261,null],[11,"fmt","","",265,null],[11,"fmt","","",265,null],[11,"description","","",265,null],[11,"cause","","",265,null],[11,"fmt","","",262,null],[11,"description","","",262,null],[11,"cause","","",262,null],[11,"fmt","","",263,null],[11,"description","","",263,null],[11,"cause","","",263,null],[11,"new","std::sync::barrier","Creates a new barrier that can block a given number of threads.",271,{"inputs":[{"name":"usize"}],"output":{"name":"barrier"}}],[11,"wait","","Blocks the current thread until all threads have rendezvoused here.",271,null],[11,"is_leader","","Returns whether this thread from `wait` is the &quot;leader thread&quot;.",272,null],[11,"clone","std::sync::condvar","",273,null],[11,"eq","","",273,null],[11,"ne","","",273,null],[11,"fmt","","",273,null],[11,"timed_out","","Returns whether the wait was known to have timed out.",273,null],[11,"new","","Creates a new condition variable which is ready to be waited on and\nnotified.",274,{"inputs":[],"output":{"name":"condvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",274,null],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",274,null],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",274,null],[11,"notify_one","","Wakes up one blocked thread on this condvar.",274,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",274,null],[11,"default","","",274,{"inputs":[],"output":{"name":"condvar"}}],[11,"drop","","",274,null],[11,"new","","Creates a new condition variable",275,{"inputs":[],"output":{"name":"staticcondvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",275,null],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",275,null],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",275,null],[11,"notify_one","","Wakes up one blocked thread on this condvar.",275,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",275,null],[11,"destroy","","Deallocates all resources associated with this static condvar.",275,null],[11,"new","std::sync::mutex","Creates a new mutex in an unlocked state ready for use.",276,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",276,null],[11,"try_lock","","Attempts to acquire this lock.",276,null],[11,"is_poisoned","","Determines whether the lock is poisoned.",276,null],[11,"into_inner","","Consumes this mutex, returning the underlying data.",276,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",276,null],[11,"drop","","",276,null],[11,"default","","",276,{"inputs":[],"output":{"name":"mutex"}}],[11,"fmt","","",276,null],[11,"new","","Creates a new mutex in an unlocked state ready for use.",277,{"inputs":[],"output":{"name":"staticmutex"}}],[11,"lock","","Acquires this lock, see `Mutex::lock`",277,null],[11,"try_lock","","Attempts to grab this lock, see `Mutex::try_lock`",277,null],[11,"destroy","","Deallocates resources associated with this static mutex.",277,null],[11,"deref","","",278,null],[11,"deref_mut","","",278,null],[11,"drop","","",278,null],[11,"new","std::sync::once","Creates a new `Once` value.",279,{"inputs":[],"output":{"name":"once"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.",279,null],[11,"call_once_force","","Performs the same function as `call_once` except ignores poisoning.",279,null],[11,"poisoned","","Returns whether the associated `Once` has been poisoned.",280,null],[11,"new","std::sync::rwlock","Creates a new instance of an `RwLock&lt;T&gt;` which is unlocked.",281,{"inputs":[{"name":"t"}],"output":{"name":"rwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",281,null],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",281,null],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",281,null],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",281,null],[11,"is_poisoned","","Determines whether the lock is poisoned.",281,null],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",281,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",281,null],[11,"drop","","",281,null],[11,"fmt","","",281,null],[11,"default","","",281,{"inputs":[],"output":{"name":"rwlock"}}],[11,"new","","Creates a new rwlock.",282,{"inputs":[],"output":{"name":"staticrwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",282,null],[11,"try_read","","Attempts to acquire this lock with shared read access.",282,null],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",282,null],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",282,null],[11,"destroy","","Deallocates all resources associated with this static lock.",282,null],[11,"deref","","",283,null],[11,"deref","","",284,null],[11,"deref_mut","","",284,null],[11,"drop","","",283,null],[11,"drop","","",284,null],[11,"hash","std::time::duration","",285,null],[11,"fmt","","",285,null],[11,"cmp","","",285,null],[11,"partial_cmp","","",285,null],[11,"lt","","",285,null],[11,"le","","",285,null],[11,"gt","","",285,null],[11,"ge","","",285,null],[11,"eq","","",285,null],[11,"ne","","",285,null],[11,"clone","","",285,null],[11,"new","","Creates a new `Duration` from the specified number of seconds and\nadditional nanosecond precision.",285,{"inputs":[{"name":"u64"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"from_secs","","Creates a new `Duration` from the specified number of seconds.",285,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_millis","","Creates a new `Duration` from the specified number of milliseconds.",285,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"as_secs","","Returns the number of whole seconds represented by this duration.",285,null],[11,"subsec_nanos","","Returns the nanosecond precision represented by this duration.",285,null],[11,"add","","",285,null],[11,"add_assign","","",285,null],[11,"sub","","",285,null],[11,"sub_assign","","",285,null],[11,"mul","","",285,null],[11,"mul_assign","","",285,null],[11,"div","","",285,null],[11,"div_assign","","",285,null],[11,"cmp","std::time","",286,null],[11,"partial_cmp","","",286,null],[11,"lt","","",286,null],[11,"le","","",286,null],[11,"gt","","",286,null],[11,"ge","","",286,null],[11,"eq","","",286,null],[11,"ne","","",286,null],[11,"clone","","",286,null],[11,"cmp","","",287,null],[11,"partial_cmp","","",287,null],[11,"lt","","",287,null],[11,"le","","",287,null],[11,"gt","","",287,null],[11,"ge","","",287,null],[11,"eq","","",287,null],[11,"ne","","",287,null],[11,"clone","","",287,null],[11,"fmt","","",288,null],[11,"clone","","",288,null],[11,"now","","Returns an instant corresponding to &quot;now&quot;.",286,{"inputs":[],"output":{"name":"instant"}}],[11,"duration_since","","Returns the amount of time elapsed from another instant to this one.",286,null],[11,"elapsed","","Returns the amount of time elapsed since this instant was created.",286,null],[11,"add","","",286,null],[11,"add_assign","","",286,null],[11,"sub","","",286,null],[11,"sub_assign","","",286,null],[11,"sub","","",286,null],[11,"fmt","","",286,null],[11,"now","","Returns the system time corresponding to &quot;now&quot;.",287,{"inputs":[],"output":{"name":"systemtime"}}],[11,"duration_since","","Returns the amount of time elapsed from an earlier point in time.",287,null],[11,"elapsed","","Returns the amount of time elapsed since this system time was created.",287,null],[11,"add","","",287,null],[11,"add_assign","","",287,null],[11,"sub","","",287,null],[11,"sub_assign","","",287,null],[11,"fmt","","",287,null],[11,"duration","","Returns the positive duration which represents how far forward the\nsecond system time was from the first.",288,null],[11,"description","","",288,null],[11,"fmt","","",288,null],[11,"fmt","std::sys_common::poison","",289,null],[11,"fmt","","",289,null],[11,"description","","",289,null],[11,"new","","Creates a `PoisonError`.",289,{"inputs":[{"name":"t"}],"output":{"name":"poisonerror"}}],[11,"into_inner","","Consumes this error indicating that a lock is poisoned, returning the\nunderlying guard to allow access regardless.",289,null],[11,"get_ref","","Reaches into this error indicating that a lock is poisoned, returning a\nreference to the underlying guard to allow access regardless.",289,null],[11,"get_mut","","Reaches into this error indicating that a lock is poisoned, returning a\nmutable reference to the underlying guard to allow access regardless.",289,null],[11,"from","","",290,{"inputs":[{"name":"poisonerror"}],"output":{"name":"trylockerror"}}],[11,"fmt","","",290,null],[11,"fmt","","",290,null],[11,"description","","",290,null],[11,"cause","","",290,null],[11,"clone","libc::unix","",291,null],[11,"clone","","",292,null],[11,"clone","","",293,null],[11,"clone","","",294,null],[11,"clone","","",295,null],[11,"clone","","",296,null],[11,"clone","","",297,null],[11,"clone","","",298,null],[11,"clone","","",299,null],[11,"clone","","",300,null],[11,"clone","","",301,null],[11,"clone","","",302,null],[11,"clone","","",303,null],[11,"clone","libc::unix::notbsd","",304,null],[11,"clone","","",305,null],[11,"clone","","",306,null],[11,"clone","","",307,null],[11,"clone","","",308,null],[11,"clone","","",309,null],[11,"clone","","",310,null],[11,"clone","","",311,null],[11,"clone","","",312,null],[11,"clone","","",313,null],[11,"clone","","",314,null],[11,"clone","","",315,null],[11,"clone","","",316,null],[11,"clone","","",317,null],[11,"clone","","",318,null],[11,"clone","libc::unix::notbsd::linux","",319,null],[11,"clone","","",320,null],[11,"clone","","",321,null],[11,"clone","","",322,null],[11,"clone","","",323,null],[11,"clone","","",324,null],[11,"clone","","",325,null],[11,"clone","","",326,null],[11,"clone","","",327,null],[11,"clone","","",328,null],[11,"clone","","",329,null],[11,"clone","","",330,null],[11,"clone","","",331,null],[11,"clone","","",332,null],[11,"clone","","",333,null],[11,"clone","","",334,null],[11,"clone","libc::unix::notbsd::linux::other","",335,null],[11,"clone","","",336,null],[11,"clone","","",337,null],[11,"clone","","",338,null],[11,"clone","","",339,null],[11,"clone","","",340,null],[11,"clone","","",341,null],[11,"clone","","",342,null],[11,"clone","","",343,null],[11,"clone","","",344,null],[11,"clone","","",345,null],[11,"clone","libc::unix::notbsd::linux::other::b64","",346,null],[11,"clone","","",347,null],[11,"clone","libc::unix::notbsd::linux::other::b64::x86_64","",348,null],[11,"clone","","",349,null],[11,"clone","","",350,null],[11,"clone","","",351,null],[11,"clone","","",352,null],[11,"clone","","",353,null],[11,"clone","","",354,null],[11,"clone","","",355,null],[11,"payload","std::panicking","Returns the payload associated with the panic.",356,null],[11,"location","","Returns information about the location from which the panic originated,\nif available.",356,null],[11,"file","","Returns the name of the source file from which the panic originated.",357,null],[11,"line","","Returns the line number from which the panic originated.",357,null],[11,"next","rustc_unicode::char","",358,null],[11,"next","","",359,null],[11,"clone","","",360,null],[11,"eq","","",126,null],[11,"ne","","",126,null],[11,"clone","","",126,null],[11,"fmt","","",126,null],[11,"next","","",360,null],[11,"size_hint","","",360,null],[11,"unpaired_surrogate","","Returns the unpaired surrogate which caused this error.",126,null],[11,"fmt","","",126,null],[11,"borrow","collections::borrow","",188,null],[11,"clone","","",188,null],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",188,null],[11,"into_owned","","Extracts the owned data.",188,null],[11,"deref","","",188,null],[11,"cmp","","",188,null],[11,"eq","","",188,null],[11,"partial_cmp","","",188,null],[11,"fmt","","",188,null],[11,"fmt","","",188,null],[11,"default","","",188,{"inputs":[],"output":{"name":"cow"}}],[11,"hash","","",188,null],[11,"as_ref","","",188,null],[11,"new","alloc::rc","Constructs a new `Rc&lt;T&gt;`.",361,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc&lt;T&gt;` has exactly one strong reference.",361,{"inputs":[{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",361,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"downgrade","","Creates a new `Weak&lt;T&gt;` reference from this value.",361,{"inputs":[{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",361,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",361,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak&lt;T&gt;` values that share\nthe same inner value.",361,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc&lt;T&gt;` has\none strong reference and no weak references.",361,{"inputs":[{"name":"rc"}],"output":{"name":"option"}}],[11,"make_mut","","Make a mutable reference into the given `Rc&lt;T&gt;` by cloning the inner\ndata if the `Rc&lt;T&gt;` doesn&#39;t have one strong reference and no weak\nreferences.",361,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",361,null],[11,"drop","","Drops the `Rc&lt;T&gt;`.",361,null],[11,"clone","","Makes a clone of the `Rc&lt;T&gt;`.",361,null],[11,"default","","Creates a new `Rc&lt;T&gt;`, with the `Default` value for `T`.",361,{"inputs":[],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc&lt;T&gt;`s.",361,null],[11,"ne","","Inequality for two `Rc&lt;T&gt;`s.",361,null],[11,"partial_cmp","","Partial comparison for two `Rc&lt;T&gt;`s.",361,null],[11,"lt","","Less-than comparison for two `Rc&lt;T&gt;`s.",361,null],[11,"le","","&#39;Less-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",361,null],[11,"gt","","Greater-than comparison for two `Rc&lt;T&gt;`s.",361,null],[11,"ge","","&#39;Greater-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",361,null],[11,"cmp","","Comparison for two `Rc&lt;T&gt;`s.",361,null],[11,"hash","","",361,null],[11,"fmt","","",361,null],[11,"fmt","","",361,null],[11,"fmt","","",361,null],[11,"from","","",361,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"new","","Constructs a new `Weak&lt;T&gt;` without an accompanying instance of T.",362,{"inputs":[],"output":{"name":"weak"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",362,null],[11,"drop","","Drops the `Weak&lt;T&gt;`.",362,null],[11,"clone","","Makes a clone of the `Weak&lt;T&gt;`.",362,null],[11,"fmt","","",362,null],[11,"default","","",362,{"inputs":[],"output":{"name":"weak"}}],[11,"borrow","","",361,null],[11,"as_ref","","",361,null],[11,"clone","alloc::boxed","",363,null],[11,"pointer","","",364,null],[11,"make_place","","",364,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",364,null],[11,"finalize","","",122,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",363,null],[11,"drop","","",364,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",122,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",122,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",122,null],[11,"default","","",122,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",122,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",122,null],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",122,null],[11,"clone","","",122,null],[11,"eq","","",122,null],[11,"ne","","",122,null],[11,"partial_cmp","","",122,null],[11,"lt","","",122,null],[11,"le","","",122,null],[11,"ge","","",122,null],[11,"gt","","",122,null],[11,"cmp","","",122,null],[11,"hash","","",122,null],[11,"from","","",122,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",122,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",122,null],[11,"fmt","","",122,null],[11,"fmt","","",122,null],[11,"fmt","","",122,null],[11,"deref","","",122,null],[11,"deref_mut","","",122,null],[11,"next","","",122,null],[11,"size_hint","","",122,null],[11,"next_back","","",122,null],[11,"call_once","","",122,null],[11,"call_once","","",122,null],[11,"clone","","",122,null],[11,"borrow","","",122,null],[11,"borrow_mut","","",122,null],[11,"as_ref","","",122,null],[11,"as_mut","","",122,null],[11,"clone","collections::str","",365,null],[11,"next","","",365,null],[11,"size_hint","","",365,null],[11,"borrow","collections::string","",189,null],[11,"borrow","collections::vec","",161,null],[11,"borrow_mut","","",161,null],[11,"cmp","collections::string","",189,null],[11,"partial_cmp","","",189,null],[11,"lt","","",189,null],[11,"le","","",189,null],[11,"gt","","",189,null],[11,"ge","","",189,null],[11,"fmt","","",123,null],[11,"fmt","","",124,null],[11,"new","","Creates a new empty `String`.",189,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",189,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",189,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",189,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",189,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",189,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",189,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",189,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",189,null],[11,"as_str","","Extracts a string slice containing the entire string.",189,null],[11,"as_mut_str","","Extracts a string slice containing the entire string.",189,null],[11,"push_str","","Appends a given string slice onto the end of this `String`.",189,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",189,null],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",189,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",189,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",189,null],[11,"push","","Appends the given `char` to the end of this `String`.",189,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",189,null],[11,"truncate","","Shortens this `String` to the specified length.",189,null],[11,"pop","","Removes the last character from the string buffer and returns it.",189,null],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",189,null],[11,"insert","","Inserts a character into this `String` at a byte position.",189,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",189,null],[11,"len","","Returns the length of this `String`, in bytes.",189,null],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",189,null],[11,"clear","","Truncates this `String`, removing all contents.",189,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",189,null],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",189,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",123,null],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",123,null],[11,"fmt","","",123,null],[11,"fmt","","",124,null],[11,"clone","","",189,null],[11,"clone_from","","",189,null],[11,"from_iter","","",189,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",189,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",189,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",189,null],[11,"extend","","",189,null],[11,"extend","","",189,null],[11,"extend","","",189,null],[11,"eq","","",189,null],[11,"ne","","",189,null],[11,"eq","","",189,null],[11,"ne","","",189,null],[11,"eq","","",189,null],[11,"ne","","",189,null],[11,"eq","collections::borrow","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","collections::string","",189,null],[11,"ne","","",189,null],[11,"default","","",189,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",189,null],[11,"fmt","","",189,null],[11,"hash","","",189,null],[11,"add","","",189,null],[11,"index","","",189,null],[11,"index","","",189,null],[11,"index","","",189,null],[11,"index","","",189,null],[11,"index","","",189,null],[11,"index","","",189,null],[11,"index_mut","","",189,null],[11,"index_mut","","",189,null],[11,"index_mut","","",189,null],[11,"index_mut","","",189,null],[11,"index_mut","","",189,null],[11,"index_mut","","",189,null],[11,"deref","","",189,null],[11,"deref_mut","","",189,null],[11,"from_str","","",189,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",125,null],[11,"fmt","","",125,null],[11,"fmt","","",125,null],[11,"eq","","",125,null],[11,"as_ref","","",189,null],[11,"as_ref","","",189,null],[11,"from","","",189,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",188,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",188,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",189,null],[11,"write_str","","",189,null],[11,"write_char","","",189,null],[11,"drop","","",366,null],[11,"next","","",366,null],[11,"size_hint","","",366,null],[11,"next_back","","",366,null],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",161,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",161,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",161,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",161,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",161,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",161,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",161,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",161,null],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",161,null],[11,"as_slice","","Extracts a slice containing the entire vector.",161,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",161,null],[11,"set_len","","Sets the length of a vector.",161,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",161,null],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",161,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",161,null],[11,"retain","","Retains only the elements specified by the predicate.",161,null],[11,"push","","Appends an element to the back of a collection.",161,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",161,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",161,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",161,null],[11,"clear","","Clears the vector, removing all values.",161,null],[11,"len","","Returns the number of elements in the vector.",161,null],[11,"is_empty","","Returns `true` if the vector contains no elements.",161,null],[11,"split_off","","Splits the collection into two at the given index.",161,null],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",161,null],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",161,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",161,null],[11,"clone","","",161,null],[11,"clone_from","","",161,null],[11,"hash","","",161,null],[11,"index","","",161,null],[11,"index_mut","","",161,null],[11,"index","","",161,null],[11,"index","","",161,null],[11,"index","","",161,null],[11,"index","","",161,null],[11,"index","","",161,null],[11,"index","","",161,null],[11,"index_mut","","",161,null],[11,"index_mut","","",161,null],[11,"index_mut","","",161,null],[11,"index_mut","","",161,null],[11,"index_mut","","",161,null],[11,"index_mut","","",161,null],[11,"deref","","",161,null],[11,"deref_mut","","",161,null],[11,"from_iter","","",161,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",161,null],[11,"extend","","",161,null],[11,"extend","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","collections::borrow","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","collections::vec","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"partial_cmp","","",161,null],[11,"cmp","","",161,null],[11,"drop","","",161,null],[11,"default","","",161,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",161,null],[11,"as_ref","","",161,null],[11,"as_mut","","",161,null],[11,"as_ref","","",161,null],[11,"as_mut","","",161,null],[11,"from","","",161,null],[11,"from","","",161,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",188,null],[11,"from","","",188,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",188,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"next","collections::vec","",367,null],[11,"size_hint","","",367,null],[11,"count","","",367,null],[11,"next_back","","",367,null],[11,"clone","","",367,null],[11,"drop","","",367,null],[11,"next","","",368,null],[11,"size_hint","","",368,null],[11,"next_back","","",368,null],[11,"drop","","",368,null],[11,"cause","void::coreprovider::error","The lower-level cause of this error, if any.",121,null],[8,"ResultVoidExt","void","Extensions to `Result&lt;T, Void&gt;`",null,null],[10,"void_unwrap","","Get the value out of a wrapper.",369,null],[8,"ResultVoidErrExt","","Extensions to `Result&lt;Void, E&gt;`",null,null],[10,"void_unwrap_err","","Get the error out of a wrapper.",370,null],[11,"clone","","",371,null],[11,"fmt","","",371,null],[11,"fmt","","",371,null],[11,"eq","","",371,null],[11,"partial_cmp","","",371,null],[11,"description","","",371,null],[11,"cause","","",371,null],[11,"void_unwrap","core::result","Get the value out of an always-ok Result.",68,null],[11,"void_unwrap_err","","Get the error out of an always-err Result.",68,null]],"paths":[[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"Write"],[8,"PartialEq"],[8,"PartialOrd"],[8,"Error"],[3,"Box"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"DecodeUtf16Error"],[3,"EscapeDefault"],[4,"LocalKeyState"],[3,"LocalKey"],[3,"Key"],[3,"Key"],[3,"Builder"],[3,"Thread"],[3,"JoinHandle"],[3,"HashMap"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"IterMut"],[3,"IntoIter"],[3,"ValuesMut"],[3,"Drain"],[4,"Entry"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"RandomState"],[3,"DefaultHasher"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"PeekMut"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Vec"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"Iter"],[3,"IntoIter"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"Vars"],[3,"VarsOs"],[4,"VarError"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"ArgsOs"],[3,"CString"],[3,"CStr"],[3,"NulError"],[3,"FromBytesWithNulError"],[3,"IntoStringError"],[3,"Error"],[3,"OsString"],[3,"OsStr"],[4,"Cow"],[3,"String"],[3,"Metadata"],[3,"OpenOptions"],[3,"Permissions"],[3,"FileType"],[3,"File"],[3,"ReadDir"],[3,"DirEntry"],[3,"DirBuilder"],[3,"BufReader"],[3,"IntoInnerError"],[3,"BufWriter"],[3,"LineWriter"],[3,"Cursor"],[4,"ErrorKind"],[3,"Empty"],[3,"Repeat"],[3,"Sink"],[3,"Stdin"],[3,"StdinLock"],[3,"Stdout"],[3,"StdoutLock"],[3,"Stderr"],[3,"StderrLock"],[4,"SeekFrom"],[3,"Chain"],[3,"Take"],[3,"Bytes"],[4,"CharsError"],[3,"Chars"],[3,"Split"],[3,"Lines"],[4,"IpAddr"],[4,"Ipv6MulticastScope"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[4,"SocketAddr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"UdpSocket"],[3,"AddrParseError"],[4,"Shutdown"],[3,"LookupHost"],[3,"stat"],[3,"Command"],[3,"ExitStatus"],[3,"Stdio"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"ChildStderr"],[3,"SocketAddr"],[3,"UnixStream"],[3,"UnixListener"],[3,"Incoming"],[3,"UnixDatagram"],[3,"AssertUnwindSafe"],[4,"Prefix"],[3,"PrefixComponent"],[4,"Component"],[3,"Components"],[3,"Iter"],[3,"PathBuf"],[3,"Path"],[3,"StripPrefixError"],[3,"Display"],[3,"Output"],[3,"Child"],[3,"Select"],[3,"Handle"],[3,"SendError"],[3,"RecvError"],[4,"TryRecvError"],[4,"RecvTimeoutError"],[4,"TrySendError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"Iter"],[3,"IntoIter"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"StaticCondvar"],[3,"Mutex"],[3,"StaticMutex"],[3,"MutexGuard"],[3,"Once"],[3,"OnceState"],[3,"RwLock"],[3,"StaticRwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"Duration"],[3,"Instant"],[3,"SystemTime"],[3,"SystemTimeError"],[3,"PoisonError"],[4,"TryLockError"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"fd_set"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"fsid_t"],[3,"mq_attr"],[3,"cpu_set_t"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"sigset_t"],[3,"sysinfo"],[3,"stat"],[3,"stat64"],[3,"pthread_attr_t"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"PanicInfo"],[3,"Location"],[3,"ToLowercase"],[3,"ToUppercase"],[3,"DecodeUtf16"],[3,"Rc"],[3,"Weak"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"EncodeUtf16"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
searchIndex["slog_json"] = {"doc":"Json formatter for `slog-rs`","items":[[3,"Json","slog_json","Json formatter",null,null],[3,"JsonBuilder","","Json formatter builder",null,null],[5,"new","","Short for `Json::new()`",null,{"inputs":[],"output":{"name":"json"}}],[5,"build","","Short for `Json::build()`",null,{"inputs":[],"output":{"name":"jsonbuilder"}}],[11,"new","","Create new `Json` format.",0,{"inputs":[],"output":{"name":"self"}}],[11,"build","","Build a Json formatter with custom settings",0,{"inputs":[],"output":{"name":"jsonbuilder"}}],[11,"new_nonewline","","Create new `Json` format that does not add\nnewlines after each record.",0,{"inputs":[],"output":{"name":"self"}}],[11,"build","","Build `Json` format",1,null],[11,"set_newlines","","Set writing a newline after ever log record",1,null],[11,"add_key_values","","Add custom values to be printed with this formatter",1,null],[11,"add_key_value","","Add custom values to be printed with this formatter",1,null],[11,"format","","",0,null]],"paths":[[3,"Json"],[3,"JsonBuilder"]]};
searchIndex["slog_serde"] = {"doc":"Serde serialization adapter for slog-rs","items":[[3,"SerdeSerializer","slog_serde","slog-rs&#39;s `Serializer` adapter for `serde::Serializer`",null,null],[12,"0","","",0,null],[11,"emit_bool","","",0,null],[11,"emit_unit","","",0,null],[11,"emit_char","","",0,null],[11,"emit_none","","",0,null],[11,"emit_u8","","",0,null],[11,"emit_i8","","",0,null],[11,"emit_u16","","",0,null],[11,"emit_i16","","",0,null],[11,"emit_usize","","",0,null],[11,"emit_isize","","",0,null],[11,"emit_u32","","",0,null],[11,"emit_i32","","",0,null],[11,"emit_f32","","",0,null],[11,"emit_u64","","",0,null],[11,"emit_i64","","",0,null],[11,"emit_f64","","",0,null],[11,"emit_str","","",0,null]],"paths":[[3,"SerdeSerializer"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[14,"bitflags!","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
searchIndex["serde_json"] = {"doc":"JSON and serialization","items":[[0,"builder","serde_json","JSON Builders",null,null],[3,"ArrayBuilder","serde_json::builder","This structure provides a simple interface for constructing a JSON array.",null,null],[3,"ObjectBuilder","","This structure provides a simple interface for constructing a JSON object.",null,null],[11,"new","","Construct an `ObjectBuilder`.",0,{"inputs":[],"output":{"name":"arraybuilder"}}],[11,"unwrap","","Return the constructed `Value`.",0,null],[11,"push","","Insert a value into the array.",0,null],[11,"push_array","","Creates and passes an `ArrayBuilder` into a closure, then inserts the resulting array into\nthis array.",0,null],[11,"push_object","","Creates and passes an `ArrayBuilder` into a closure, then inserts the resulting object into\nthis array.",0,null],[11,"new","","Construct an `ObjectBuilder`.",1,{"inputs":[],"output":{"name":"objectbuilder"}}],[11,"unwrap","","Return the constructed `Value`.",1,null],[11,"insert","","Insert a key-value pair into the object.",1,null],[11,"insert_array","","Creates and passes an `ObjectBuilder` into a closure, then inserts the resulting array into\nthis object.",1,null],[11,"insert_object","","Creates and passes an `ObjectBuilder` into a closure, then inserts the resulting object into\nthis object.",1,null],[0,"de","serde_json","JSON Deserialization",null,null],[3,"Deserializer","serde_json::de","A structure that deserializes JSON into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",null,null],[5,"from_iter","","Decodes a json value from an iterator over an iterator\n`Iterator&lt;Item=io::Result&lt;u8&gt;&gt;`.",null,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[5,"from_reader","","Decodes a json value from a `std::io::Read`.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Decodes a json value from a byte slice `&amp;[u8]`.",null,null],[5,"from_str","","Decodes a json value from a `&amp;str`.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Creates the JSON parser from an `std::iter::Iterator`.",2,{"inputs":[{"name":"iter"}],"output":{"name":"deserializer"}}],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized.\nThis allows the `Deserializer` to validate that the input stream is at the end or that it\nonly has trailing whitespace.",2,null],[11,"deserialize","","",2,null],[11,"deserialize_option","","Parses a `null` as a None, and any other values as a `Some(...)`.",2,null],[11,"deserialize_newtype_struct","","Parses a newtype struct as the underlying value.",2,null],[11,"deserialize_enum","","Parses an enum as an object like `{&quot;$KEY&quot;:$VALUE}`, where $VALUE is either a straight\nvalue, a `[..]`, or a `{..}`.",2,null],[11,"visit_variant","","",2,null],[11,"visit_unit","","",2,null],[11,"visit_newtype","","",2,null],[11,"visit_tuple","","",2,null],[11,"visit_struct","","",2,null],[11,"new","","Returns an `Iterator` of decoded JSON values from an iterator over\n`Iterator&lt;Item=io::Result&lt;u8&gt;&gt;`.",3,{"inputs":[{"name":"iter"}],"output":{"name":"streamdeserializer"}}],[11,"next","","",3,null],[0,"error","serde_json","JSON Errors",null,null],[4,"ErrorCode","serde_json::error","The errors that can arise while parsing a JSON stream.",null,null],[13,"Custom","","Catchall for syntax error messages",4,null],[13,"InvalidType","","Incorrect type from value",4,null],[13,"InvalidValue","","Incorrect value",4,null],[13,"InvalidLength","","Invalid length",4,null],[13,"UnknownVariant","","Unknown variant in an enum.",4,null],[13,"UnknownField","","Unknown field in struct.",4,null],[13,"MissingField","","Struct is missing a field.",4,null],[13,"EOFWhileParsingList","","EOF while parsing a list.",4,null],[13,"EOFWhileParsingObject","","EOF while parsing an object.",4,null],[13,"EOFWhileParsingString","","EOF while parsing a string.",4,null],[13,"EOFWhileParsingValue","","EOF while parsing a JSON value.",4,null],[13,"ExpectedColon","","Expected this character to be a `&#39;:&#39;`.",4,null],[13,"ExpectedListCommaOrEnd","","Expected this character to be either a `&#39;,&#39;` or a `]`.",4,null],[13,"ExpectedObjectCommaOrEnd","","Expected this character to be either a `&#39;,&#39;` or a `}`.",4,null],[13,"ExpectedSomeIdent","","Expected to parse either a `true`, `false`, or a `null`.",4,null],[13,"ExpectedSomeValue","","Expected this character to start a JSON value.",4,null],[13,"InvalidEscape","","Invalid hex escape code.",4,null],[13,"InvalidNumber","","Invalid number.",4,null],[13,"InvalidUnicodeCodePoint","","Invalid unicode code point.",4,null],[13,"KeyMustBeAString","","Object key is not a string.",4,null],[13,"LoneLeadingSurrogateInHexEscape","","Lone leading surrogate in hex escape.",4,null],[13,"TrailingCharacters","","JSON has non-whitespace trailing characters after the value.",4,null],[13,"UnexpectedEndOfHexEscape","","Unexpected end of hex excape.",4,null],[4,"Error","","This type represents all possible errors that can occur when serializing or deserializing a\nvalue into JSON.",null,null],[13,"Syntax","","The JSON value had some syntatic error.",5,null],[13,"Io","","Some IO error occurred when serializing or deserializing a value.",5,null],[13,"FromUtf8","","Some UTF8 error occurred while serializing or deserializing a value.",5,null],[6,"Result","","Helper alias for `Result` objects that return a JSON `Error`.",null,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",5,null],[11,"description","","",5,null],[11,"cause","","",5,null],[11,"fmt","","",5,null],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",5,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"custom","","",5,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"end_of_stream","","",5,{"inputs":[],"output":{"name":"error"}}],[11,"invalid_type","","",5,{"inputs":[{"name":"type"}],"output":{"name":"error"}}],[11,"invalid_value","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"invalid_length","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"error"}}],[11,"unknown_variant","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"unknown_field","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"missing_field","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"custom","","Raised when there is general error when deserializing a type.",5,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[0,"ser","serde_json","JSON Serialization",null,null],[3,"Serializer","serde_json::ser","A structure for serializing Rust values into JSON.",null,null],[3,"CompactFormatter","","This structure compacts a JSON value with no extra whitespace.",null,null],[3,"PrettyFormatter","","This structure pretty prints a JSON value to make it human readable.",null,null],[5,"escape_bytes","","DEPRECATED. Will be removed in 0.8.0.\nhttps://github.com/serde-rs/json/issues/60",null,null],[5,"escape_str","","Serializes and escapes a `&amp;str` into a JSON string.",null,{"inputs":[{"name":"w"},{"name":"str"}],"output":{"name":"result"}}],[5,"to_writer","","Encode the specified struct into a json `[u8]` writer.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer_pretty","","Encode the specified struct into a json `[u8]` writer.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec","","Encode the specified struct into a json `[u8]` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec_pretty","","Encode the specified struct into a json `[u8]` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string","","Encode the specified struct into a json `String` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string_pretty","","Encode the specified struct into a json `String` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[8,"Formatter","","This trait abstracts away serializing the JSON control characters, which allows the user to\noptionally pretty print the JSON output.",null,null],[10,"open","","Called when serializing a &#39;{&#39; or &#39;[&#39;.",6,null],[10,"comma","","Called when serializing a &#39;,&#39;.",6,null],[10,"colon","","Called when serializing a &#39;:&#39;.",6,null],[10,"close","","Called when serializing a &#39;}&#39; or &#39;]&#39;.",6,null],[11,"new","","Creates a new JSON serializer.",7,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"pretty","","Creates a new JSON pretty print serializer.",7,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"with_formatter","","Creates a new JSON visitor whose output will be written to the writer\nspecified.",7,{"inputs":[{"name":"w"},{"name":"f"}],"output":{"name":"self"}}],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",7,null],[11,"serialize_bool","","",7,null],[11,"serialize_isize","","",7,null],[11,"serialize_i8","","",7,null],[11,"serialize_i16","","",7,null],[11,"serialize_i32","","",7,null],[11,"serialize_i64","","",7,null],[11,"serialize_usize","","",7,null],[11,"serialize_u8","","",7,null],[11,"serialize_u16","","",7,null],[11,"serialize_u32","","",7,null],[11,"serialize_u64","","",7,null],[11,"serialize_f32","","",7,null],[11,"serialize_f64","","",7,null],[11,"serialize_char","","",7,null],[11,"serialize_str","","",7,null],[11,"serialize_none","","",7,null],[11,"serialize_some","","",7,null],[11,"serialize_unit","","",7,null],[11,"serialize_newtype_struct","","Override `visit_newtype_struct` to serialize newtypes without an object wrapper.",7,null],[11,"serialize_unit_variant","","",7,null],[11,"serialize_newtype_variant","","",7,null],[11,"serialize_seq","","",7,null],[11,"serialize_tuple_variant","","",7,null],[11,"serialize_seq_elt","","",7,null],[11,"serialize_map","","",7,null],[11,"serialize_struct_variant","","",7,null],[11,"serialize_map_elt","","",7,null],[11,"open","","",8,null],[11,"comma","","",8,null],[11,"colon","","",8,null],[11,"close","","",8,null],[11,"new","","Construct a pretty printer formatter that defaults to using two spaces for indentation.",9,{"inputs":[],"output":{"name":"self"}}],[11,"with_indent","","Construct a pretty printer formatter that uses the `indent` string for indentation.",9,null],[11,"open","","",9,null],[11,"comma","","",9,null],[11,"colon","","",9,null],[11,"close","","",9,null],[0,"value","serde_json","JSON Value",null,null],[3,"Serializer","serde_json::value","Create a `serde::Serializer` that serializes a `Serialize`e into a `Value`.",null,null],[3,"Deserializer","","Creates a `serde::Deserializer` from a `json::Value` object.",null,null],[4,"Value","","Represents a JSON value",null,null],[13,"Null","","Represents a JSON null value",10,null],[13,"Bool","","Represents a JSON Boolean",10,null],[13,"I64","","Represents a JSON signed integer",10,null],[13,"U64","","Represents a JSON unsigned integer",10,null],[13,"F64","","Represents a JSON floating point number",10,null],[13,"String","","Represents a JSON string",10,null],[13,"Array","","Represents a JSON array",10,null],[13,"Object","","Represents a JSON object",10,null],[5,"to_value","","Shortcut function to encode a `T` into a JSON `Value`",null,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[5,"from_value","","Shortcut function to decode a JSON `Value` into a `T`",null,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[6,"Map","","Represents a key/value type.",null,null],[6,"MapIntoIter","","Represents the IntoIter type.",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",11,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"clone","","",10,null],[11,"find","","If the `Value` is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",10,null],[11,"find_path","","Attempts to get a nested Value Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the `Value` associated with the final key.",10,null],[11,"lookup","","**Deprecated**: Use `Value.pointer()` and pointer syntax instead.",10,null],[11,"pointer","","Looks up a value by a JSON Pointer.",10,null],[11,"search","","If the `Value` is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the `Value` is not an Object, returns None.",10,null],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",10,null],[11,"as_object","","If the `Value` is an Object, returns the associated Map.\nReturns None otherwise.",10,null],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map.\nReturns None otherwise.",10,null],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",10,null],[11,"as_array","","If the `Value` is an Array, returns the associated vector.\nReturns None otherwise.",10,null],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector.\nReturns None otherwise.",10,null],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",10,null],[11,"as_string","","If the `Value` is a String, returns the associated str.\nReturns None otherwise.",10,null],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",10,null],[11,"is_i64","","Returns true if the `Value` is a i64. Returns false otherwise.",10,null],[11,"is_u64","","Returns true if the `Value` is a u64. Returns false otherwise.",10,null],[11,"is_f64","","Returns true if the `Value` is a f64. Returns false otherwise.",10,null],[11,"as_i64","","If the `Value` is a number, return or cast it to a i64.\nReturns None otherwise.",10,null],[11,"as_u64","","If the `Value` is a number, return or cast it to a u64.\nReturns None otherwise.",10,null],[11,"as_f64","","If the `Value` is a number, return or cast it to a f64.\nReturns None otherwise.",10,null],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",10,null],[11,"as_boolean","","If the `Value` is a Boolean, returns the associated bool.\nReturns None otherwise.",10,null],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",10,null],[11,"as_null","","If the `Value` is a Null, returns ().\nReturns None otherwise.",10,null],[11,"serialize","","",10,null],[11,"deserialize","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","Serializes a json value into a string",10,null],[11,"fmt","","Serializes a json value into a string",10,null],[11,"from_str","","",10,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Serializer`.",12,{"inputs":[],"output":{"name":"serializer"}}],[11,"unwrap","","Unwrap the `Serializer` and return the `Value`.",12,null],[11,"serialize_bool","","",12,null],[11,"serialize_i64","","",12,null],[11,"serialize_u64","","",12,null],[11,"serialize_f64","","",12,null],[11,"serialize_char","","",12,null],[11,"serialize_str","","",12,null],[11,"serialize_none","","",12,null],[11,"serialize_some","","",12,null],[11,"serialize_unit","","",12,null],[11,"serialize_unit_variant","","",12,null],[11,"serialize_newtype_variant","","",12,null],[11,"serialize_seq","","",12,null],[11,"serialize_tuple_variant","","",12,null],[11,"serialize_seq_elt","","",12,null],[11,"serialize_map","","",12,null],[11,"serialize_struct_variant","","",12,null],[11,"serialize_map_elt","","",12,null],[11,"new","","Creates a new deserializer instance for deserializing the specified JSON value.",13,{"inputs":[{"name":"value"}],"output":{"name":"deserializer"}}],[11,"deserialize","","",13,null],[11,"deserialize_option","","",13,null],[11,"deserialize_enum","","",13,null],[11,"deserialize_newtype_struct","","",13,null]],"paths":[[3,"ArrayBuilder"],[3,"ObjectBuilder"],[3,"Deserializer"],[3,"StreamDeserializer"],[4,"ErrorCode"],[4,"Error"],[8,"Formatter"],[3,"Serializer"],[3,"CompactFormatter"],[3,"PrettyFormatter"],[4,"Value"],[8,"ToJson"],[3,"Serializer"],[3,"Deserializer"]]};
searchIndex["itoa"] = {"doc":"","items":[[5,"write","itoa","",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"name":"result"}}],[8,"Integer","","",null,null],[10,"write","","",0,null]],"paths":[[8,"Integer"]]};
searchIndex["serde"] = {"doc":"Serde Serialization Framework","items":[[11,"hash","core::num","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",0,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"eq","core::num::dec2flt","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"fmt","core::num","",2,null],[11,"eq","","",2,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"hash","core::nonzero","",5,null],[11,"fmt","","",5,null],[11,"partial_cmp","","",5,null],[11,"lt","","",5,null],[11,"le","","",5,null],[11,"gt","","",5,null],[11,"ge","","",5,null],[11,"cmp","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",5,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",5,null],[11,"new","core::ptr","Creates a new `Unique`.",6,null],[11,"get","","Dereferences the content.",6,null],[11,"get_mut","","Mutably dereferences the content.",6,null],[11,"deref","","",6,null],[11,"fmt","","",6,null],[11,"new","","Creates a new `Shared`.",7,null],[11,"clone","","",7,null],[11,"deref","","",7,null],[11,"fmt","","",7,null],[11,"hash","core::marker","",8,null],[11,"eq","","",8,null],[11,"partial_cmp","","",8,null],[11,"cmp","","",8,null],[11,"clone","","",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"hash","core::ops","",9,null],[11,"eq","","",9,null],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"hash","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"contains","","# Examples",10,null],[11,"hash","","",11,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"contains","","# Examples",11,null],[11,"hash","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"clone","","",12,null],[11,"fmt","","",12,null],[11,"contains","","# Examples",12,null],[11,"hash","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"contains","","# Examples",13,null],[11,"hash","","",14,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"clone","","",14,null],[11,"fmt","","",14,null],[11,"contains","","# Examples",14,null],[11,"hash","core::cmp","",15,null],[11,"fmt","","",15,null],[11,"eq","","",15,null],[11,"clone","","",15,null],[11,"reverse","","Reverse the `Ordering`.",15,null],[11,"cmp","","",15,null],[11,"partial_cmp","","",15,null],[11,"fmt","serde::core","",16,null],[11,"fmt","","",16,null],[11,"is","","Returns true if the boxed type is the same as `T`",16,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,null],[11,"is","","Forwards to the method defined on the type `Any`.",16,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",16,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",16,null],[11,"hash","core::any","",17,null],[11,"fmt","","",17,null],[11,"eq","","",17,null],[11,"ne","","",17,null],[11,"clone","","",17,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",17,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",18,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",20,null],[11,"clone","","",20,null],[11,"new","","Creates a new `AtomicBool`.",18,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",18,null],[11,"store","","Stores a value into the bool.",18,null],[11,"swap","","Stores a value into the bool, returning the old value.",18,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",18,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",18,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",18,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",18,null],[11,"new","","Creates a new `AtomicPtr`.",19,null],[11,"load","","Loads a value from the pointer.",19,null],[11,"store","","Stores a value into the pointer.",19,null],[11,"swap","","Stores a value into the pointer, returning the old value.",19,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"default","","",21,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",21,null],[11,"new","","Creates a new atomic integer.",21,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",21,null],[11,"store","","Stores a value into the atomic integer.",21,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",21,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"fetch_add","","Add to the current value, returning the previous value.",21,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",21,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",21,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",21,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",21,null],[11,"default","","",22,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",22,null],[11,"new","","Creates a new atomic integer.",22,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",22,null],[11,"store","","Stores a value into the atomic integer.",22,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",22,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"fetch_add","","Add to the current value, returning the previous value.",22,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",22,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",22,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",22,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",22,null],[11,"default","","",23,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",23,null],[11,"new","","Creates a new atomic integer.",23,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",23,null],[11,"store","","Stores a value into the atomic integer.",23,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",23,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"fetch_add","","Add to the current value, returning the previous value.",23,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",23,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",23,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",23,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",23,null],[11,"default","","",24,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",24,null],[11,"new","","Creates a new atomic integer.",24,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",24,null],[11,"store","","Stores a value into the atomic integer.",24,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",24,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"fetch_add","","Add to the current value, returning the previous value.",24,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",24,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",24,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",24,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",24,null],[11,"default","","",25,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",25,null],[11,"new","","Creates a new atomic integer.",25,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",25,null],[11,"store","","Stores a value into the atomic integer.",25,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",25,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"fetch_add","","Add to the current value, returning the previous value.",25,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",25,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",25,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",25,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",25,null],[11,"default","","",26,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",26,null],[11,"new","","Creates a new atomic integer.",26,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",26,null],[11,"store","","Stores a value into the atomic integer.",26,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",26,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"fetch_add","","Add to the current value, returning the previous value.",26,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",26,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",26,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",26,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",26,null],[11,"default","","",27,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",27,null],[11,"new","","Creates a new atomic integer.",27,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",27,null],[11,"store","","Stores a value into the atomic integer.",27,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",27,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"fetch_add","","Add to the current value, returning the previous value.",27,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",27,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",27,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",27,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",27,null],[11,"default","","",28,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",28,null],[11,"new","","Creates a new atomic integer.",28,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",28,null],[11,"store","","Stores a value into the atomic integer.",28,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",28,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"fetch_add","","Add to the current value, returning the previous value.",28,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",28,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",28,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",28,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",28,null],[11,"default","","",29,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",29,null],[11,"new","","Creates a new atomic integer.",29,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",29,null],[11,"store","","Stores a value into the atomic integer.",29,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",29,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"fetch_add","","Add to the current value, returning the previous value.",29,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",29,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",29,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",29,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",29,null],[11,"default","","",30,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",30,null],[11,"new","","Creates a new atomic integer.",30,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",30,null],[11,"store","","Stores a value into the atomic integer.",30,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",30,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"fetch_add","","Add to the current value, returning the previous value.",30,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",30,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",30,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",30,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",30,null],[11,"fmt","","",18,null],[11,"fmt","","",19,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",31,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",31,null],[11,"set","","Sets the contained value.",31,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",31,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",31,null],[11,"clone","","",31,null],[11,"default","","",31,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",31,null],[11,"partial_cmp","","",31,null],[11,"lt","","",31,null],[11,"le","","",31,null],[11,"gt","","",31,null],[11,"ge","","",31,null],[11,"cmp","","",31,null],[11,"fmt","","",32,null],[11,"eq","","",32,null],[11,"clone","","",32,null],[11,"new","","Creates a new `RefCell` containing `value`.",33,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",33,null],[11,"borrow_state","","Query the current state of this `RefCell`",33,null],[11,"borrow","","Immutably borrows the wrapped value.",33,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",33,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",33,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",33,null],[11,"clone","","",33,null],[11,"default","","",33,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",33,null],[11,"partial_cmp","","",33,null],[11,"lt","","",33,null],[11,"le","","",33,null],[11,"gt","","",33,null],[11,"ge","","",33,null],[11,"cmp","","",33,null],[11,"deref","","",34,null],[11,"clone","","Copies a `Ref`.",34,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",34,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",35,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"deref","","",35,null],[11,"deref_mut","","",35,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",36,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",36,null],[11,"get","","Gets a mutable pointer to the wrapped value.",36,null],[11,"default","","",36,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",37,null],[11,"clone","","",37,null],[11,"next","","",37,null],[11,"size_hint","","",37,null],[11,"count","","",37,null],[11,"last","","",37,null],[11,"len","","",37,null],[11,"fmt","","",38,null],[11,"clone","","",38,null],[11,"next","","",38,null],[11,"size_hint","","",38,null],[11,"count","","",38,null],[11,"nth","","",38,null],[11,"last","","",38,null],[11,"len","","",38,null],[11,"fmt","","",39,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",39,null],[11,"next","","",39,null],[11,"size_hint","","",39,null],[11,"fmt","","",40,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",40,null],[11,"next","","",40,null],[11,"size_hint","","",40,null],[11,"fmt","core::iter::range","",41,null],[11,"clone","","",41,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",11,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",10,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",13,null],[11,"next","core::iter::range","",41,null],[11,"size_hint","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next","core::ops","",10,null],[11,"size_hint","","",10,null],[11,"next_back","","",10,null],[11,"next","","",11,null],[11,"next","","",13,null],[11,"size_hint","","",13,null],[11,"next_back","","",13,null],[11,"fmt","core::iter::sources","",42,null],[11,"clone","","",42,null],[11,"next","","",42,null],[11,"size_hint","","",42,null],[11,"next_back","","",42,null],[11,"fmt","","",43,null],[11,"next","","",43,null],[11,"size_hint","","",43,null],[11,"next_back","","",43,null],[11,"len","","",43,null],[11,"clone","","",43,null],[11,"default","","",43,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",44,null],[11,"clone","","",44,null],[11,"next","","",44,null],[11,"size_hint","","",44,null],[11,"next_back","","",44,null],[11,"len","","",44,null],[11,"fmt","core::iter","",45,null],[11,"clone","","",45,null],[11,"next","","",45,null],[11,"size_hint","","",45,null],[11,"next_back","","",45,null],[11,"fmt","","",46,null],[11,"clone","","",46,null],[11,"next","","",46,null],[11,"size_hint","","",46,null],[11,"next_back","","",46,null],[11,"fmt","","",47,null],[11,"clone","","",47,null],[11,"next","","",47,null],[11,"size_hint","","",47,null],[11,"fmt","","",48,null],[11,"clone","","",48,null],[11,"next","","",48,null],[11,"count","","",48,null],[11,"nth","","",48,null],[11,"find","","",48,null],[11,"last","","",48,null],[11,"size_hint","","",48,null],[11,"next_back","","",48,null],[11,"fmt","","",49,null],[11,"clone","","",49,null],[11,"next","","",49,null],[11,"size_hint","","",49,null],[11,"next_back","","",49,null],[11,"clone","","",50,null],[11,"fmt","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next_back","","",50,null],[11,"clone","","",51,null],[11,"fmt","","",51,null],[11,"next","","",51,null],[11,"size_hint","","",51,null],[11,"next_back","","",51,null],[11,"clone","","",52,null],[11,"fmt","","",52,null],[11,"next","","",52,null],[11,"size_hint","","",52,null],[11,"next_back","","",52,null],[11,"fmt","","",53,null],[11,"clone","","",53,null],[11,"next","","# Overflow Behavior",53,null],[11,"size_hint","","",53,null],[11,"nth","","",53,null],[11,"count","","",53,null],[11,"next_back","","",53,null],[11,"fmt","","",54,null],[11,"clone","","",54,null],[11,"next","","",54,null],[11,"count","","",54,null],[11,"nth","","",54,null],[11,"last","","",54,null],[11,"size_hint","","",54,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",54,null],[11,"is_empty","","Checks if the iterator has finished iterating.",54,null],[11,"clone","","",55,null],[11,"fmt","","",55,null],[11,"next","","",55,null],[11,"size_hint","","",55,null],[11,"clone","","",56,null],[11,"fmt","","",56,null],[11,"next","","",56,null],[11,"size_hint","","",56,null],[11,"fmt","","",57,null],[11,"clone","","",57,null],[11,"next","","",57,null],[11,"nth","","",57,null],[11,"count","","",57,null],[11,"last","","",57,null],[11,"size_hint","","",57,null],[11,"next_back","","",57,null],[11,"fmt","","",58,null],[11,"clone","","",58,null],[11,"next","","",58,null],[11,"nth","","",58,null],[11,"size_hint","","",58,null],[11,"clone","","",59,null],[11,"fmt","","",59,null],[11,"next","","",59,null],[11,"size_hint","","",59,null],[11,"clone","","",60,null],[11,"fmt","","",60,null],[11,"next","","",60,null],[11,"size_hint","","",60,null],[11,"next_back","","",60,null],[11,"fmt","","",61,null],[11,"clone","","",61,null],[11,"next","","",61,null],[11,"nth","","",61,null],[11,"last","","",61,null],[11,"count","","",61,null],[11,"size_hint","","",61,null],[11,"next_back","","",61,null],[11,"clone","","",62,null],[11,"fmt","","",62,null],[11,"next","","",62,null],[11,"size_hint","","",62,null],[11,"next_back","","",62,null],[11,"hash","core::option","",63,null],[11,"fmt","","",63,null],[11,"cmp","","",63,null],[11,"partial_cmp","","",63,null],[11,"lt","","",63,null],[11,"le","","",63,null],[11,"gt","","",63,null],[11,"ge","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"clone","","",63,null],[11,"is_some","","Returns `true` if the option is a `Some` value",63,null],[11,"is_none","","Returns `true` if the option is a `None` value",63,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",63,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",63,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",63,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",63,null],[11,"unwrap_or","","Returns the contained value or a default.",63,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",63,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",63,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",63,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",63,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",63,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",63,null],[11,"iter","","Returns an iterator over the possibly contained value.",63,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",63,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",63,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",63,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",63,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",63,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",63,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",63,null],[11,"unwrap_or_default","","Returns the contained value or a default",63,null],[11,"default","","",63,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",63,null],[11,"fmt","","",64,null],[11,"next","","",64,null],[11,"size_hint","","",64,null],[11,"next_back","","",64,null],[11,"clone","","",64,null],[11,"fmt","","",65,null],[11,"next","","",65,null],[11,"size_hint","","",65,null],[11,"next_back","","",65,null],[11,"fmt","","",66,null],[11,"clone","","",66,null],[11,"next","","",66,null],[11,"size_hint","","",66,null],[11,"next_back","","",66,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",63,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",67,null],[11,"hash","core::result","",68,null],[11,"fmt","","",68,null],[11,"cmp","","",68,null],[11,"partial_cmp","","",68,null],[11,"lt","","",68,null],[11,"le","","",68,null],[11,"gt","","",68,null],[11,"ge","","",68,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"clone","","",68,null],[11,"is_ok","","Returns true if the result is `Ok`",68,null],[11,"is_err","","Returns true if the result is `Err`",68,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",68,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",68,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",68,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",68,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",68,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",68,null],[11,"iter","","Returns an iterator over the possibly contained value.",68,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",68,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",68,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",68,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",68,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",68,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",68,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",68,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",68,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",68,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",68,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",68,null],[11,"fmt","","",69,null],[11,"next","","",69,null],[11,"size_hint","","",69,null],[11,"next_back","","",69,null],[11,"clone","","",69,null],[11,"fmt","","",70,null],[11,"next","","",70,null],[11,"size_hint","","",70,null],[11,"next_back","","",70,null],[11,"fmt","","",71,null],[11,"next","","",71,null],[11,"size_hint","","",71,null],[11,"next_back","","",71,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",68,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",72,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",72,null],[11,"next","","",72,null],[11,"size_hint","","",72,null],[11,"count","","",72,null],[11,"nth","","",72,null],[11,"last","","",72,null],[11,"next_back","","",72,null],[11,"clone","","",72,null],[11,"fmt","","",73,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",73,null],[11,"next","","",73,null],[11,"size_hint","","",73,null],[11,"count","","",73,null],[11,"nth","","",73,null],[11,"last","","",73,null],[11,"next_back","","",73,null],[11,"fmt","","",74,null],[11,"clone","","",74,null],[11,"next","","",74,null],[11,"size_hint","","",74,null],[11,"next_back","","",74,null],[11,"fmt","","",75,null],[11,"next","","",75,null],[11,"size_hint","","",75,null],[11,"next_back","","",75,null],[11,"fmt","","",76,null],[11,"fmt","","",77,null],[11,"fmt","","",78,null],[11,"fmt","","",79,null],[11,"next","","",76,null],[11,"size_hint","","",76,null],[11,"next","","",77,null],[11,"size_hint","","",77,null],[11,"next","","",78,null],[11,"size_hint","","",78,null],[11,"next","","",79,null],[11,"size_hint","","",79,null],[11,"fmt","","",80,null],[11,"clone","","",80,null],[11,"next","","",80,null],[11,"size_hint","","",80,null],[11,"count","","",80,null],[11,"nth","","",80,null],[11,"last","","",80,null],[11,"next_back","","",80,null],[11,"fmt","","",81,null],[11,"clone","","",81,null],[11,"next","","",81,null],[11,"size_hint","","",81,null],[11,"count","","",81,null],[11,"nth","","",81,null],[11,"last","","",81,null],[11,"next_back","","",81,null],[11,"fmt","","",82,null],[11,"next","","",82,null],[11,"size_hint","","",82,null],[11,"count","","",82,null],[11,"nth","","",82,null],[11,"last","","",82,null],[11,"next_back","","",82,null],[11,"fmt","core::str::pattern","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"clone","","",83,null],[11,"fmt","","",84,null],[11,"clone","","",84,null],[11,"haystack","","",84,null],[11,"next","","",84,null],[11,"next_match","","",84,null],[11,"next_reject","","",84,null],[11,"next_back","","",84,null],[11,"next_match_back","","",84,null],[11,"next_reject_back","","",84,null],[11,"fmt","","",85,null],[11,"clone","","",85,null],[11,"haystack","","",85,null],[11,"next","","",85,null],[11,"next_match","","",85,null],[11,"next_reject","","",85,null],[11,"next_back","","",85,null],[11,"next_match_back","","",85,null],[11,"next_reject_back","","",85,null],[11,"clone","","",86,null],[11,"fmt","","",86,null],[11,"haystack","","",86,null],[11,"next","","",86,null],[11,"next_match","","",86,null],[11,"next_reject","","",86,null],[11,"next_back","","",86,null],[11,"next_match_back","","",86,null],[11,"next_reject_back","","",86,null],[11,"fmt","","",87,null],[11,"clone","","",87,null],[11,"haystack","","",87,null],[11,"next","","",87,null],[11,"next_match","","",87,null],[11,"next_back","","",87,null],[11,"next_match_back","","",87,null],[11,"eq","core::str","",88,null],[11,"ne","","",88,null],[11,"clone","","",88,null],[11,"fmt","","",88,null],[11,"fmt","","",88,null],[11,"fmt","","",89,null],[11,"clone","","",89,null],[11,"eq","","",89,null],[11,"ne","","",89,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",89,null],[11,"fmt","","",89,null],[11,"fmt","","",90,null],[11,"clone","","",90,null],[11,"next","","",90,null],[11,"size_hint","","",90,null],[11,"next_back","","",90,null],[11,"as_str","","View the underlying data as a subslice of the original data.",90,null],[11,"fmt","","",91,null],[11,"clone","","",91,null],[11,"next","","",91,null],[11,"size_hint","","",91,null],[11,"next_back","","",91,null],[11,"as_str","","View the underlying data as a subslice of the original data.",91,null],[11,"fmt","","",92,null],[11,"clone","","",92,null],[11,"next","","",92,null],[11,"size_hint","","",92,null],[11,"count","","",92,null],[11,"last","","",92,null],[11,"nth","","",92,null],[11,"next_back","","",92,null],[11,"len","","",92,null],[11,"fmt","","",93,null],[11,"next","","",93,null],[11,"clone","","",93,null],[11,"fmt","","",94,null],[11,"next","","",94,null],[11,"clone","","",94,null],[11,"next_back","","",93,null],[11,"next_back","","",94,null],[11,"fmt","","",95,null],[11,"next","","",95,null],[11,"clone","","",95,null],[11,"fmt","","",96,null],[11,"next","","",96,null],[11,"clone","","",96,null],[11,"next_back","","",95,null],[11,"next_back","","",96,null],[11,"fmt","","",97,null],[11,"next","","",97,null],[11,"clone","","",97,null],[11,"fmt","","",98,null],[11,"next","","",98,null],[11,"clone","","",98,null],[11,"fmt","","",99,null],[11,"next","","",99,null],[11,"clone","","",99,null],[11,"fmt","","",100,null],[11,"next","","",100,null],[11,"clone","","",100,null],[11,"next_back","","",99,null],[11,"next_back","","",100,null],[11,"fmt","","",101,null],[11,"next","","",101,null],[11,"clone","","",101,null],[11,"fmt","","",102,null],[11,"next","","",102,null],[11,"clone","","",102,null],[11,"next_back","","",101,null],[11,"next_back","","",102,null],[11,"fmt","","",103,null],[11,"clone","","",103,null],[11,"next","","",103,null],[11,"size_hint","","",103,null],[11,"next_back","","",103,null],[11,"fmt","","",104,null],[11,"clone","","",104,null],[11,"next","","",104,null],[11,"size_hint","","",104,null],[11,"next_back","","",104,null],[11,"default","core::hash::sip","",105,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"clone","","",105,null],[11,"fmt","","",105,null],[11,"default","","",106,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"clone","","",106,null],[11,"fmt","","",106,null],[11,"default","","",107,{"inputs":[],"output":{"name":"siphasher"}}],[11,"clone","","",107,null],[11,"fmt","","",107,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",107,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",107,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",105,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",105,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",106,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",106,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"write","","",107,null],[11,"finish","","",107,null],[11,"write","","",105,null],[11,"finish","","",105,null],[11,"write","","",106,null],[11,"finish","","",106,null],[11,"fmt","core::hash","",108,null],[11,"build_hasher","","",108,null],[11,"clone","","",108,null],[11,"default","","",108,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",109,null],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",110,null],[11,"finish","","Finishes output and returns any error encountered.",110,null],[11,"field","","Adds a new field to the generated tuple struct output.",111,null],[11,"finish","","Finishes output and returns any error encountered.",111,null],[11,"entry","","Adds a new entry to the set output.",112,null],[11,"entries","","Adds the contents of an iterator of entries to the set output.",112,null],[11,"finish","","Finishes output and returns any error encountered.",112,null],[11,"entry","","Adds a new entry to the list output.",113,null],[11,"entries","","Adds the contents of an iterator of entries to the list output.",113,null],[11,"finish","","Finishes output and returns any error encountered.",113,null],[11,"entry","","Adds a new entry to the map output.",114,null],[11,"entries","","Adds the contents of an iterator of entries to the map output.",114,null],[11,"finish","","Finishes output and returns any error encountered.",114,null],[11,"partial_cmp","core::fmt","",115,null],[11,"eq","","",115,null],[11,"cmp","","",115,null],[11,"hash","","",115,null],[11,"default","","",115,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",115,null],[11,"clone","","",115,null],[11,"clone","","",116,null],[11,"fmt","","",116,null],[11,"fmt","","",116,null],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",117,null],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",117,null],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",117,null],[11,"write_fmt","","Writes some formatted information into this instance",117,null],[11,"flags","","Flags for formatting (packed version of rt::Flag)",117,null],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",117,null],[11,"align","","Flag indicating what form of alignment was requested",117,null],[11,"width","","Optionally specified integer width that the output should be",117,null],[11,"precision","","Optionally specified precision for numeric types",117,null],[11,"sign_plus","","Determines if the `+` flag was specified.",117,null],[11,"sign_minus","","Determines if the `-` flag was specified.",117,null],[11,"alternate","","Determines if the `#` flag was specified.",117,null],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",117,null],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",117,null],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",117,null],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",117,null],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",117,null],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",117,null],[11,"write_str","","",117,null],[11,"write_char","","",117,null],[11,"write_fmt","","",117,null],[11,"fmt","","",115,null],[11,"fmt","core::marker","",8,null],[11,"fmt","core::cell","",31,null],[11,"fmt","","",33,null],[11,"fmt","","",34,null],[11,"fmt","","",35,null],[11,"fmt","","",36,null],[11,"hash_slice","serde::core::hash","Feeds a slice of this type into the state provided.",118,null],[11,"write_u8","","Write a single `u8` into this hasher",119,null],[11,"write_u16","","Write a single `u16` into this hasher.",119,null],[11,"write_u32","","Write a single `u32` into this hasher.",119,null],[11,"write_u64","","Write a single `u64` into this hasher.",119,null],[11,"write_usize","","Write a single `usize` into this hasher.",119,null],[11,"write_i8","","Write a single `i8` into this hasher.",119,null],[11,"write_i16","","Write a single `i16` into this hasher.",119,null],[11,"write_i32","","Write a single `i32` into this hasher.",119,null],[11,"write_i64","","Write a single `i64` into this hasher.",119,null],[11,"write_isize","","Write a single `isize` into this hasher.",119,null],[11,"write_char","serde::core::fmt","Writes a `char` into this writer, returning whether the write succeeded.",120,null],[11,"write_fmt","","Glue for usage of the `write!` macro with implementors of this trait.",120,null],[11,"ne","serde::core::cmp","This method tests for `!=`.",121,null],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `&lt;` operator.",122,null],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `&lt;=`\noperator.",122,null],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `&gt;` operator.",122,null],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `&gt;=`\noperator.",122,null],[11,"clone","rustc_unicode::u_str","",123,null],[11,"new","","Create a UTF-16 encoder from any `char` iterator.",123,{"inputs":[{"name":"i"}],"output":{"name":"utf16encoder"}}],[11,"next","","",123,null],[11,"size_hint","","",123,null],[11,"next","","",124,null],[11,"next_back","","",124,null],[11,"next","rustc_unicode::char","",125,null],[11,"next","","",126,null],[11,"clone","","",127,null],[11,"eq","","",128,null],[11,"ne","","",128,null],[11,"clone","","",128,null],[11,"fmt","","",128,null],[11,"next","","",127,null],[11,"size_hint","","",127,null],[11,"unpaired_surrogate","","Returns the unpaired surrogate which caused this error.",128,null],[11,"fmt","","",128,null],[11,"drop","collections::binary_heap","",129,null],[11,"deref","","",129,null],[11,"deref_mut","","",129,null],[11,"clone","","",130,null],[11,"clone_from","","",130,null],[11,"default","","",130,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",130,null],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",130,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",130,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",130,null],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",130,null],[11,"peek_mut","","Returns a mutable reference to the greatest item in the binary heap, or\n`None` if it is empty.",130,null],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",130,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",130,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",130,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",130,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",130,null],[11,"push","","Pushes an item onto the binary heap.",130,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",130,null],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",130,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",130,null],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",130,null],[11,"len","","Returns the length of the binary heap.",130,null],[11,"is_empty","","Checks if the binary heap is empty.",130,null],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",130,null],[11,"clear","","Drops all items from the binary heap.",130,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",130,null],[11,"clone","","",131,null],[11,"next","","",131,null],[11,"size_hint","","",131,null],[11,"next_back","","",131,null],[11,"clone","","",132,null],[11,"next","","",132,null],[11,"size_hint","","",132,null],[11,"next_back","","",132,null],[11,"next","","",133,null],[11,"size_hint","","",133,null],[11,"next_back","","",133,null],[11,"from","","",130,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",134,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",130,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",130,null],[11,"extend","","",130,null],[11,"extend","","",130,null],[11,"drop","collections::btree::map","",135,null],[11,"clone","","",135,null],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",135,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",135,null],[11,"get","","Returns a reference to the value corresponding to the key.",135,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",135,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",135,null],[11,"insert","","Inserts a key-value pair into the map.",135,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",135,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",135,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",135,null],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",135,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",135,null],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key,\nincluding the key.",135,null],[11,"next","","",136,null],[11,"size_hint","","",136,null],[11,"next_back","","",136,null],[11,"len","","",136,null],[11,"clone","","",136,null],[11,"next","","",137,null],[11,"size_hint","","",137,null],[11,"next_back","","",137,null],[11,"len","","",137,null],[11,"into_iter","","",135,null],[11,"drop","","",138,null],[11,"next","","",138,null],[11,"size_hint","","",138,null],[11,"next_back","","",138,null],[11,"len","","",138,null],[11,"next","","",139,null],[11,"size_hint","","",139,null],[11,"next_back","","",139,null],[11,"len","","",139,null],[11,"clone","","",139,null],[11,"next","","",140,null],[11,"size_hint","","",140,null],[11,"next_back","","",140,null],[11,"len","","",140,null],[11,"clone","","",140,null],[11,"next","","",141,null],[11,"next","","",142,null],[11,"size_hint","","",142,null],[11,"next_back","","",142,null],[11,"len","","",142,null],[11,"next_back","","",141,null],[11,"clone","","",141,null],[11,"next","","",143,null],[11,"next_back","","",143,null],[11,"from_iter","","",135,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",135,null],[11,"extend","","",135,null],[11,"hash","","",135,null],[11,"default","","",135,{"inputs":[],"output":{"name":"btreemap"}}],[11,"eq","","",135,null],[11,"partial_cmp","","",135,null],[11,"cmp","","",135,null],[11,"fmt","","",135,null],[11,"index","","",135,null],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",135,null],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",135,null],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",135,null],[11,"values","","Gets an iterator over the values of the map, in order by key.",135,null],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",135,null],[11,"len","","Returns the number of elements in the map.",135,null],[11,"is_empty","","Returns true if the map contains no elements.",135,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",144,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",144,null],[11,"key","","Returns a reference to this entry&#39;s key.",144,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",145,null],[11,"into_key","","Take ownership of the key.",145,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",145,null],[11,"key","","Gets a reference to the key in the entry.",146,null],[11,"remove_pair","","Take ownership of the key and value from the map.",146,null],[11,"get","","Gets a reference to the value in the entry.",146,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",146,null],[11,"into_mut","","Converts the entry into a mutable reference to its value.",146,null],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",146,null],[11,"remove","","Takes the value of the entry out of the map, and returns it.",146,null],[11,"partial_cmp","collections::btree::set","",147,null],[11,"lt","","",147,null],[11,"le","","",147,null],[11,"gt","","",147,null],[11,"ge","","",147,null],[11,"cmp","","",147,null],[11,"eq","","",147,null],[11,"ne","","",147,null],[11,"hash","","",147,null],[11,"clone","","",147,null],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",147,{"inputs":[],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet&#39;s contents.",147,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",147,null],[11,"difference","","Visits the values representing the difference, in ascending order.",147,null],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",147,null],[11,"intersection","","Visits the values representing the intersection, in ascending order.",147,null],[11,"union","","Visits the values representing the union, in ascending order.",147,null],[11,"len","","Returns the number of elements in the set.",147,null],[11,"is_empty","","Returns true if the set contains no elements.",147,null],[11,"clear","","Clears the set, removing all values.",147,null],[11,"contains","","Returns `true` if the set contains a value.",147,null],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",147,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",147,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",147,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",147,null],[11,"insert","","Adds a value to the set.",147,null],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",147,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",147,null],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",147,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",147,null],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key,\nincluding the key.",147,null],[11,"from_iter","","",147,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet&#39;s contents.",147,null],[11,"extend","","",147,null],[11,"extend","","",147,null],[11,"default","","",147,{"inputs":[],"output":{"name":"btreeset"}}],[11,"fmt","","",147,null],[11,"clone","","",148,null],[11,"next","","",148,null],[11,"size_hint","","",148,null],[11,"next_back","","",148,null],[11,"len","","",148,null],[11,"next","","",149,null],[11,"size_hint","","",149,null],[11,"next_back","","",149,null],[11,"len","","",149,null],[11,"clone","","",150,null],[11,"next","","",150,null],[11,"next_back","","",150,null],[11,"clone","","",151,null],[11,"next","","",151,null],[11,"size_hint","","",151,null],[11,"clone","","",152,null],[11,"next","","",152,null],[11,"size_hint","","",152,null],[11,"clone","","",153,null],[11,"next","","",153,null],[11,"size_hint","","",153,null],[11,"clone","","",154,null],[11,"next","","",154,null],[11,"size_hint","","",154,null],[11,"borrow","collections::borrow","",155,null],[11,"clone","","",155,null],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",155,null],[11,"into_owned","","Extracts the owned data.",155,null],[11,"deref","","",155,null],[11,"cmp","","",155,null],[11,"eq","","",155,null],[11,"partial_cmp","","",155,null],[11,"fmt","","",155,null],[11,"fmt","","",155,null],[11,"default","","",155,{"inputs":[],"output":{"name":"cow"}}],[11,"hash","","",155,null],[11,"as_ref","","",155,null],[11,"hash","collections::enum_set","",156,null],[11,"cmp","","",156,null],[11,"partial_cmp","","",156,null],[11,"lt","","",156,null],[11,"le","","",156,null],[11,"gt","","",156,null],[11,"ge","","",156,null],[11,"eq","","",156,null],[11,"ne","","",156,null],[11,"clone","","",156,null],[11,"fmt","","",156,null],[11,"new","","Returns an empty `EnumSet`.",156,{"inputs":[],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",156,null],[11,"is_empty","","Returns true if the `EnumSet` is empty.",156,null],[11,"clear","","",156,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",156,null],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",156,null],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",156,null],[11,"union","","Returns the union of both `EnumSets`.",156,null],[11,"intersection","","Returns the intersection of both `EnumSets`.",156,null],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn&#39;t there before",156,null],[11,"remove","","Removes an enum from the EnumSet",156,null],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",156,null],[11,"iter","","Returns an iterator over an `EnumSet`.",156,null],[11,"sub","","",156,null],[11,"bitor","","",156,null],[11,"bitand","","",156,null],[11,"bitxor","","",156,null],[11,"clone","","",157,null],[11,"next","","",157,null],[11,"size_hint","","",157,null],[11,"from_iter","","",156,{"inputs":[{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",156,null],[11,"extend","","",156,null],[11,"clone","collections::linked_list","",158,null],[11,"clone","","",159,null],[11,"default","","",160,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",160,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",160,null],[11,"iter","","Provides a forward iterator.",160,null],[11,"iter_mut","","Provides a forward iterator with mutable references.",160,null],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",160,null],[11,"len","","Returns the length of the `LinkedList`.",160,null],[11,"clear","","Removes all elements from the `LinkedList`.",160,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the\ngiven value.",160,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",160,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",160,null],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",160,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",160,null],[11,"push_front","","Adds an element first in the list.",160,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",160,null],[11,"push_back","","Appends an element to the back of a list",160,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",160,null],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",160,null],[11,"front_place","","Returns a place for insertion at the front of the list.",160,null],[11,"back_place","","Returns a place for insertion at the back of the list.",160,null],[11,"drop","","",160,null],[11,"next","","",158,null],[11,"size_hint","","",158,null],[11,"next_back","","",158,null],[11,"next","","",161,null],[11,"size_hint","","",161,null],[11,"next_back","","",161,null],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",161,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",161,null],[11,"next","","",159,null],[11,"size_hint","","",159,null],[11,"next_back","","",159,null],[11,"from_iter","","",160,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",160,null],[11,"extend","","",160,null],[11,"extend","","",160,null],[11,"eq","","",160,null],[11,"ne","","",160,null],[11,"partial_cmp","","",160,null],[11,"cmp","","",160,null],[11,"clone","","",160,null],[11,"fmt","","",160,null],[11,"hash","","",160,null],[11,"make_place","","",162,null],[11,"pointer","","",162,null],[11,"finalize","","",162,null],[11,"make_place","","",163,null],[11,"pointer","","",163,null],[11,"finalize","","",163,null],[11,"start","core::ops","",11,null],[11,"end","","",12,null],[11,"start","","",10,null],[11,"end","","",10,null],[11,"borrow","collections::vec","",134,null],[11,"borrow_mut","","",134,null],[11,"clone","collections::str","",164,null],[11,"next","","",164,null],[11,"size_hint","","",164,null],[11,"borrow","collections::string","",165,null],[11,"cmp","","",165,null],[11,"partial_cmp","","",165,null],[11,"lt","","",165,null],[11,"le","","",165,null],[11,"gt","","",165,null],[11,"ge","","",165,null],[11,"fmt","","",166,null],[11,"fmt","","",167,null],[11,"new","","Creates a new empty `String`.",165,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",165,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",165,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",165,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",165,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",165,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",165,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",165,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",165,null],[11,"as_str","","Extracts a string slice containing the entire string.",165,null],[11,"as_mut_str","","Extracts a string slice containing the entire string.",165,null],[11,"push_str","","Appends a given string slice onto the end of this `String`.",165,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",165,null],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",165,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",165,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",165,null],[11,"push","","Appends the given `char` to the end of this `String`.",165,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",165,null],[11,"truncate","","Shortens this `String` to the specified length.",165,null],[11,"pop","","Removes the last character from the string buffer and returns it.",165,null],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",165,null],[11,"insert","","Inserts a character into this `String` at a byte position.",165,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",165,null],[11,"len","","Returns the length of this `String`, in bytes.",165,null],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",165,null],[11,"clear","","Truncates this `String`, removing all contents.",165,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",165,null],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",165,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",166,null],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",166,null],[11,"fmt","","",166,null],[11,"fmt","","",167,null],[11,"clone","","",165,null],[11,"clone_from","","",165,null],[11,"from_iter","","",165,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",165,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",165,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",165,null],[11,"extend","","",165,null],[11,"extend","","",165,null],[11,"extend","","",165,null],[11,"eq","","",165,null],[11,"ne","","",165,null],[11,"eq","","",165,null],[11,"ne","","",165,null],[11,"eq","","",165,null],[11,"ne","","",165,null],[11,"eq","collections::borrow","",155,null],[11,"ne","","",155,null],[11,"eq","","",155,null],[11,"ne","","",155,null],[11,"eq","","",155,null],[11,"ne","","",155,null],[11,"eq","collections::string","",165,null],[11,"ne","","",165,null],[11,"default","","",165,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",165,null],[11,"fmt","","",165,null],[11,"hash","","",165,null],[11,"add","","",165,null],[11,"index","","",165,null],[11,"index","","",165,null],[11,"index","","",165,null],[11,"index","","",165,null],[11,"index","","",165,null],[11,"index","","",165,null],[11,"index_mut","","",165,null],[11,"index_mut","","",165,null],[11,"index_mut","","",165,null],[11,"index_mut","","",165,null],[11,"index_mut","","",165,null],[11,"index_mut","","",165,null],[11,"deref","","",165,null],[11,"deref_mut","","",165,null],[11,"from_str","","",165,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",168,null],[11,"fmt","","",168,null],[11,"fmt","","",168,null],[11,"eq","","",168,null],[11,"as_ref","","",165,null],[11,"as_ref","","",165,null],[11,"from","","",165,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",155,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",155,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",165,null],[11,"write_str","","",165,null],[11,"write_char","","",165,null],[11,"drop","","",169,null],[11,"next","","",169,null],[11,"size_hint","","",169,null],[11,"next_back","","",169,null],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",134,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",134,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",134,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",134,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",134,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",134,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",134,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",134,null],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",134,null],[11,"as_slice","","Extracts a slice containing the entire vector.",134,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",134,null],[11,"set_len","","Sets the length of a vector.",134,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",134,null],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",134,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",134,null],[11,"retain","","Retains only the elements specified by the predicate.",134,null],[11,"push","","Appends an element to the back of a collection.",134,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",134,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",134,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",134,null],[11,"clear","","Clears the vector, removing all values.",134,null],[11,"len","","Returns the number of elements in the vector.",134,null],[11,"is_empty","","Returns `true` if the vector contains no elements.",134,null],[11,"split_off","","Splits the collection into two at the given index.",134,null],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",134,null],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",134,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",134,null],[11,"clone","","",134,null],[11,"clone_from","","",134,null],[11,"hash","","",134,null],[11,"index","","",134,null],[11,"index_mut","","",134,null],[11,"index","","",134,null],[11,"index","","",134,null],[11,"index","","",134,null],[11,"index","","",134,null],[11,"index","","",134,null],[11,"index","","",134,null],[11,"index_mut","","",134,null],[11,"index_mut","","",134,null],[11,"index_mut","","",134,null],[11,"index_mut","","",134,null],[11,"index_mut","","",134,null],[11,"index_mut","","",134,null],[11,"deref","","",134,null],[11,"deref_mut","","",134,null],[11,"from_iter","","",134,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",134,null],[11,"extend","","",134,null],[11,"extend","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","collections::borrow","",155,null],[11,"ne","","",155,null],[11,"eq","","",155,null],[11,"ne","","",155,null],[11,"eq","","",155,null],[11,"ne","","",155,null],[11,"eq","collections::vec","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"partial_cmp","","",134,null],[11,"cmp","","",134,null],[11,"drop","","",134,null],[11,"default","","",134,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",134,null],[11,"as_ref","","",134,null],[11,"as_mut","","",134,null],[11,"as_ref","","",134,null],[11,"as_mut","","",134,null],[11,"from","","",134,null],[11,"from","","",134,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",155,null],[11,"from","","",155,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",155,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"next","collections::vec","",170,null],[11,"size_hint","","",170,null],[11,"count","","",170,null],[11,"next_back","","",170,null],[11,"clone","","",170,null],[11,"drop","","",170,null],[11,"next","","",171,null],[11,"size_hint","","",171,null],[11,"next_back","","",171,null],[11,"drop","","",171,null],[11,"clone","collections::vec_deque","",172,null],[11,"drop","","",172,null],[11,"default","","",172,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",172,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",172,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",172,null],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",172,null],[11,"swap","","Swaps elements at indices `i` and `j`.",172,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",172,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",172,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",172,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",172,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",172,null],[11,"iter","","Returns a front-to-back iterator.",172,null],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",172,null],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",172,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",172,null],[11,"len","","Returns the number of elements in the `VecDeque`.",172,null],[11,"is_empty","","Returns true if the buffer contains no elements",172,null],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",172,null],[11,"clear","","Clears the buffer, removing all values.",172,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the\ngiven value.",172,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",172,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",172,null],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",172,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",172,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",172,null],[11,"push_front","","Inserts an element first in the sequence.",172,null],[11,"push_back","","Appends an element to the back of a buffer",172,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",172,null],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",172,null],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",172,null],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",172,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",172,null],[11,"split_off","","Splits the collection into two at the given index.",172,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",172,null],[11,"retain","","Retains only the elements specified by the predicate.",172,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",172,null],[11,"clone","","",173,null],[11,"next","","",173,null],[11,"size_hint","","",173,null],[11,"next_back","","",173,null],[11,"next","","",174,null],[11,"size_hint","","",174,null],[11,"next_back","","",174,null],[11,"clone","","",175,null],[11,"next","","",175,null],[11,"size_hint","","",175,null],[11,"next_back","","",175,null],[11,"drop","","",176,null],[11,"next","","",176,null],[11,"size_hint","","",176,null],[11,"next_back","","",176,null],[11,"eq","","",172,null],[11,"partial_cmp","","",172,null],[11,"cmp","","",172,null],[11,"hash","","",172,null],[11,"index","","",172,null],[11,"index_mut","","",172,null],[11,"from_iter","","",172,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",172,null],[11,"extend","","",172,null],[11,"extend","","",172,null],[11,"fmt","","",172,null],[11,"from","","",172,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","collections::vec","",134,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"eq","collections","",177,null],[11,"ne","","",177,null],[11,"hash","","",177,null],[11,"fmt","","",177,null],[11,"clone","","",177,null],[11,"clone","alloc::boxed","",178,null],[11,"pointer","","",179,null],[11,"make_place","","",179,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",179,null],[11,"finalize","","",180,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",178,null],[11,"drop","","",179,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",180,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",180,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",180,null],[11,"default","","",180,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",180,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",180,null],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",180,null],[11,"clone","","",180,null],[11,"eq","","",180,null],[11,"ne","","",180,null],[11,"partial_cmp","","",180,null],[11,"lt","","",180,null],[11,"le","","",180,null],[11,"ge","","",180,null],[11,"gt","","",180,null],[11,"cmp","","",180,null],[11,"hash","","",180,null],[11,"from","","",180,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",180,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",180,null],[11,"fmt","","",180,null],[11,"fmt","","",180,null],[11,"fmt","","",180,null],[11,"deref","","",180,null],[11,"deref_mut","","",180,null],[11,"next","","",180,null],[11,"size_hint","","",180,null],[11,"next_back","","",180,null],[11,"call_once","","",180,null],[11,"call_once","","",180,null],[11,"clone","","",180,null],[11,"borrow","","",180,null],[11,"borrow_mut","","",180,null],[11,"as_ref","","",180,null],[11,"as_mut","","",180,null],[11,"is_contained_in","serde::core::str::pattern","Checks whether the pattern matches anywhere in the haystack",181,null],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",181,null],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",181,null],[11,"next_match","","Find the next `Match` result. See `next()`",182,null],[11,"next_reject","","Find the next `Reject` result. See `next()`",182,null],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",183,null],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",183,null],[11,"size_hint","serde::core::iter","Returns the bounds on the remaining length of the iterator.",184,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",184,null],[11,"last","","Consumes the iterator, returning the last element.",184,null],[11,"nth","","Consumes the `n` first elements of the iterator, then returns the\n`next()` one.",184,null],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",184,null],[11,"zip","","&#39;Zips up&#39; two iterators into a single iterator of pairs.",184,null],[11,"map","","Takes a closure and creates an iterator which calls that closure on each\nelement.",184,null],[11,"filter","","Creates an iterator which uses a closure to determine if an element\nshould be yielded.",184,null],[11,"filter_map","","Creates an iterator that both filters and maps.",184,null],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as\nthe next value.",184,null],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of\nthe iterator without consuming it.",184,null],[11,"skip_while","","Creates an iterator that [`skip()`]s elements based on a predicate.",184,null],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",184,null],[11,"skip","","Creates an iterator that skips the first `n` elements.",184,null],[11,"take","","Creates an iterator that yields its first `n` elements.",184,null],[11,"scan","","An iterator adaptor similar to [`fold()`] that holds internal state and\nproduces a new iterator.",184,null],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",184,null],[11,"fuse","","Creates an iterator which ends after the first `None`.",184,null],[11,"inspect","","Do something with each element of an iterator, passing the value on.",184,null],[11,"by_ref","","Borrows an iterator, rather than consuming it.",184,null],[11,"collect","","Transforms an iterator into a collection.",184,null],[11,"partition","","Consumes an iterator, creating two collections from it.",184,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",184,null],[11,"all","","Tests if every element of the iterator matches a predicate.",184,null],[11,"any","","Tests if any element of the iterator matches a predicate.",184,null],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",184,null],[11,"position","","Searches for an element in an iterator, returning its index.",184,null],[11,"rposition","","Searches for an element in an iterator from the right, returning its\nindex.",184,null],[11,"max","","Returns the maximum element of an iterator.",184,null],[11,"min","","Returns the minimum element of an iterator.",184,null],[11,"max_by_key","","Returns the element that gives the maximum value from the\nspecified function.",184,null],[11,"min_by_key","","Returns the element that gives the minimum value from the\nspecified function.",184,null],[11,"rev","","Reverses an iterator&#39;s direction.",184,null],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",184,null],[11,"cloned","","Creates an iterator which `clone()`s all of its elements.",184,null],[11,"cycle","","Repeats an iterator endlessly.",184,null],[11,"sum","","Sums the elements of an iterator.",184,null],[11,"product","","Iterates over the entire iterator, multiplying all the elements",184,null],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",184,null],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",184,null],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of\nanother.",184,null],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of\nanother.",184,null],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically\nless than those of another.",184,null],[11,"le","","Determines if the elements of this `Iterator` are lexicographically\nless or equal to those of another.",184,null],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically\ngreater than those of another.",184,null],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically\ngreater than or equal to those of another.",184,null],[11,"len","","Returns the exact number of times the iterator will iterate.",185,null],[0,"bytes","serde","Helper module to enable serializing bytes more efficiently",null,null],[3,"ByteBuf","serde::bytes","`ByteBuf` wraps a `Vec&lt;u8&gt;` and serializes as a byte array.",null,null],[3,"ByteBufVisitor","","This type implements the `serde::de::Visitor` trait for a `ByteBuf`.",null,null],[3,"Bytes","","`Bytes` wraps a `&amp;[u8]` in order to serialize into a byte array.",null,null],[11,"cmp","","",186,null],[11,"partial_cmp","","",186,null],[11,"lt","","",186,null],[11,"le","","",186,null],[11,"gt","","",186,null],[11,"ge","","",186,null],[11,"eq","","",186,null],[11,"ne","","",186,null],[11,"hash","","",186,null],[11,"default","","",186,{"inputs":[],"output":{"name":"bytebuf"}}],[11,"clone","","",186,null],[11,"new","","Construct a new, empty `ByteBuf`.",186,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Construct a new, empty `ByteBuf` with the specified capacity.",186,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"fmt","","",186,null],[11,"into","","",186,null],[11,"from","","",186,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"as_ref","","",186,null],[11,"as_ref","","",186,null],[11,"as_mut","","",186,null],[11,"as_mut","","",186,null],[11,"deref","","",186,null],[11,"deref_mut","","",186,null],[11,"serialize","","",186,null],[11,"visit_unit","","",187,null],[11,"visit_seq","","",187,null],[11,"visit_bytes","","",187,null],[11,"visit_byte_buf","","",187,null],[11,"deserialize","","",186,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"cmp","","",188,null],[11,"partial_cmp","","",188,null],[11,"lt","","",188,null],[11,"le","","",188,null],[11,"gt","","",188,null],[11,"ge","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"hash","","",188,null],[11,"clone","","",188,null],[11,"fmt","","",188,null],[11,"from","","",188,null],[11,"from","","",188,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",188,null],[11,"deref","","",188,null],[11,"serialize","","",188,null],[0,"de","serde","Generic deserialization framework.",null,null],[4,"Type","serde::de","`Type` represents all the primitive types that can be deserialized. This is used by\n`Error::invalid_type`.",null,null],[13,"Bool","","Represents a `bool` type.",189,null],[13,"Usize","","Represents a `usize` type.",189,null],[13,"U8","","Represents a `u8` type.",189,null],[13,"U16","","Represents a `u16` type.",189,null],[13,"U32","","Represents a `u32` type.",189,null],[13,"U64","","Represents a `u64` type.",189,null],[13,"Isize","","Represents a `isize` type.",189,null],[13,"I8","","Represents a `i8` type.",189,null],[13,"I16","","Represents a `i16` type.",189,null],[13,"I32","","Represents a `i32` type.",189,null],[13,"I64","","Represents a `i64` type.",189,null],[13,"F32","","Represents a `f32` type.",189,null],[13,"F64","","Represents a `f64` type.",189,null],[13,"Char","","Represents a `char` type.",189,null],[13,"Str","","Represents a `&amp;str` type.",189,null],[13,"String","","Represents a `String` type.",189,null],[13,"Unit","","Represents a `()` type.",189,null],[13,"Option","","Represents an `Option&lt;T&gt;` type.",189,null],[13,"Seq","","Represents a sequence type.",189,null],[13,"Map","","Represents a map type.",189,null],[13,"UnitStruct","","Represents a unit struct type.",189,null],[13,"NewtypeStruct","","Represents a newtype type.",189,null],[13,"TupleStruct","","Represents a tuple struct type.",189,null],[13,"Struct","","Represents a struct type.",189,null],[13,"FieldName","","Represents a struct field name.",189,null],[13,"Tuple","","Represents a tuple type.",189,null],[13,"Enum","","Represents an `enum` type.",189,null],[13,"VariantName","","Represents an enum variant name.",189,null],[13,"StructVariant","","Represents a struct variant.",189,null],[13,"TupleVariant","","Represents a tuple variant.",189,null],[13,"UnitVariant","","Represents a unit variant.",189,null],[13,"Bytes","","Represents a `&amp;[u8]` type.",189,null],[0,"impls","","This module contains `Deserialize` and `Visitor` implementations.",null,null],[3,"UnitVisitor","serde::de::impls","A visitor that produces a `()`.",null,null],[3,"BoolVisitor","","A visitor that produces a `bool`.",null,null],[3,"PhantomDataVisitor","","A visitor that produces a `PhantomData`.",null,null],[3,"BinaryHeapVisitor","","A visitor that produces a sequence.",null,null],[3,"BTreeSetVisitor","","A visitor that produces a sequence.",null,null],[3,"LinkedListVisitor","","A visitor that produces a sequence.",null,null],[3,"HashSetVisitor","","A visitor that produces a sequence.",null,null],[3,"VecVisitor","","A visitor that produces a sequence.",null,null],[3,"VecDequeVisitor","","A visitor that produces a sequence.",null,null],[3,"TupleVisitor1","","Construct a tuple visitor.",null,null],[3,"TupleVisitor2","","Construct a tuple visitor.",null,null],[3,"TupleVisitor3","","Construct a tuple visitor.",null,null],[3,"TupleVisitor4","","Construct a tuple visitor.",null,null],[3,"TupleVisitor5","","Construct a tuple visitor.",null,null],[3,"TupleVisitor6","","Construct a tuple visitor.",null,null],[3,"TupleVisitor7","","Construct a tuple visitor.",null,null],[3,"TupleVisitor8","","Construct a tuple visitor.",null,null],[3,"TupleVisitor9","","Construct a tuple visitor.",null,null],[3,"TupleVisitor10","","Construct a tuple visitor.",null,null],[3,"TupleVisitor11","","Construct a tuple visitor.",null,null],[3,"TupleVisitor12","","Construct a tuple visitor.",null,null],[3,"TupleVisitor13","","Construct a tuple visitor.",null,null],[3,"TupleVisitor14","","Construct a tuple visitor.",null,null],[3,"TupleVisitor15","","Construct a tuple visitor.",null,null],[3,"TupleVisitor16","","Construct a tuple visitor.",null,null],[3,"BTreeMapVisitor","","A visitor that produces a map.",null,null],[3,"HashMapVisitor","","A visitor that produces a map.",null,null],[3,"IgnoredAny","","A target for deserializers that want to ignore data. Implements\nDeserialize and silently eats data given to it.",null,null],[11,"visit_unit","","",190,null],[11,"visit_seq","","",190,null],[11,"visit_bool","","",191,null],[11,"visit_str","","",191,null],[11,"deserialize","collections::string","",165,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","core::option","",63,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"visit_unit","serde::de::impls","",192,null],[11,"deserialize","core::marker","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",193,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",193,null],[11,"visit_seq","","",193,null],[11,"deserialize","collections::binary_heap","",130,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",194,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",194,null],[11,"visit_seq","","",194,null],[11,"deserialize","collections::btree::set","",147,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",195,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",195,null],[11,"visit_seq","","",195,null],[11,"deserialize","collections::linked_list","",160,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",196,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",196,null],[11,"visit_seq","","",196,null],[11,"deserialize","std::collections::hash::set","",197,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",198,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",198,null],[11,"visit_seq","","",198,null],[11,"deserialize","collections::vec","",134,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",199,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",199,null],[11,"visit_seq","","",199,null],[11,"deserialize","collections::vec_deque","",172,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a `TupleVisitor*&lt;T&gt;`.",200,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",200,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",201,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",201,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",202,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",202,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",203,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",203,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",204,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",204,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",205,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",205,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",206,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",206,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",207,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",207,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",208,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",208,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",209,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",209,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",210,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",210,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",211,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",211,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",212,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",212,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",213,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",213,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",214,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",214,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",215,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",215,null],[11,"new","","Construct a `MapVisitor*&lt;T&gt;`.",216,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",216,null],[11,"visit_map","","",216,null],[11,"deserialize","collections::btree::map","",135,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a `MapVisitor*&lt;T&gt;`.",217,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",217,null],[11,"visit_map","","",217,null],[11,"deserialize","std::collections::hash::map","",218,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","std::net::ip","",219,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",220,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","std::net::addr","",221,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",222,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",223,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","std::path","",224,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","alloc::boxed","",180,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",180,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","alloc::arc","",225,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","alloc::rc","",226,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","collections::borrow","",155,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","core::result","",68,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","serde::de::impls","",227,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"value","serde::de","This module supports deserializing from primitives with the `ValueDeserializer` trait.",null,null],[3,"UnitDeserializer","serde::de::value","A helper deserializer that deserializes a `()`.",null,null],[3,"BoolDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"IsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"UsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"CharDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"StrDeserializer","","A helper deserializer that deserializes a `&amp;str`.",null,null],[3,"StringDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"SeqDeserializer","","A helper deserializer that deserializes a sequence.",null,null],[3,"SeqVisitorDeserializer","","A helper deserializer that deserializes a sequence using a `SeqVisitor`.",null,null],[3,"MapDeserializer","","A helper deserializer that deserializes a map.",null,null],[3,"MapVisitorDeserializer","","A helper deserializer that deserializes a map using a `MapVisitor`.",null,null],[3,"BytesDeserializer","","A helper deserializer that deserializes a `&amp;[u8]`.",null,null],[3,"ByteBufDeserializer","","A helper deserializer that deserializes a `Vec&lt;u8&gt;`.",null,null],[4,"Error","","This represents all the possible errors that can occur using the `ValueDeserializer`.",null,null],[13,"Custom","","The value had some custom error.",228,null],[13,"InvalidType","","The value had an incorrect type.",228,null],[13,"InvalidLength","","The value had an invalid length.",228,null],[13,"InvalidValue","","The value is invalid and cannot be deserialized.",228,null],[13,"EndOfStream","","EOF while deserializing a value.",228,null],[13,"UnknownVariant","","Unknown variant in enum.",228,null],[13,"UnknownField","","Unknown field in struct.",228,null],[13,"MissingField","","Struct is missing a field.",228,null],[8,"ValueDeserializer","","This trait converts primitive types into a deserializer.",null,null],[16,"Deserializer","","The actual deserializer type.",229,null],[10,"into_deserializer","","Convert this value into a deserializer.",229,null],[11,"eq","","",228,null],[11,"ne","","",228,null],[11,"fmt","","",228,null],[11,"clone","","",228,null],[11,"custom","","",228,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"end_of_stream","","",228,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_type","","",228,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[11,"invalid_value","","",228,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"invalid_length","","",228,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"unknown_variant","","",228,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"unknown_field","","",228,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"missing_field","","",228,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"fmt","","",228,null],[11,"description","","",228,null],[11,"cause","","",228,null],[11,"deserialize","","",230,null],[11,"deserialize_option","","",230,null],[11,"deserialize","","",231,null],[11,"deserialize","","",232,null],[11,"deserialize","","",233,null],[11,"deserialize","","",234,null],[11,"deserialize","","",235,null],[11,"deserialize","","",236,null],[11,"deserialize","","",237,null],[11,"deserialize","","",238,null],[11,"deserialize","","",239,null],[11,"deserialize","","",240,null],[11,"deserialize","","",241,null],[11,"deserialize","","",242,null],[11,"deserialize","","",243,null],[11,"deserialize","","",244,null],[11,"deserialize","","",245,null],[11,"deserialize_enum","","",245,null],[11,"visit_variant","","",245,null],[11,"visit_unit","","",245,null],[11,"into_deserializer","collections::string","",165,null],[11,"deserialize","serde::de::value","",246,null],[11,"deserialize_enum","","",246,null],[11,"visit_variant","","",246,null],[11,"visit_unit","","",246,null],[11,"new","","Construct a new `SeqDeserializer&lt;I&gt;`.",247,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"deserialize","","",247,null],[11,"visit","","",247,null],[11,"end","","",247,null],[11,"size_hint","","",247,null],[11,"into_deserializer","collections::vec","",134,null],[11,"into_deserializer","collections::btree::set","",147,null],[11,"into_deserializer","std::collections::hash::set","",197,null],[11,"new","serde::de::value","Construct a new `SeqVisitorDeserializer&lt;V_, E&gt;`.",248,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",248,null],[11,"new","","Construct a new `MapDeserializer&lt;I, K, V&gt;`.",249,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"deserialize","","",249,null],[11,"visit_key","","",249,null],[11,"visit_value","","",249,null],[11,"end","","",249,null],[11,"size_hint","","",249,null],[11,"into_deserializer","collections::btree::map","",135,null],[11,"into_deserializer","std::collections::hash::map","",218,null],[11,"new","serde::de::value","Construct a new `MapVisitorDeserializer&lt;V_, E&gt;`.",250,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",250,null],[11,"into_deserializer","serde::bytes","",188,null],[11,"deserialize","serde::de::value","",251,null],[11,"into_deserializer","serde::bytes","",186,null],[11,"deserialize","serde::de::value","",252,null],[8,"Error","serde::de","`Error` is a trait that allows a `Deserialize` to generically create a\n`Deserializer` error.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",253,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[10,"end_of_stream","","Raised when a `Deserialize` type unexpectedly hit the end of the stream.",253,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` was passed an incorrect type.",253,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` was passed an incorrect value.",253,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"invalid_length","","Raised when a fixed sized sequence or map was passed in the wrong amount of arguments.",253,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received an unexpected variant.",253,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"unknown_field","","Raised when a `Deserialize` struct type received an unexpected struct field.",253,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"missing_field","","raised when a `deserialize` struct type did not receive a field.",253,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the\nsame struct field.",253,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Deserialize","","`Deserialize` represents a type that can be deserialized.",null,null],[10,"deserialize","","Deserialize this value given this `Deserializer`.",254,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","`Deserializer` is a trait that can deserialize values by threading a `Visitor` trait through a\nvalue. It supports two entry point styles which enables different kinds of deserialization.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",255,null],[10,"deserialize","","This method walks a visitor through a value as it is being deserialized.",255,null],[11,"deserialize_bool","","This method hints that the `Deserialize` type is expecting a `bool` value.",255,null],[11,"deserialize_usize","","This method hints that the `Deserialize` type is expecting an `usize` value.",255,null],[11,"deserialize_u8","","This method hints that the `Deserialize` type is expecting an `u8` value.",255,null],[11,"deserialize_u16","","This method hints that the `Deserialize` type is expecting an `u16` value.",255,null],[11,"deserialize_u32","","This method hints that the `Deserialize` type is expecting an `u32` value.",255,null],[11,"deserialize_u64","","This method hints that the `Deserialize` type is expecting an `u64` value.",255,null],[11,"deserialize_isize","","This method hints that the `Deserialize` type is expecting an `isize` value.",255,null],[11,"deserialize_i8","","This method hints that the `Deserialize` type is expecting an `i8` value.",255,null],[11,"deserialize_i16","","This method hints that the `Deserialize` type is expecting an `i16` value.",255,null],[11,"deserialize_i32","","This method hints that the `Deserialize` type is expecting an `i32` value.",255,null],[11,"deserialize_i64","","This method hints that the `Deserialize` type is expecting an `i64` value.",255,null],[11,"deserialize_f32","","This method hints that the `Deserialize` type is expecting a `f32` value.",255,null],[11,"deserialize_f64","","This method hints that the `Deserialize` type is expecting a `f64` value.",255,null],[11,"deserialize_char","","This method hints that the `Deserialize` type is expecting a `char` value.",255,null],[11,"deserialize_str","","This method hints that the `Deserialize` type is expecting a `&amp;str` value.",255,null],[11,"deserialize_string","","This method hints that the `Deserialize` type is expecting a `String` value.",255,null],[11,"deserialize_unit","","This method hints that the `Deserialize` type is expecting an `unit` value.",255,null],[11,"deserialize_option","","This method hints that the `Deserialize` type is expecting an `Option` value. This allows\ndeserializers that encode an optional value as a nullable value to convert the null value\ninto a `None`, and a regular value as `Some(value)`.",255,null],[11,"deserialize_seq","","This method hints that the `Deserialize` type is expecting a sequence value. This allows\ndeserializers to parse sequences that aren&#39;t tagged as sequences.",255,null],[11,"deserialize_fixed_size_array","","This method hints that the `Deserialize` type is expecting a fixed size array. This allows\ndeserializers to parse arrays that aren&#39;t tagged as arrays.",255,null],[11,"deserialize_bytes","","This method hints that the `Deserialize` type is expecting a `Vec&lt;u8&gt;`. This allows\ndeserializers that provide a custom byte vector serialization to properly deserialize the\ntype.",255,null],[11,"deserialize_map","","This method hints that the `Deserialize` type is expecting a map of values. This allows\ndeserializers to parse sequences that aren&#39;t tagged as maps.",255,null],[11,"deserialize_unit_struct","","This method hints that the `Deserialize` type is expecting a unit struct. This allows\ndeserializers to a unit struct that aren&#39;t tagged as a unit struct.",255,null],[11,"deserialize_newtype_struct","","This method hints that the `Deserialize` type is expecting a newtype struct. This allows\ndeserializers to a newtype struct that aren&#39;t tagged as a newtype struct.",255,null],[11,"deserialize_tuple_struct","","This method hints that the `Deserialize` type is expecting a tuple struct. This allows\ndeserializers to parse sequences that aren&#39;t tagged as sequences.",255,null],[11,"deserialize_struct","","This method hints that the `Deserialize` type is expecting a struct. This allows\ndeserializers to parse sequences that aren&#39;t tagged as maps.",255,null],[11,"deserialize_struct_field","","This method hints that the `Deserialize` type is expecting some sort of struct field\nname.  This allows deserializers to choose between &amp;str, usize, or &amp;[u8] to properly\ndeserialize a struct field.",255,null],[11,"deserialize_tuple","","This method hints that the `Deserialize` type is expecting a tuple value. This allows\ndeserializers that provide a custom tuple serialization to properly deserialize the type.",255,null],[11,"deserialize_enum","","This method hints that the `Deserialize` type is expecting an enum value. This allows\ndeserializers that provide a custom enumeration serialization to properly deserialize the\ntype.",255,null],[11,"deserialize_ignored_any","","This method hints that the `Deserialize` type needs to deserialize a value whose type\ndoesn&#39;t matter because it is ignored.",255,null],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",256,null],[11,"visit_bool","","`visit_bool` deserializes a `bool` into a `Value`.",256,null],[11,"visit_isize","","`visit_isize` deserializes a `isize` into a `Value`.",256,null],[11,"visit_i8","","`visit_i8` deserializes a `i8` into a `Value`.",256,null],[11,"visit_i16","","`visit_i16` deserializes a `i16` into a `Value`.",256,null],[11,"visit_i32","","`visit_i32` deserializes a `i32` into a `Value`.",256,null],[11,"visit_i64","","`visit_i64` deserializes a `i64` into a `Value`.",256,null],[11,"visit_usize","","`visit_usize` deserializes a `usize` into a `Value`.",256,null],[11,"visit_u8","","`visit_u8` deserializes a `u8` into a `Value`.",256,null],[11,"visit_u16","","`visit_u16` deserializes a `u16` into a `Value`.",256,null],[11,"visit_u32","","`visit_u32` deserializes a `u32` into a `Value`.",256,null],[11,"visit_u64","","`visit_u64` deserializes a `u64` into a `Value`.",256,null],[11,"visit_f32","","`visit_f32` deserializes a `f32` into a `Value`.",256,null],[11,"visit_f64","","`visit_f64` deserializes a `f64` into a `Value`.",256,null],[11,"visit_char","","`visit_char` deserializes a `char` into a `Value`.",256,null],[11,"visit_str","","`visit_str` deserializes a `&amp;str` into a `Value`.",256,null],[11,"visit_string","","`visit_string` deserializes a `String` into a `Value`.  This allows a deserializer to avoid\na copy if it is deserializing a string from a `String` type.  By default it passes a `&amp;str`\nto the `visit_str` method.",256,null],[11,"visit_unit","","`visit_unit` deserializes a `()` into a `Value`.",256,null],[11,"visit_unit_struct","","`visit_unit_struct` deserializes a unit struct into a `Value`.",256,null],[11,"visit_none","","`visit_none` deserializes a none value into a `Value`.",256,null],[11,"visit_some","","`visit_some` deserializes a value into a `Value`.",256,null],[11,"visit_newtype_struct","","`visit_newtype_struct` deserializes a value into a `Value`.",256,null],[11,"visit_seq","","`visit_seq` deserializes a `SeqVisitor` into a `Value`.",256,null],[11,"visit_map","","`visit_map` deserializes a `MapVisitor` into a `Value`.",256,null],[11,"visit_bytes","","`visit_bytes` deserializes a `&amp;[u8]` into a `Value`.",256,null],[11,"visit_byte_buf","","`visit_byte_buf` deserializes a `Vec&lt;u8&gt;` into a `Value`.",256,null],[8,"SeqVisitor","","`SeqVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",257,null],[10,"visit","","This returns a `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there\nare no more remaining items.",257,null],[10,"end","","This signals to the `SeqVisitor` that the `Visitor` does not expect any more items.",257,null],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",257,null],[8,"MapVisitor","","`MapVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",258,null],[11,"visit","","This returns a `Ok(Some((key, value)))` for the next (key-value) pair in the map, or\n`Ok(None)` if there are no more remaining items.",258,null],[10,"visit_key","","This returns a `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no\nmore remaining items.",258,null],[10,"visit_value","","This returns a `Ok(value)` for the next value in the map.",258,null],[10,"end","","This signals to the `MapVisitor` that the `Visitor` does not expect any more items.",258,null],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",258,null],[11,"missing_field","","Report that the struct has a field that wasn&#39;t deserialized",258,null],[8,"EnumVisitor","","`EnumVisitor` is a visitor that is created by the `Deserialize` and passed to the\n`Deserializer` in order to deserialize enums.",null,null],[16,"Value","","The value produced by this visitor.",259,null],[10,"visit","","Visit the specific variant with the `VariantVisitor`.",259,null],[8,"VariantVisitor","","`VariantVisitor` is a visitor that is created by the `Deserializer` and passed to the\n`Deserialize` in order to deserialize a specific enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",260,null],[10,"visit_variant","","`visit_variant` is called to identify which variant to deserialize.",260,null],[11,"visit_unit","","`visit_unit` is called when deserializing a variant with no values.",260,null],[11,"visit_newtype","","`visit_newtype` is called when deserializing a variant with a single value. By default this\nuses the `visit_tuple` method to deserialize the value.",260,null],[11,"visit_tuple","","`visit_tuple` is called when deserializing a tuple-like variant.",260,null],[11,"visit_struct","","`visit_struct` is called when deserializing a struct-like variant.",260,null],[11,"fmt","","",189,null],[11,"eq","","",189,null],[11,"clone","","",189,null],[0,"iter","serde","Module that contains helper iterators.",null,null],[3,"LineColIterator","serde::iter","Iterator over a byte stream that tracks the current position&#39;s line and column.",null,null],[11,"new","","Construct a new `LineColIterator&lt;Iter&gt;`.",261,{"inputs":[{"name":"iter"}],"output":{"name":"linecoliterator"}}],[11,"line","","Report the current line inside the iterator.",261,null],[11,"col","","Report the current column inside the iterator.",261,null],[11,"get_ref","","Gets a reference to the underlying iterator.",261,null],[11,"get_mut","","Gets a mutable reference to the underlying iterator.",261,null],[11,"into_inner","","Unwraps this `LineColIterator`, returning the underlying iterator.",261,null],[11,"peek","","peeks at the next value",261,null],[11,"next","","",261,null],[0,"ser","serde","Generic serialization framework.",null,null],[0,"impls","serde::ser","Implementations for all of Rust&#39;s builtin types.",null,null],[3,"SeqIteratorVisitor","serde::ser::impls","A `serde::Visitor` for sequence iterators.",null,null],[3,"TupleVisitor1","","A tuple visitor.",null,null],[3,"TupleVisitor2","","A tuple visitor.",null,null],[3,"TupleVisitor3","","A tuple visitor.",null,null],[3,"TupleVisitor4","","A tuple visitor.",null,null],[3,"TupleVisitor5","","A tuple visitor.",null,null],[3,"TupleVisitor6","","A tuple visitor.",null,null],[3,"TupleVisitor7","","A tuple visitor.",null,null],[3,"TupleVisitor8","","A tuple visitor.",null,null],[3,"TupleVisitor9","","A tuple visitor.",null,null],[3,"TupleVisitor10","","A tuple visitor.",null,null],[3,"TupleVisitor11","","A tuple visitor.",null,null],[3,"TupleVisitor12","","A tuple visitor.",null,null],[3,"TupleVisitor13","","A tuple visitor.",null,null],[3,"TupleVisitor14","","A tuple visitor.",null,null],[3,"TupleVisitor15","","A tuple visitor.",null,null],[3,"TupleVisitor16","","A tuple visitor.",null,null],[3,"MapIteratorVisitor","","A `serde::Visitor` for (key, value) map iterators.",null,null],[11,"serialize","collections::string","",165,null],[11,"serialize","core::option","",63,null],[11,"visit","","",63,null],[11,"len","","",63,null],[11,"serialize","core::marker","",8,null],[11,"new","serde::ser::impls","Construct a new `SeqIteratorVisitor&lt;Iter&gt;`.",262,{"inputs":[{"name":"iter"},{"name":"option"}],"output":{"name":"seqiteratorvisitor"}}],[11,"visit","","",262,null],[11,"len","","",262,null],[11,"serialize","collections::binary_heap","",130,null],[11,"serialize","collections::btree::set","",147,null],[11,"serialize","std::collections::hash::set","",197,null],[11,"serialize","collections::linked_list","",160,null],[11,"serialize","collections::vec","",134,null],[11,"serialize","collections::vec_deque","",172,null],[11,"new","serde::ser::impls","Construct a new, empty `TupleVisitor`.",263,null],[11,"visit","","",263,null],[11,"len","","",263,null],[11,"new","","Construct a new, empty `TupleVisitor`.",264,null],[11,"visit","","",264,null],[11,"len","","",264,null],[11,"new","","Construct a new, empty `TupleVisitor`.",265,null],[11,"visit","","",265,null],[11,"len","","",265,null],[11,"new","","Construct a new, empty `TupleVisitor`.",266,null],[11,"visit","","",266,null],[11,"len","","",266,null],[11,"new","","Construct a new, empty `TupleVisitor`.",267,null],[11,"visit","","",267,null],[11,"len","","",267,null],[11,"new","","Construct a new, empty `TupleVisitor`.",268,null],[11,"visit","","",268,null],[11,"len","","",268,null],[11,"new","","Construct a new, empty `TupleVisitor`.",269,null],[11,"visit","","",269,null],[11,"len","","",269,null],[11,"new","","Construct a new, empty `TupleVisitor`.",270,null],[11,"visit","","",270,null],[11,"len","","",270,null],[11,"new","","Construct a new, empty `TupleVisitor`.",271,null],[11,"visit","","",271,null],[11,"len","","",271,null],[11,"new","","Construct a new, empty `TupleVisitor`.",272,null],[11,"visit","","",272,null],[11,"len","","",272,null],[11,"new","","Construct a new, empty `TupleVisitor`.",273,null],[11,"visit","","",273,null],[11,"len","","",273,null],[11,"new","","Construct a new, empty `TupleVisitor`.",274,null],[11,"visit","","",274,null],[11,"len","","",274,null],[11,"new","","Construct a new, empty `TupleVisitor`.",275,null],[11,"visit","","",275,null],[11,"len","","",275,null],[11,"new","","Construct a new, empty `TupleVisitor`.",276,null],[11,"visit","","",276,null],[11,"len","","",276,null],[11,"new","","Construct a new, empty `TupleVisitor`.",277,null],[11,"visit","","",277,null],[11,"len","","",277,null],[11,"new","","Construct a new, empty `TupleVisitor`.",278,null],[11,"visit","","",278,null],[11,"len","","",278,null],[11,"new","","Construct a new `MapIteratorVisitor&lt;Iter&gt;`.",279,{"inputs":[{"name":"iter"},{"name":"option"}],"output":{"name":"mapiteratorvisitor"}}],[11,"visit","","",279,null],[11,"len","","",279,null],[11,"serialize","collections::btree::map","",135,null],[11,"serialize","std::collections::hash::map","",218,null],[11,"serialize","alloc::boxed","",180,null],[11,"serialize","alloc::rc","",226,null],[11,"serialize","alloc::arc","",225,null],[11,"serialize","collections::borrow","",155,null],[11,"serialize","core::result","",68,null],[11,"serialize","std::net::ip","",219,null],[11,"serialize","","",220,null],[11,"serialize","std::net::addr","",221,null],[11,"serialize","","",222,null],[11,"serialize","","",223,null],[11,"serialize","std::path","",280,null],[11,"serialize","","",224,null],[8,"Error","serde::ser","`Error` is a trait that allows a `Serialize` to generically create a\n`Serializer` error.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",281,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Serialize` was passed an incorrect value.",281,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Serialize","","A trait that describes a type that can be serialized by a `Serializer`.",null,null],[10,"serialize","","Serializes this value into this serializer.",282,null],[8,"Serializer","","A trait that describes a type that can serialize a stream of values into the underlying format.",null,null],[16,"Error","","The error type that can be returned if some error occurs during serialization.",283,null],[10,"serialize_bool","","Serializes a `bool` value.",283,null],[11,"serialize_isize","","Serializes a `isize` value. By default it casts the value to a `i64` and\npasses it to the `serialize_i64` method.",283,null],[11,"serialize_i8","","Serializes a `i8` value. By default it casts the value to a `i64` and\npasses it to the `serialize_i64` method.",283,null],[11,"serialize_i16","","Serializes a `i16` value. By default it casts the value to a `i64` and\npasses it to the `serialize_i64` method.",283,null],[11,"serialize_i32","","Serializes a `i32` value. By default it casts the value to a `i64` and\npasses it to the `serialize_i64` method.",283,null],[10,"serialize_i64","","Serializes a `i64` value.",283,null],[11,"serialize_usize","","Serializes a `usize` value. By default it casts the value to a `u64` and\npasses it to the `serialize_u64` method.",283,null],[11,"serialize_u8","","Serializes a `u8` value. By default it casts the value to a `u64` and passes\nit to the `serialize_u64` method.",283,null],[11,"serialize_u16","","Serializes a `u32` value. By default it casts the value to a `u64` and passes\nit to the `serialize_u64` method.",283,null],[11,"serialize_u32","","Serializes a `u32` value. By default it casts the value to a `u64` and passes\nit to the `serialize_u64` method.",283,null],[10,"serialize_u64","","`Serializes a `u64` value.",283,null],[11,"serialize_f32","","Serializes a `f32` value. By default it casts the value to a `f64` and passes\nit to the `serialize_f64` method.",283,null],[10,"serialize_f64","","Serializes a `f64` value.",283,null],[11,"serialize_char","","Serializes a character. By default it serializes it as a `&amp;str` containing a\nsingle character.",283,null],[10,"serialize_str","","Serializes a `&amp;str`.",283,null],[11,"serialize_bytes","","Enables those serialization formats that support serializing\nbyte slices separately from generic arrays. By default it serializes as a regular array.",283,null],[10,"serialize_unit","","Serializes a `()` value.",283,null],[11,"serialize_unit_struct","","Serializes a unit struct value.",283,null],[11,"serialize_unit_variant","","Serializes a unit variant, otherwise known as a variant with no arguments.",283,null],[11,"serialize_newtype_struct","","Allows a tuple struct with a single element, also known as a\nnewtyped value, to be more efficiently serialized than a tuple struct with multiple items.\nBy default it just serializes the value as a tuple struct sequence.",283,null],[11,"serialize_newtype_variant","","Allows a variant with a single item to be more efficiently\nserialized than a variant with multiple items. By default it just serializes the value as a\ntuple variant sequence.",283,null],[10,"serialize_none","","Serializes a `None` value..serialize",283,null],[10,"serialize_some","","Serializes a `Some(...)` value.",283,null],[10,"serialize_seq","","Serializes a sequence.",283,null],[10,"serialize_seq_elt","","Serializes a sequence element.",283,null],[11,"serialize_tuple","","Serializes a tuple.",283,null],[11,"serialize_tuple_elt","","Serializes a tuple element.",283,null],[11,"serialize_fixed_size_array","","Serializes a fixed-size array.",283,null],[11,"serialize_tuple_struct","","Serializes a tuple struct.",283,null],[11,"serialize_tuple_struct_elt","","Serializes a tuple struct element.",283,null],[11,"serialize_tuple_variant","","Serializes a tuple variant.",283,null],[11,"serialize_tuple_variant_elt","","Serializes a tuple element.",283,null],[10,"serialize_map","","Serializes a map.",283,null],[10,"serialize_map_elt","","Serializes a map element (key-value pair).",283,null],[11,"serialize_struct","","Serializes a struct.",283,null],[11,"serialize_struct_elt","","Serializes an element of a struct.",283,null],[11,"serialize_struct_variant","","Serializes a struct variant.",283,null],[11,"serialize_struct_variant_elt","","Serializes an element of a struct variant.",283,null],[8,"SeqVisitor","","A trait that is used by a `Serialize` to iterate through a sequence.",null,null],[10,"visit","","Serializes a sequence item in the serializer.",284,null],[11,"len","","Return the length of the sequence if known.",284,null],[8,"MapVisitor","","A trait that is used by a `Serialize` to iterate through a map.",null,null],[10,"visit","","Serializes a map item in the serializer.",285,null],[11,"len","","Return the length of the map if known.",285,null]],"paths":[[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"Hash"],[8,"Hasher"],[8,"Write"],[8,"PartialEq"],[8,"PartialOrd"],[3,"Utf16Encoder"],[3,"SplitWhitespace"],[3,"ToLowercase"],[3,"ToUppercase"],[3,"DecodeUtf16"],[3,"DecodeUtf16Error"],[3,"PeekMut"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Vec"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"ValuesMut"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[4,"Cow"],[3,"EnumSet"],[3,"Iter"],[3,"Iter"],[3,"IntoIter"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"EncodeUtf16"],[3,"String"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Bound"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Box"],[8,"Pattern"],[8,"Searcher"],[8,"ReverseSearcher"],[8,"Iterator"],[8,"ExactSizeIterator"],[3,"ByteBuf"],[3,"ByteBufVisitor"],[3,"Bytes"],[4,"Type"],[3,"UnitVisitor"],[3,"BoolVisitor"],[3,"PhantomDataVisitor"],[3,"BinaryHeapVisitor"],[3,"BTreeSetVisitor"],[3,"LinkedListVisitor"],[3,"HashSetVisitor"],[3,"HashSet"],[3,"VecVisitor"],[3,"VecDequeVisitor"],[3,"TupleVisitor1"],[3,"TupleVisitor2"],[3,"TupleVisitor3"],[3,"TupleVisitor4"],[3,"TupleVisitor5"],[3,"TupleVisitor6"],[3,"TupleVisitor7"],[3,"TupleVisitor8"],[3,"TupleVisitor9"],[3,"TupleVisitor10"],[3,"TupleVisitor11"],[3,"TupleVisitor12"],[3,"TupleVisitor13"],[3,"TupleVisitor14"],[3,"TupleVisitor15"],[3,"TupleVisitor16"],[3,"BTreeMapVisitor"],[3,"HashMapVisitor"],[3,"HashMap"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[4,"SocketAddr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"PathBuf"],[3,"Arc"],[3,"Rc"],[3,"IgnoredAny"],[4,"Error"],[8,"ValueDeserializer"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U32Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"StrDeserializer"],[3,"StringDeserializer"],[3,"SeqDeserializer"],[3,"SeqVisitorDeserializer"],[3,"MapDeserializer"],[3,"MapVisitorDeserializer"],[3,"BytesDeserializer"],[3,"ByteBufDeserializer"],[8,"Error"],[8,"Deserialize"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqVisitor"],[8,"MapVisitor"],[8,"EnumVisitor"],[8,"VariantVisitor"],[3,"LineColIterator"],[3,"SeqIteratorVisitor"],[3,"TupleVisitor1"],[3,"TupleVisitor2"],[3,"TupleVisitor3"],[3,"TupleVisitor4"],[3,"TupleVisitor5"],[3,"TupleVisitor6"],[3,"TupleVisitor7"],[3,"TupleVisitor8"],[3,"TupleVisitor9"],[3,"TupleVisitor10"],[3,"TupleVisitor11"],[3,"TupleVisitor12"],[3,"TupleVisitor13"],[3,"TupleVisitor14"],[3,"TupleVisitor15"],[3,"TupleVisitor16"],[3,"MapIteratorVisitor"],[3,"Path"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SeqVisitor"],[8,"MapVisitor"]]};
searchIndex["slog"] = {"doc":"# Slog -  Structured, composable logging for Rust","items":[[3,"Logger","slog","Logger",null,null],[3,"Record","","Logging record",null,null],[3,"Error","","",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[3,"Discard","","Drain discarding everything",null,null],[3,"Streamer","","Drain formating records and writing them to a byte-stream (io::Write)",null,null],[3,"AsyncStreamer","","Drain formating records and writing them to a byte-stream (io::Write)\nasynchronously.",null,null],[3,"Filter","","Drain filtering records",null,null],[3,"LevelFilter","","Record log level filter",null,null],[3,"Duplicate","","Drain duplicating records to two sub-drains",null,null],[3,"Failover","","Failover drain",null,null],[3,"OwnedKeyValueList","","Chain of `OwnedKeyValue`-s of a `Logger` and its ancestors",null,null],[3,"OwnedKeyValueListIterator","","Iterator over `OwnedKeyValue`-s",null,null],[4,"Level","","Log record level",null,null],[13,"Critical","","Critical",1,null],[13,"Error","","Error",1,null],[13,"Warning","","Warning",1,null],[13,"Info","","Info",1,null],[13,"Debug","","Debug",1,null],[13,"Trace","","Trace",1,null],[4,"FilterLevel","","Logging filtering level",null,null],[13,"Off","","Log nothing",2,null],[13,"Critical","","Log critical level only",2,null],[13,"Error","","Log only error level and above",2,null],[13,"Warning","","Log only warning level and above",2,null],[13,"Info","","Log only info level and above",2,null],[13,"Debug","","Log only debug level and above",2,null],[13,"Trace","","Log everything",2,null],[4,"ErrorKind","","",null,null],[13,"Msg","","",3,null],[13,"Format","","",3,null],[13,"Io","","",3,null],[13,"SendError","","",3,null],[13,"LockError","","",3,null],[13,"FailoverExhausted","","",3,null],[5,"stream","","Stream logging records to IO",null,{"inputs":[{"name":"w"},{"name":"f"}],"output":{"name":"streamer"}}],[5,"async_stream","","Stream logging records to IO asynchronously",null,{"inputs":[{"name":"w"},{"name":"f"}],"output":{"name":"asyncstreamer"}}],[5,"discard","","Discard all logging records",null,{"inputs":[],"output":{"name":"discard"}}],[5,"filter","","Filter by `cond` closure",null,{"inputs":[{"name":"f"},{"name":"d"}],"output":{"name":"filter"}}],[5,"level_filter","","Filter by log level",null,{"inputs":[{"name":"level"},{"name":"d"}],"output":{"name":"levelfilter"}}],[5,"duplicate","","Duplicate records to two drains",null,{"inputs":[{"name":"d1"},{"name":"d2"}],"output":{"name":"duplicate"}}],[5,"failover","","Failover logging to secondary drain on primary&#39;s failure",null,{"inputs":[{"name":"d1"},{"name":"d2"}],"output":{"name":"failover"}}],[0,"ser","","Serialization",null,null],[3,"Error","slog::ser","",null,null],[12,"0","","",4,null],[12,"1","","",4,null],[3,"PushLazy","","A newtype for non-return based lazy values",null,null],[12,"0","","",5,null],[3,"ValueSerializer","","A handle to `Serializer` for `PushLazy` closure",null,null],[4,"ErrorKind","","",null,null],[13,"Msg","","",6,null],[13,"Io","","",6,null],[13,"Other","","",6,null],[11,"fmt","","",4,null],[11,"kind","","",4,null],[11,"into_kind","","",4,null],[11,"iter","","",4,null],[11,"backtrace","","",4,null],[11,"description","","",4,null],[11,"cause","","",4,null],[11,"fmt","","",4,null],[11,"from","","",4,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"description","","",6,null],[11,"from","","",6,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[6,"Result","","",null,null],[8,"Serialize","","Value that can be serialized",null,null],[10,"serialize","","Serialize self into `Serializer`",7,null],[8,"SyncSerialize","","Value that can be serialized and stored\nin `Logger` itself.",null,null],[8,"Serializer","","Serializer",null,null],[10,"emit_bool","","Emit bool",8,null],[10,"emit_unit","","Emit `()`",8,null],[10,"emit_none","","Emit `None`",8,null],[10,"emit_char","","Emit char",8,null],[10,"emit_u8","","Emit u8",8,null],[10,"emit_i8","","Emit i8",8,null],[10,"emit_u16","","Emit u16",8,null],[10,"emit_i16","","Emit i16",8,null],[10,"emit_u32","","Emit u32",8,null],[10,"emit_i32","","Emit i32",8,null],[10,"emit_f32","","Emit f32",8,null],[10,"emit_u64","","Emit u64",8,null],[10,"emit_i64","","Emit i64",8,null],[10,"emit_f64","","Emit f64",8,null],[10,"emit_usize","","Emit usize",8,null],[10,"emit_isize","","Emit isize",8,null],[10,"emit_str","","Emit str",8,null],[11,"serialize","collections::string","",9,null],[11,"serialize","core::option","",10,null],[11,"serialize","alloc::arc","",11,null],[11,"serialize","alloc::rc","",12,null],[11,"serialize","core::num","",13,null],[11,"serialize","slog::ser","Serialize a value",14,null],[11,"drop","","",14,null],[11,"serialize","","",5,null],[0,"format","slog","Output formating",null,null],[3,"Error","slog::format","",null,null],[12,"0","","",15,null],[12,"1","","",15,null],[4,"ErrorKind","","",null,null],[13,"Msg","","",16,null],[13,"Serialization","","",16,null],[13,"Io","","",16,null],[11,"fmt","","",15,null],[11,"kind","","",15,null],[11,"into_kind","","",15,null],[11,"iter","","",15,null],[11,"backtrace","","",15,null],[11,"description","","",15,null],[11,"cause","","",15,null],[11,"fmt","","",15,null],[11,"from","","",15,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",15,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",15,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",15,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",15,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"fmt","","",16,null],[11,"fmt","","",16,null],[11,"description","","",16,null],[11,"from","","",16,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",16,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",16,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[6,"Result","","",null,null],[8,"Format","","Formats `Record`-s into IO",null,null],[10,"format","","Format one logging record and write into `io`",17,null],[11,"fmt","slog","",0,null],[11,"kind","","",0,null],[11,"into_kind","","",0,null],[11,"iter","","",0,null],[11,"backtrace","","",0,null],[11,"description","","",0,null],[11,"cause","","",0,null],[11,"fmt","","",0,null],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"description","","",3,null],[11,"from","","",3,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[6,"Result","","",null,null],[6,"BorrowedKeyValue","","Key value pair that can be part of a logging record",null,null],[6,"OwnedKeyValue","","Key value pair that can be owned by `Logger`",null,null],[7,"LOG_LEVEL_NAMES","","Official capitalized logging (and logging filtering) level names",null,null],[7,"LOG_LEVEL_SHORT_NAMES","","Official capitalized logging (and logging filtering) short level names",null,null],[8,"Message","","Log Record message",null,null],[10,"as_str","","Take a string",18,null],[11,"write_to","","Write it into `io` (which might be fast than `as_str()` it does not\nneed to allocate anything in certain cases.",18,null],[8,"Drain","","Logging drain",null,null],[10,"log","","Write one logging record\nAs an optimization (avoiding allocations), loggers are responsible for\nproviding a byte buffer, that `Drain` can use for their own needs.",19,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"eq","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"partial_cmp","","",2,null],[11,"cmp","","",2,null],[11,"eq","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"as_short_str","","Convert to `str` from `LOG_LEVEL_SHORT_NAMES`",1,null],[11,"as_str","","Convert to `str` from `LOG_LEVEL_NAMES`",1,null],[11,"as_usize","","Cast `Level` to ordering integer",1,null],[11,"from_usize","","Get a `Level` from an `usize`",1,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"as_usize","","Convert to `usize` value",2,null],[11,"from_usize","","Get a `FilterLevel` from an `usize`",2,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"max","","Maximum logging level (log everything)",2,{"inputs":[],"output":{"name":"self"}}],[11,"min","","Minimum logging level (log nothing)",2,{"inputs":[],"output":{"name":"self"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"is_at_least","","Returns true if `self` is at least `level` logging level",1,null],[11,"clone","","",20,null],[11,"as_str","collections::string","",9,null],[11,"as_str","core::fmt","",21,null],[11,"write_to","","",21,null],[11,"root","slog","Build a root logger",20,{"inputs":[{"name":"d"},{"name":"vec"}],"output":{"name":"logger"}}],[11,"new","","Build a child logger",20,null],[11,"log","","Log one logging record",20,null],[11,"new","","Create a new `Record`",22,null],[11,"ts","","Timestamp",22,null],[11,"set_ts","","Set timestamp",22,null],[11,"msg","","Get a log record message",22,null],[11,"level","","Get record logging level",22,null],[11,"line","","Get line number",22,null],[11,"file","","Get file path",22,null],[11,"module","","Get module",22,null],[11,"values","","Record value-key pairs",22,null],[11,"log","alloc::boxed","",23,null],[11,"log","alloc::arc","",11,null],[11,"log","slog","",24,null],[11,"new","","Create new `Streamer` writing to `io` using `format`",25,{"inputs":[{"name":"w"},{"name":"f"}],"output":{"name":"self"}}],[11,"log","","",25,null],[11,"new","","Create new `AsyncStreamer` writing to `io` using `format`",26,{"inputs":[{"name":"w"},{"name":"f"}],"output":{"name":"self"}}],[11,"log","","",26,null],[11,"new","","Create Filter wrapping given `subdrain` and passing to it records\nonly the `cond` is true",27,{"inputs":[{"name":"d"},{"name":"f"}],"output":{"name":"self"}}],[11,"log","","",27,null],[11,"new","","Create `LevelFilter`",28,{"inputs":[{"name":"d"},{"name":"level"}],"output":{"name":"self"}}],[11,"log","","",28,null],[11,"new","","Create `Duplicate`",29,{"inputs":[{"name":"d1"},{"name":"d2"}],"output":{"name":"self"}}],[11,"log","","",29,null],[11,"new","","Create `Failover`",30,{"inputs":[{"name":"d1"},{"name":"d2"}],"output":{"name":"self"}}],[11,"log","","",30,null],[11,"new","","New `OwnedKeyValue` with a parent",31,{"inputs":[{"name":"vec"},{"name":"arc"}],"output":{"name":"self"}}],[11,"root","","New `OwnedKeyValue` without a parent (root)",31,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"iter","","Iterator over `OwnedKeyValue`-s",31,null],[11,"next","","",32,null],[14,"o!","","Convenience function for building `&amp;[OwnedKeyValue]`",null,null],[14,"log!","","Log message of a given level",null,null],[14,"slog_log!","","Log message of a given level (alias)",null,null],[14,"crit!","","Log critical level record",null,null],[14,"slog_crit!","","Log critical level record (alias)",null,null],[14,"error!","","Log error level record",null,null],[14,"slog_error!","","Log error level record",null,null],[14,"warn!","","Log warning level record",null,null],[14,"slog_warn!","","Log warning level record (alias)",null,null],[14,"info!","","Log info level record",null,null],[14,"slog_info!","","Log info level record (alias)",null,null],[14,"debug!","","Log debug level record",null,null],[14,"slog_debug!","","Log debug level record (alias)",null,null],[14,"trace!","","Log trace level record",null,null],[14,"slog_trace!","","Log trace level record (alias)",null,null]],"paths":[[3,"Error"],[4,"Level"],[4,"FilterLevel"],[4,"ErrorKind"],[3,"Error"],[3,"PushLazy"],[4,"ErrorKind"],[8,"Serialize"],[8,"Serializer"],[3,"String"],[4,"Option"],[3,"Arc"],[3,"Rc"],[3,"Wrapping"],[3,"ValueSerializer"],[3,"Error"],[4,"ErrorKind"],[8,"Format"],[8,"Message"],[8,"Drain"],[3,"Logger"],[3,"Arguments"],[3,"Record"],[3,"Box"],[3,"Discard"],[3,"Streamer"],[3,"AsyncStreamer"],[3,"Filter"],[3,"LevelFilter"],[3,"Duplicate"],[3,"Failover"],[3,"OwnedKeyValueList"],[3,"OwnedKeyValueListIterator"]]};
searchIndex["chrono"] = {"doc":"# Chrono 0.2.22","items":[[11,"weeks","time::duration","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",0,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",0,null],[11,"num_days","","Returns the total number of whole days in the duration.",0,null],[11,"num_hours","","Returns the total number of whole hours in the duration.",0,null],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",0,null],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",0,null],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",0,null],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",0,null],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",0,null],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",0,null],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",0,null],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",0,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",0,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",0,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",0,null],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",0,{"inputs":[{"name":"duration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",0,null],[11,"fmt","time","",1,null],[11,"fmt","time::duration","",0,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"mul","","",0,null],[11,"div","","",0,null],[11,"fmt","","",0,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"fmt","","",2,null],[11,"description","","",2,null],[11,"hash","time","",3,null],[11,"fmt","","",3,null],[11,"cmp","","",3,null],[11,"partial_cmp","","",3,null],[11,"lt","","",3,null],[11,"le","","",3,null],[11,"gt","","",3,null],[11,"ge","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"clone","","",3,null],[11,"new","","",3,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",3,null],[11,"sub","","",3,null],[11,"sub","","",3,null],[11,"clone","","",4,null],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",4,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of\n`self` to the value of `later`.",4,null],[11,"fmt","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"cmp","","",5,null],[11,"partial_cmp","","",5,null],[11,"lt","","",5,null],[11,"le","","",5,null],[11,"gt","","",5,null],[11,"ge","","",5,null],[11,"clone","","",5,null],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",5,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",5,null],[11,"sub","","",5,null],[11,"sub","","",5,null],[11,"add","","",5,null],[11,"hash","","",6,null],[11,"fmt","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"clone","","",6,null],[11,"add","","The resulting Tm is in UTC.",6,null],[11,"sub","","The resulting Tm is in UTC.",6,null],[11,"sub","","",6,null],[11,"partial_cmp","","",6,null],[11,"cmp","","",6,null],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",6,null],[11,"to_local","","Convert time to the local timezone",6,null],[11,"to_utc","","Convert time to the UTC",6,null],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",6,null],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",6,null],[11,"strftime","","Formats the time according to the format string.",6,null],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",6,null],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",6,null],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",6,null],[11,"clone","","",7,null],[11,"fmt","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"fmt","","",7,null],[11,"description","","",7,null],[11,"fmt","","",1,null],[3,"Duration","chrono","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[4,"Weekday","","The day of week (DOW).",null,null],[13,"Mon","","Monday.",8,null],[13,"Tue","","Tuesday.",8,null],[13,"Wed","","Wednesday.",8,null],[13,"Thu","","Thursday.",8,null],[13,"Fri","","Friday.",8,null],[13,"Sat","","Saturday.",8,null],[13,"Sun","","Sunday.",8,null],[0,"duration","","ISO 8601 duration.",null,null],[3,"Duration","chrono::duration","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[0,"offset","chrono","The time zone, which calculates offsets from the local time to UTC.",null,null],[4,"LocalResult","chrono::offset","The conversion result from the local time to the timezone-aware datetime types.",null,null],[13,"None","","Given local time representation is invalid.\nThis can occur when, for example, the positive timezone transition.",9,null],[13,"Single","","Given local time representation has a single unique result.",9,null],[13,"Ambiguous","","Given local time representation has multiple results and thus ambiguous.\nThis can occur when, for example, the negative timezone transition.",9,null],[0,"utc","","The UTC (Coordinated Universal Time) time zone.",null,null],[3,"UTC","chrono::offset::utc","The UTC time zone. This is the most efficient time zone when you don&#39;t need the local time.\nIt is also used as an offset (which is also a dummy type).",null,null],[11,"eq","","",10,null],[11,"clone","","",10,null],[11,"today","","Returns a `Date` which corresponds to the current date.",10,{"inputs":[],"output":{"name":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",10,{"inputs":[],"output":{"name":"datetime"}}],[11,"from_offset","","",10,{"inputs":[{"name":"utc"}],"output":{"name":"utc"}}],[11,"offset_from_local_date","","",10,null],[11,"offset_from_local_datetime","","",10,null],[11,"offset_from_utc_date","","",10,null],[11,"offset_from_utc_datetime","","",10,null],[11,"local_minus_utc","","",10,null],[11,"fmt","","",10,null],[11,"fmt","","",10,null],[0,"fixed","chrono::offset","The time zone which has a fixed offset from UTC.",null,null],[3,"FixedOffset","chrono::offset::fixed","The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.",null,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"clone","","",11,null],[11,"east","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\nThe negative `secs` means the Western Hemisphere.",11,{"inputs":[{"name":"i32"}],"output":{"name":"fixedoffset"}}],[11,"east_opt","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\nThe negative `secs` means the Western Hemisphere.",11,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"west","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\nThe negative `secs` means the Eastern Hemisphere.",11,{"inputs":[{"name":"i32"}],"output":{"name":"fixedoffset"}}],[11,"west_opt","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\nThe negative `secs` means the Eastern Hemisphere.",11,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_offset","","",11,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_local_date","","",11,null],[11,"offset_from_local_datetime","","",11,null],[11,"offset_from_utc_date","","",11,null],[11,"offset_from_utc_datetime","","",11,null],[11,"local_minus_utc","","",11,null],[11,"fmt","","",11,null],[11,"fmt","","",11,null],[0,"local","chrono::offset","The local (system) time zone.",null,null],[3,"Local","chrono::offset::local","The local timescale. This is implemented via the standard `time` crate.",null,null],[11,"clone","","",12,null],[11,"today","","Returns a `Date` which corresponds to the current date.",12,{"inputs":[],"output":{"name":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",12,{"inputs":[],"output":{"name":"datetime"}}],[11,"from_offset","","",12,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"local"}}],[11,"offset_from_local_date","","",12,null],[11,"offset_from_local_datetime","","",12,null],[11,"offset_from_utc_date","","",12,null],[11,"offset_from_utc_datetime","","",12,null],[11,"from_local_date","","",12,null],[11,"from_local_datetime","","",12,null],[11,"from_utc_date","","",12,null],[11,"from_utc_datetime","","",12,null],[8,"Offset","chrono::offset","The offset from the local time to UTC.",null,null],[10,"local_minus_utc","","Returns the offset from UTC to the local time stored.",13,null],[8,"TimeZone","","The time zone.",null,null],[16,"Offset","","An associated offset type.\nThis type is used to store the actual offset in date and time types.\nThe original `TimeZone` value can be recovered via `TimeZone::from_offset`.",14,null],[11,"ymd","","Makes a new `Date` from year, month, day and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",14,null],[11,"ymd_opt","","Makes a new `Date` from year, month, day and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",14,null],[11,"yo","","Makes a new `Date` from year, day of year (DOY or &quot;ordinal&quot;) and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",14,null],[11,"yo_opt","","Makes a new `Date` from year, day of year (DOY or &quot;ordinal&quot;) and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",14,null],[11,"isoywd","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\nthe current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\nThe resulting `Date` may have a different year from the input year.",14,null],[11,"isoywd_opt","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\nthe current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\nThe resulting `Date` may have a different year from the input year.",14,null],[11,"timestamp","","Makes a new `DateTime` from the number of non-leap seconds\nsince January 1, 1970 0:00:00 UTC (aka &quot;UNIX timestamp&quot;)\nand the number of nanoseconds since the last whole non-leap second.",14,null],[11,"timestamp_opt","","Makes a new `DateTime` from the number of non-leap seconds\nsince January 1, 1970 0:00:00 UTC (aka &quot;UNIX timestamp&quot;)\nand the number of nanoseconds since the last whole non-leap second.",14,null],[11,"datetime_from_str","","Parses a string with the specified format string and\nreturns a `DateTime` with the current offset.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",14,null],[10,"from_offset","","Reconstructs the time zone from the offset.",14,{"inputs":[{"name":"offset"}],"output":{"name":"self"}}],[10,"offset_from_local_date","","Creates the offset(s) for given local `NaiveDate` if possible.",14,null],[10,"offset_from_local_datetime","","Creates the offset(s) for given local `NaiveDateTime` if possible.",14,null],[11,"from_local_date","","Converts the local `NaiveDate` to the timezone-aware `Date` if possible.",14,null],[11,"from_local_datetime","","Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.",14,null],[10,"offset_from_utc_date","","Creates the offset for given UTC `NaiveDate`. This cannot fail.",14,null],[10,"offset_from_utc_datetime","","Creates the offset for given UTC `NaiveDateTime`. This cannot fail.",14,null],[11,"from_utc_date","","Converts the UTC `NaiveDate` to the local time.\nThe UTC is continuous and thus this cannot fail (but can give the duplicate local time).",14,null],[11,"from_utc_datetime","","Converts the UTC `NaiveDateTime` to the local time.\nThe UTC is continuous and thus this cannot fail (but can give the duplicate local time).",14,null],[11,"fmt","","",9,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"clone","","",9,null],[11,"single","","Returns `Some` only when the conversion result is unique, or `None` otherwise.",9,null],[11,"earliest","","Returns `Some` for the earliest possible conversion result, or `None` if none.",9,null],[11,"latest","","Returns `Some` for the latest possible conversion result, or `None` if none.",9,null],[11,"map","","Maps a `LocalResult&lt;T&gt;` into `LocalResult&lt;U&gt;` with given function.",9,null],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`.\nThe offset in the current date is preserved.",9,null],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second.\nThe offset in the current date is preserved.",9,null],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.\nThe offset in the current date is preserved.",9,null],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",9,null],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",9,null],[11,"unwrap","","Returns the single unique conversion result, or panics accordingly.",9,null],[0,"naive","chrono","Date and time types which do not concern about the timezones.",null,null],[0,"date","chrono::naive","ISO 8601 calendar date without timezone.",null,null],[3,"NaiveDate","chrono::naive::date","ISO 8601 calendar date without timezone.\nAllows for every proleptic Gregorian date from Jan 1, 262145 BCE to Dec 31, 262143 CE.\nAlso supports the conversion from ISO 8601 ordinal and week date.",null,null],[17,"MIN","","The minimum possible `NaiveDate`.",null,null],[17,"MAX","","The maximum possible `NaiveDate`.",null,null],[11,"clone","","",15,null],[11,"cmp","","",15,null],[11,"partial_cmp","","",15,null],[11,"lt","","",15,null],[11,"le","","",15,null],[11,"gt","","",15,null],[11,"ge","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"from_ymd","","Makes a new `NaiveDate` from year, month and day.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",15,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedate"}}],[11,"from_ymd_opt","","Makes a new `NaiveDate` from year, month and day.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",15,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_yo","","Makes a new `NaiveDate` from year and day of year (DOY or &quot;ordinal&quot;).\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",15,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"name":"naivedate"}}],[11,"from_yo_opt","","Makes a new `NaiveDate` from year and day of year (DOY or &quot;ordinal&quot;).\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",15,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_isoywd","","Makes a new `NaiveDate` from ISO week date (year and week number) and day of the week (DOW).\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\nThe resulting `NaiveDate` may have a different year from the input year.",15,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"naivedate"}}],[11,"from_isoywd_opt","","Makes a new `NaiveDate` from ISO week date (year and week number) and day of the week (DOW).\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\nThe resulting `NaiveDate` may have a different year from the input year.",15,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"option"}}],[11,"from_num_days_from_ce","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1)\nin the proleptic Gregorian calendar.",15,{"inputs":[{"name":"i32"}],"output":{"name":"naivedate"}}],[11,"from_num_days_from_ce_opt","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1)\nin the proleptic Gregorian calendar.",15,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDate`.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",15,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"and_time","","Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.",15,null],[11,"and_hms","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",15,null],[11,"and_hms_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",15,null],[11,"and_hms_milli","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",15,null],[11,"and_hms_milli_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",15,null],[11,"and_hms_micro","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",15,null],[11,"and_hms_micro_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",15,null],[11,"and_hms_nano","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",15,null],[11,"and_hms_nano_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",15,null],[11,"succ","","Makes a new `NaiveDate` for the next date.",15,null],[11,"succ_opt","","Makes a new `NaiveDate` for the next date.",15,null],[11,"pred","","Makes a new `NaiveDate` for the prior date.",15,null],[11,"pred_opt","","Makes a new `NaiveDate` for the prior date.",15,null],[11,"checked_add","","Adds the `days` part of given `Duration` to the current date.",15,null],[11,"checked_sub","","Subtracts the `days` part of given `Duration` from the current date.",15,null],[11,"format_with_items","","Formats the date with the specified formatting items.\nOtherwise it is same to the ordinary `format` method.",15,null],[11,"format","","Formats the date with the specified format string.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",15,null],[11,"year","","",15,null],[11,"month","","",15,null],[11,"month0","","",15,null],[11,"day","","",15,null],[11,"day0","","",15,null],[11,"ordinal","","",15,null],[11,"ordinal0","","",15,null],[11,"weekday","","",15,null],[11,"isoweekdate","","",15,null],[11,"with_year","","",15,null],[11,"with_month","","",15,null],[11,"with_month0","","",15,null],[11,"with_day","","",15,null],[11,"with_day0","","",15,null],[11,"with_ordinal","","",15,null],[11,"with_ordinal0","","",15,null],[11,"hash","","",15,null],[11,"add","","",15,null],[11,"sub","","",15,null],[11,"sub","","",15,null],[11,"fmt","","",15,null],[11,"fmt","","",15,null],[11,"from_str","","",15,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"time","chrono::naive","ISO 8601 time without timezone.",null,null],[3,"NaiveTime","chrono::naive::time","ISO 8601 time without timezone.\nAllows for the nanosecond precision and optional leap second representation.",null,null],[11,"clone","","",16,null],[11,"cmp","","",16,null],[11,"partial_cmp","","",16,null],[11,"lt","","",16,null],[11,"le","","",16,null],[11,"gt","","",16,null],[11,"ge","","",16,null],[11,"eq","","",16,null],[11,"ne","","",16,null],[11,"from_hms","","Makes a new `NaiveTime` from hour, minute and second.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_opt","","Makes a new `NaiveTime` from hour, minute and second.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_milli","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_milli_opt","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_micro","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_micro_opt","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_nano","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_nano_opt","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_num_seconds_from_midnight","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_num_seconds_from_midnight_opt","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveTime`.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",16,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"format_with_items","","Formats the time with the specified formatting items.\nOtherwise it is same to the ordinary `format` method.",16,null],[11,"format","","Formats the time with the specified format string.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",16,null],[11,"hour","","",16,null],[11,"minute","","",16,null],[11,"second","","",16,null],[11,"nanosecond","","",16,null],[11,"with_hour","","",16,null],[11,"with_minute","","",16,null],[11,"with_second","","",16,null],[11,"with_nanosecond","","",16,null],[11,"num_seconds_from_midnight","","",16,null],[11,"hash","","",16,null],[11,"add","","",16,null],[11,"sub","","",16,null],[11,"sub","","",16,null],[11,"fmt","","",16,null],[11,"fmt","","",16,null],[11,"from_str","","",16,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"datetime","chrono::naive","ISO 8601 date and time without timezone.",null,null],[3,"NaiveDateTime","chrono::naive::datetime","ISO 8601 combined date and time without timezone.",null,null],[11,"clone","","",17,null],[11,"cmp","","",17,null],[11,"partial_cmp","","",17,null],[11,"lt","","",17,null],[11,"le","","",17,null],[11,"gt","","",17,null],[11,"ge","","",17,null],[11,"eq","","",17,null],[11,"ne","","",17,null],[11,"new","","Makes a new `NaiveDateTime` from date and time components.\nEquivalent to `date.and_time(time)` and many other helper constructors on `NaiveDate`.",17,{"inputs":[{"name":"naivedate"},{"name":"naivetime"}],"output":{"name":"naivedatetime"}}],[11,"from_timestamp","","Makes a new `NaiveDateTime` from the number of non-leap seconds\nsince January 1, 1970 0:00:00 UTC (aka &quot;UNIX timestamp&quot;)\nand the number of nanoseconds since the last whole non-leap second.",17,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"from_timestamp_opt","","Makes a new `NaiveDateTime` from the number of non-leap seconds\nsince January 1, 1970 0:00:00 UTC (aka &quot;UNIX timestamp&quot;)\nand the number of nanoseconds since the last whole non-leap second.",17,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_num_seconds_from_unix_epoch","","*Deprecated:* Same to `NaiveDateTime::from_timestamp`.",17,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"from_num_seconds_from_unix_epoch_opt","","*Deprecated:* Same to `NaiveDateTime::from_timestamp_opt`.",17,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDateTime`.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",17,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"date","","Retrieves a date component.",17,null],[11,"time","","Retrieves a time component.",17,null],[11,"timestamp","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC\n(aka &quot;UNIX timestamp&quot;).\nNote that this does *not* account for the timezone!",17,null],[11,"num_seconds_from_unix_epoch","","*Deprecated:* Same to `NaiveDateTime::timestamp`.",17,null],[11,"checked_add","","Adds given `Duration` to the current date and time.",17,null],[11,"checked_sub","","Subtracts given `Duration` from the current date and time.",17,null],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",17,null],[11,"format","","Formats the combined date and time with the specified format string.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",17,null],[11,"year","","",17,null],[11,"month","","",17,null],[11,"month0","","",17,null],[11,"day","","",17,null],[11,"day0","","",17,null],[11,"ordinal","","",17,null],[11,"ordinal0","","",17,null],[11,"weekday","","",17,null],[11,"isoweekdate","","",17,null],[11,"with_year","","",17,null],[11,"with_month","","",17,null],[11,"with_month0","","",17,null],[11,"with_day","","",17,null],[11,"with_day0","","",17,null],[11,"with_ordinal","","",17,null],[11,"with_ordinal0","","",17,null],[11,"hour","","",17,null],[11,"minute","","",17,null],[11,"second","","",17,null],[11,"nanosecond","","",17,null],[11,"with_hour","","",17,null],[11,"with_minute","","",17,null],[11,"with_second","","",17,null],[11,"with_nanosecond","","",17,null],[11,"hash","","",17,null],[11,"add","","",17,null],[11,"sub","","",17,null],[11,"sub","","",17,null],[11,"fmt","","",17,null],[11,"fmt","","",17,null],[11,"from_str","","",17,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"date","chrono","ISO 8601 calendar date with time zone.",null,null],[3,"Date","chrono::date","ISO 8601 calendar date with time zone.",null,null],[17,"MIN","","The minimum possible `Date`.",null,null],[17,"MAX","","The maximum possible `Date`.",null,null],[11,"clone","","",18,null],[11,"from_utc","","Makes a new `Date` with given *UTC* date and offset.\nThe local date should be constructed via the `TimeZone` trait.",18,{"inputs":[{"name":"naivedate"},{"name":"offset"}],"output":{"name":"date"}}],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`.\nThe offset in the current date is preserved.",18,null],[11,"and_hms","","Makes a new `DateTime` from the current date, hour, minute and second.\nThe offset in the current date is preserved.",18,null],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second.\nThe offset in the current date is preserved.",18,null],[11,"and_hms_milli","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.\nThe offset in the current date is preserved.",18,null],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.\nThe offset in the current date is preserved.",18,null],[11,"and_hms_micro","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",18,null],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",18,null],[11,"and_hms_nano","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",18,null],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",18,null],[11,"succ","","Makes a new `Date` for the next date.",18,null],[11,"succ_opt","","Makes a new `Date` for the next date.",18,null],[11,"pred","","Makes a new `Date` for the prior date.",18,null],[11,"pred_opt","","Makes a new `Date` for the prior date.",18,null],[11,"offset","","Retrieves an associated offset from UTC.",18,null],[11,"timezone","","Retrieves an associated time zone.",18,null],[11,"with_timezone","","Changes the associated time zone.\nThis does not change the actual `Date` (but will change the string representation).",18,null],[11,"checked_add","","Adds given `Duration` to the current date.",18,null],[11,"checked_sub","","Subtracts given `Duration` from the current date.",18,null],[11,"naive_utc","","Returns a view to the naive UTC date.",18,null],[11,"naive_local","","Returns a view to the naive local date.",18,null],[11,"format_with_items","","Formats the date with the specified formatting items.",18,null],[11,"format","","Formats the date with the specified format string.\nSee the [`format::strftime` module](../format/strftime/index.html)\non the supported escape sequences.",18,null],[11,"year","","",18,null],[11,"month","","",18,null],[11,"month0","","",18,null],[11,"day","","",18,null],[11,"day0","","",18,null],[11,"ordinal","","",18,null],[11,"ordinal0","","",18,null],[11,"weekday","","",18,null],[11,"isoweekdate","","",18,null],[11,"with_year","","",18,null],[11,"with_month","","",18,null],[11,"with_month0","","",18,null],[11,"with_day","","",18,null],[11,"with_day0","","",18,null],[11,"with_ordinal","","",18,null],[11,"with_ordinal0","","",18,null],[11,"eq","","",18,null],[11,"partial_cmp","","",18,null],[11,"cmp","","",18,null],[11,"hash","","",18,null],[11,"add","","",18,null],[11,"sub","","",18,null],[11,"sub","","",18,null],[11,"fmt","","",18,null],[11,"fmt","","",18,null],[0,"datetime","chrono","ISO 8601 date and time with time zone.",null,null],[3,"DateTime","chrono::datetime","ISO 8601 combined date and time with time zone.",null,null],[11,"clone","","",19,null],[11,"from_utc","","Makes a new `DateTime` with given *UTC* datetime and offset.\nThe local datetime should be constructed via the `TimeZone` trait.",19,{"inputs":[{"name":"naivedatetime"},{"name":"offset"}],"output":{"name":"datetime"}}],[11,"date","","Retrieves a date component.",19,null],[11,"time","","Retrieves a time component.\nUnlike `date`, this is not associated to the time zone.",19,null],[11,"timestamp","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC\n(aka &quot;UNIX timestamp&quot;).",19,null],[11,"num_seconds_from_unix_epoch","","*Deprecated*: Same to `DateTime::timestamp`.",19,null],[11,"offset","","Retrieves an associated offset from UTC.",19,null],[11,"timezone","","Retrieves an associated time zone.",19,null],[11,"with_timezone","","Changes the associated time zone.\nThis does not change the actual `DateTime` (but will change the string representation).",19,null],[11,"checked_add","","Adds given `Duration` to the current date and time.",19,null],[11,"checked_sub","","Subtracts given `Duration` from the current date and time.",19,null],[11,"naive_utc","","Returns a view to the naive UTC datetime.",19,null],[11,"naive_local","","Returns a view to the naive local datetime.",19,null],[11,"parse_from_rfc2822","","Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`,\nthen returns a new `DateTime` with a parsed `FixedOffset`.",19,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"parse_from_rfc3339","","Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`,\nthen returns a new `DateTime` with a parsed `FixedOffset`.",19,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"parse_from_str","","Parses a string with the specified format string and\nreturns a new `DateTime` with a parsed `FixedOffset`.\nSee the [`format::strftime` module](../format/strftime/index.html)\non the supported escape sequences.",19,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"to_rfc2822","","Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.",19,null],[11,"to_rfc3339","","Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.",19,null],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",19,null],[11,"format","","Formats the combined date and time with the specified format string.\nSee the [`format::strftime` module](../format/strftime/index.html)\non the supported escape sequences.",19,null],[11,"year","","",19,null],[11,"month","","",19,null],[11,"month0","","",19,null],[11,"day","","",19,null],[11,"day0","","",19,null],[11,"ordinal","","",19,null],[11,"ordinal0","","",19,null],[11,"weekday","","",19,null],[11,"isoweekdate","","",19,null],[11,"with_year","","",19,null],[11,"with_month","","",19,null],[11,"with_month0","","",19,null],[11,"with_day","","",19,null],[11,"with_day0","","",19,null],[11,"with_ordinal","","",19,null],[11,"with_ordinal0","","",19,null],[11,"hour","","",19,null],[11,"minute","","",19,null],[11,"second","","",19,null],[11,"nanosecond","","",19,null],[11,"with_hour","","",19,null],[11,"with_minute","","",19,null],[11,"with_second","","",19,null],[11,"with_nanosecond","","",19,null],[11,"eq","","",19,null],[11,"partial_cmp","","",19,null],[11,"cmp","","",19,null],[11,"hash","","",19,null],[11,"add","","",19,null],[11,"sub","","",19,null],[11,"sub","","",19,null],[11,"fmt","","",19,null],[11,"fmt","","",19,null],[11,"from_str","","",19,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"from_str","","",19,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"from_str","","",19,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"format","chrono","Formatting utilities for date and time.",null,null],[3,"ParseError","chrono::format","An error from the `parse` function.",null,null],[3,"DelayedFormat","","A *temporary* object which can be used as an argument to `format!` or others.\nThis is normally constructed via `format` methods of each date and time type.",null,null],[4,"Pad","","Padding characters for numeric items.",null,null],[13,"None","","No padding.",20,null],[13,"Zero","","Zero (`0`) padding.",20,null],[13,"Space","","Space padding.",20,null],[4,"Numeric","","Numeric item types.\nThey have associated formatting width (FW) and parsing width (PW).",null,null],[13,"Year","","Full Gregorian year (FW=4, PW=infinity).\nMay accept years before 1 BCE or after 9999 CE, given an initial sign.",21,null],[13,"YearDiv100","","Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.",21,null],[13,"YearMod100","","Gregorian year modulo 100 (FW=PW=2). Cannot be negative.",21,null],[13,"IsoYear","","Year in the ISO week date (FW=4, PW=infinity).\nMay accept years before 1 BCE or after 9999 CE, given an initial sign.",21,null],[13,"IsoYearDiv100","","Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.",21,null],[13,"IsoYearMod100","","Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.",21,null],[13,"Month","","Month (FW=PW=2).",21,null],[13,"Day","","Day of the month (FW=PW=2).",21,null],[13,"WeekFromSun","","Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).",21,null],[13,"WeekFromMon","","Week number, where the week 1 starts at the first Monday of January (FW=PW=2).",21,null],[13,"IsoWeek","","Week number in the ISO week date (FW=PW=2).",21,null],[13,"NumDaysFromSun","","Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).",21,null],[13,"WeekdayFromMon","","Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).",21,null],[13,"Ordinal","","Day of the year (FW=PW=3).",21,null],[13,"Hour","","Hour number in the 24-hour clocks (FW=PW=2).",21,null],[13,"Hour12","","Hour number in the 12-hour clocks (FW=PW=2).",21,null],[13,"Minute","","The number of minutes since the last whole hour (FW=PW=2).",21,null],[13,"Second","","The number of seconds since the last whole minute (FW=PW=2).",21,null],[13,"Nanosecond","","The number of nanoseconds since the last whole second (FW=PW=9).\nNote that this is *not* left-aligned; see also `Fixed::Nanosecond`.",21,null],[13,"Timestamp","","The number of non-leap seconds since January 1, 1970 0:00:00 UTC (FW=1, PW=infinity).\nFor formatting, it assumes UTC upon the absence of time zone offset.",21,null],[4,"Fixed","","Fixed-format item types.",null,null],[13,"ShortMonthName","","Abbreviated month names.",22,null],[13,"LongMonthName","","Full month names.",22,null],[13,"ShortWeekdayName","","Abbreviated day of the week names.",22,null],[13,"LongWeekdayName","","Full day of the week names.",22,null],[13,"LowerAmPm","","AM/PM.",22,null],[13,"UpperAmPm","","AM/PM.",22,null],[13,"Nanosecond","","An optional dot plus one or more digits for left-aligned nanoseconds.\nMay print nothing, 3, 6 or 9 digits according to the available accuracy.\nSee also `Numeric::Nanosecond`.",22,null],[13,"Nanosecond3","","Fixed prescision at Nanosecond3 where 3 is the left aligned accuracy.",22,null],[13,"Nanosecond6","","Fixed prescision at Nanosecond6 where 6 is the left aligned accuracy.",22,null],[13,"Nanosecond9","","Fixed prescision at Nanosecond9 where 9 is the left aligned accuracy.",22,null],[13,"TimezoneName","","Timezone name.",22,null],[13,"TimezoneOffsetColon","","Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).",22,null],[13,"TimezoneOffsetColonZ","","Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).",22,null],[13,"TimezoneOffset","","Same to `TimezoneOffsetColon` but prints no colon. Parsing allows an optional colon.",22,null],[13,"TimezoneOffsetZ","","Same to `TimezoneOffsetColonZ` but prints no colon. Parsing allows an optional colon.",22,null],[13,"RFC2822","","RFC 2822 date and time syntax. Commonly used for email and MIME date and time.",22,null],[13,"RFC3339","","RFC 3339 &amp; ISO 8601 date and time syntax.",22,null],[4,"Item","","A single formatting item. This is used for both formatting and parsing.",null,null],[13,"Literal","","A literally printed and parsed text.",23,null],[13,"Space","","Whitespace. Prints literally but reads zero or more whitespace.",23,null],[13,"Numeric","","Numeric item. Can be optionally padded to the maximal length (if any) when formatting;\nthe parser simply ignores any padded whitespace and zeroes.",23,null],[13,"Fixed","","Fixed-format item.",23,null],[13,"Error","","Issues a formatting error. Used to signal an invalid format string.",23,null],[5,"parse","","Tries to parse given string into `parsed` with given formatting items.\nReturns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used).\nThere should be no trailing string after parsing; use a stray `Item::Space` to trim whitespaces.",null,{"inputs":[{"name":"parsed"},{"name":"str"},{"name":"i"}],"output":{"name":"parseresult"}}],[5,"format","","Tries to format given arguments with given formatting items.\nInternally used by `DelayedFormat`.",null,{"inputs":[{"name":"formatter"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"i"}],"output":{"name":"result"}}],[0,"parsed","","A collection of parsed date and time items.\nThey can be constructed incrementally while being checked for consistency.",null,null],[3,"Parsed","chrono::format::parsed","Parsed parts of date and time. There are two classes of methods:",null,null],[12,"year","","Year. This can be negative unlike `year_{div,mod}_100` fields.",24,null],[12,"year_div_100","","Year divided by 100. Implies that the year is &gt;= 1 BCE when set.",24,null],[12,"year_mod_100","","Year modulo 100. Implies that the year is &gt;= 1 BCE when set.",24,null],[12,"isoyear","","Year in the ISO week date. This can be negative unlike `isoyear_{div,mod}_100` fields.",24,null],[12,"isoyear_div_100","","Year in the ISO week date, divided by 100. Implies that the year is &gt;= 1 BCE when set.",24,null],[12,"isoyear_mod_100","","Year in the ISO week date, modulo 100. Implies that the year is &gt;= 1 BCE when set.",24,null],[12,"month","","Month (1--12).",24,null],[12,"week_from_sun","","Week number, where the week 1 starts at the first Sunday of January.\n(0--53, 1--53 or 1--52 depending on the year).",24,null],[12,"week_from_mon","","Week number, where the week 1 starts at the first Monday of January.\n(0--53, 1--53 or 1--52 depending on the year).",24,null],[12,"isoweek","","ISO week number (1--52 or 1--53 depending on the year).",24,null],[12,"weekday","","Day of the week.",24,null],[12,"ordinal","","Day of the year (1--365 or 1--366 depending on the year).",24,null],[12,"day","","Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).",24,null],[12,"hour_div_12","","Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.",24,null],[12,"hour_mod_12","","Hour number modulo 12 (0--11).",24,null],[12,"minute","","Minute number (0--59).",24,null],[12,"second","","Second number (0--60, accounting for leap seconds).",24,null],[12,"nanosecond","","The number of nanoseconds since the whole second (0--999,999,999).",24,null],[12,"timestamp","","The number of non-leap seconds since January 1, 1970 0:00:00 UTC.",24,null],[12,"offset","","Offset from the local time to UTC, in seconds.",24,null],[11,"fmt","","",24,null],[11,"eq","","",24,null],[11,"ne","","",24,null],[11,"clone","","",24,null],[11,"new","","Returns the initial value of parsed parts.",24,{"inputs":[],"output":{"name":"parsed"}}],[11,"set_year","","Tries to set the `year` field from given value.",24,null],[11,"set_year_div_100","","Tries to set the `year_div_100` field from given value.",24,null],[11,"set_year_mod_100","","Tries to set the `year_mod_100` field from given value.",24,null],[11,"set_isoyear","","Tries to set the `isoyear` field from given value.",24,null],[11,"set_isoyear_div_100","","Tries to set the `isoyear_div_100` field from given value.",24,null],[11,"set_isoyear_mod_100","","Tries to set the `isoyear_mod_100` field from given value.",24,null],[11,"set_month","","Tries to set the `month` field from given value.",24,null],[11,"set_week_from_sun","","Tries to set the `week_from_sun` field from given value.",24,null],[11,"set_week_from_mon","","Tries to set the `week_from_mon` field from given value.",24,null],[11,"set_isoweek","","Tries to set the `isoweek` field from given value.",24,null],[11,"set_weekday","","Tries to set the `weekday` field from given value.",24,null],[11,"set_ordinal","","Tries to set the `ordinal` field from given value.",24,null],[11,"set_day","","Tries to set the `day` field from given value.",24,null],[11,"set_ampm","","Tries to set the `hour_div_12` field from given value. (`false` for AM, `true` for PM)",24,null],[11,"set_hour12","","Tries to set the `hour_mod_12` field from given hour number in 12-hour clocks.",24,null],[11,"set_hour","","Tries to set both `hour_div_12` and `hour_mod_12` fields from given value.",24,null],[11,"set_minute","","Tries to set the `minute` field from given value.",24,null],[11,"set_second","","Tries to set the `second` field from given value.",24,null],[11,"set_nanosecond","","Tries to set the `nanosecond` field from given value.",24,null],[11,"set_timestamp","","Tries to set the `timestamp` field from given value.",24,null],[11,"set_offset","","Tries to set the `offset` field from given value.",24,null],[11,"to_naive_date","","Returns a parsed naive date out of given fields.",24,null],[11,"to_naive_time","","Returns a parsed naive time out of given fields.",24,null],[11,"to_naive_datetime_with_offset","","Returns a parsed naive date and time out of given fields,\nexcept for the `offset` field (assumed to have a given value).\nThis is required for parsing a local time or other known-timezone inputs.",24,null],[11,"to_fixed_offset","","Returns a parsed fixed time zone offset out of given fields.",24,null],[11,"to_datetime","","Returns a parsed timezone-aware date and time out of given fields.",24,null],[11,"to_datetime_with_timezone","","Returns a parsed timezone-aware date and time out of given fields,\nwith an additional `TimeZone` used to interpret and validate the local date.",24,null],[0,"strftime","chrono::format","`strftime`/`strptime`-inspired date and time formatting syntax.",null,null],[3,"StrftimeItems","chrono::format::strftime","Parsing iterator for `strftime`-like format strings.",null,null],[11,"clone","","",25,null],[11,"new","","Creates a new parsing iterator from the `strftime`-like format string.",25,{"inputs":[{"name":"str"}],"output":{"name":"strftimeitems"}}],[11,"next","","",25,null],[6,"ParseResult","chrono::format","Same to `Result&lt;T, ParseError&gt;`.",null,null],[11,"fmt","","",20,null],[11,"eq","","",20,null],[11,"clone","","",20,null],[11,"fmt","","",21,null],[11,"eq","","",21,null],[11,"clone","","",21,null],[11,"fmt","","",22,null],[11,"eq","","",22,null],[11,"clone","","",22,null],[11,"fmt","","",23,null],[11,"eq","","",23,null],[11,"ne","","",23,null],[11,"clone","","",23,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"clone","","",26,null],[11,"fmt","","",26,null],[11,"fmt","","",26,null],[11,"description","","",26,null],[11,"fmt","","",27,null],[11,"new","","Makes a new `DelayedFormat` value out of local date and time.",27,{"inputs":[{"name":"option"},{"name":"option"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"new_with_offset","","Makes a new `DelayedFormat` value out of local date and time and UTC offset.",27,{"inputs":[{"name":"option"},{"name":"option"},{"name":"off"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"fmt","","",27,null],[8,"Datelike","chrono","The common set of methods for date component.",null,null],[10,"year","","Returns the year number.",28,null],[11,"year_ce","","Returns the absolute year number starting from 1 with a boolean flag,\nwhich is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).",28,null],[10,"month","","Returns the month number starting from 1.",28,null],[10,"month0","","Returns the month number starting from 0.",28,null],[10,"day","","Returns the day of month starting from 1.",28,null],[10,"day0","","Returns the day of month starting from 0.",28,null],[10,"ordinal","","Returns the day of year starting from 1.",28,null],[10,"ordinal0","","Returns the day of year starting from 0.",28,null],[10,"weekday","","Returns the day of week.",28,null],[10,"isoweekdate","","Returns the ISO week date: an adjusted year, week number and day of week.\nThe adjusted year may differ from that of the calendar date.",28,null],[10,"with_year","","Makes a new value with the year number changed.",28,null],[10,"with_month","","Makes a new value with the month number (starting from 1) changed.",28,null],[10,"with_month0","","Makes a new value with the month number (starting from 0) changed.",28,null],[10,"with_day","","Makes a new value with the day of month (starting from 1) changed.",28,null],[10,"with_day0","","Makes a new value with the day of month (starting from 0) changed.",28,null],[10,"with_ordinal","","Makes a new value with the day of year (starting from 1) changed.",28,null],[10,"with_ordinal0","","Makes a new value with the day of year (starting from 0) changed.",28,null],[11,"num_days_from_ce","","Returns the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",28,null],[8,"Timelike","","The common set of methods for time component.",null,null],[10,"hour","","Returns the hour number from 0 to 23.",29,null],[11,"hour12","","Returns the hour number from 1 to 12 with a boolean flag,\nwhich is false for AM and true for PM.",29,null],[10,"minute","","Returns the minute number from 0 to 59.",29,null],[10,"second","","Returns the second number from 0 to 59.",29,null],[10,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second.\nThe range from 1,000,000,000 to 1,999,999,999 represents the leap second.",29,null],[10,"with_hour","","Makes a new value with the hour number changed.",29,null],[10,"with_minute","","Makes a new value with the minute number changed.",29,null],[10,"with_second","","Makes a new value with the second number changed.",29,null],[10,"with_nanosecond","","Makes a new value with nanoseconds since the whole non-leap second changed.",29,null],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",29,null],[11,"fmt","","",8,null],[11,"clone","","",8,null],[11,"eq","","",8,null],[11,"succ","","The next day in the week.",8,null],[11,"pred","","The previous day in the week.",8,null],[11,"number_from_monday","","Returns a DOW number starting from Monday = 1. (ISO 8601 weekday number)",8,null],[11,"number_from_sunday","","Returns a DOW number starting from Sunday = 1.",8,null],[11,"num_days_from_monday","","Returns a DOW number starting from Monday = 0.",8,null],[11,"num_days_from_sunday","","Returns a DOW number starting from Sunday = 0.",8,null],[11,"from_i64","","",8,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",8,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}]],"paths":[[3,"Duration"],[3,"TmFmt"],[3,"OutOfRangeError"],[3,"Timespec"],[3,"PreciseTime"],[3,"SteadyTime"],[3,"Tm"],[4,"ParseError"],[4,"Weekday"],[4,"LocalResult"],[3,"UTC"],[3,"FixedOffset"],[3,"Local"],[8,"Offset"],[8,"TimeZone"],[3,"NaiveDate"],[3,"NaiveTime"],[3,"NaiveDateTime"],[3,"Date"],[3,"DateTime"],[4,"Pad"],[4,"Numeric"],[4,"Fixed"],[4,"Item"],[3,"Parsed"],[3,"StrftimeItems"],[3,"ParseError"],[3,"DelayedFormat"],[8,"Datelike"],[8,"Timelike"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[8,"Integer","num","",null,null],[10,"div_floor","","Floored integer division.",0,null],[10,"mod_floor","","Floored integer modulo, satisfying:",0,null],[10,"gcd","","Greatest Common Divisor (GCD).",0,null],[10,"lcm","","Lowest Common Multiple (LCM).",0,null],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,null],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,null],[10,"is_even","","Returns `true` if the number is even.",0,null],[10,"is_odd","","Returns `true` if the number is odd.",0,null],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",0,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"fmt","num_traits","",1,null],[11,"fmt","","",2,null],[8,"Num","num","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",3,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",3,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",4,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",4,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",5,{"inputs":[],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",6,null],[10,"abs_sub","","The positive difference of two numbers.",6,null],[10,"signum","","Returns the sign of the number.",6,null],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",6,null],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",6,null],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",7,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",7,{"inputs":[],"output":{"name":"self"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",8,null],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",8,null],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",9,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",10,null],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",11,null],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",12,null],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",13,null],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",13,null],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",13,null],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",13,null],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",13,null],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",13,null],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",13,null],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",13,null],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",13,null],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",13,null],[10,"swap_bytes","","Reverses the byte order of the integer.",13,null],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",13,null],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",13,null],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",13,null],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",14,null],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",14,null],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",14,null],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",14,null],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",14,null],[10,"floor","","Returns the largest integer less than or equal to a number.",14,null],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",14,null],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",14,null],[10,"trunc","","Return the integer part of a number.",14,null],[10,"fract","","Returns the fractional part of a number.",14,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",14,null],[10,"signum","","Returns a number that represents the sign of `self`.",14,null],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",14,null],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",14,null],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",14,null],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",14,null],[10,"powi","","Raise a number to an integer power.",14,null],[10,"powf","","Raise a number to a floating point power.",14,null],[10,"sqrt","","Take the square root of a number.",14,null],[10,"exp","","Returns `e^(self)`, (the exponential function).",14,null],[10,"exp2","","Returns `2^(self)`.",14,null],[10,"ln","","Returns the natural logarithm of the number.",14,null],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",14,null],[10,"log2","","Returns the base 2 logarithm of the number.",14,null],[10,"log10","","Returns the base 10 logarithm of the number.",14,null],[10,"max","","Returns the maximum of the two numbers.",14,null],[10,"min","","Returns the minimum of the two numbers.",14,null],[10,"abs_sub","","The positive difference of two numbers.",14,null],[10,"cbrt","","Take the cubic root of a number.",14,null],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",14,null],[10,"sin","","Computes the sine of a number (in radians).",14,null],[10,"cos","","Computes the cosine of a number (in radians).",14,null],[10,"tan","","Computes the tangent of a number (in radians).",14,null],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",14,null],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",14,null],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",14,null],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",14,null],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",14,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",14,null],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",14,null],[10,"sinh","","Hyperbolic sine function.",14,null],[10,"cosh","","Hyperbolic cosine function.",14,null],[10,"tanh","","Hyperbolic tangent function.",14,null],[10,"asinh","","Inverse hyperbolic sine function.",14,null],[10,"acosh","","Inverse hyperbolic cosine function.",14,null],[10,"atanh","","Inverse hyperbolic tangent function.",14,null],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",14,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",15,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",15,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",15,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",15,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",15,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",15,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",15,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",15,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",15,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",15,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",15,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",15,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",17,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",15,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",15,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",15,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",15,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",15,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",15,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",15,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",15,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",15,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",15,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",15,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",15,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",17,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"Integer","num::integer","",null,null],[10,"div_floor","","Floored integer division.",0,null],[10,"mod_floor","","Floored integer modulo, satisfying:",0,null],[10,"gcd","","Greatest Common Divisor (GCD).",0,null],[10,"lcm","","Lowest Common Multiple (LCM).",0,null],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,null],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,null],[10,"is_even","","Returns `true` if the number is even.",0,null],[10,"is_odd","","Returns `true` if the number is odd.",0,null],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",0,null],[5,"div_rem","","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"clone","num_iter","",18,null],[11,"next","","",18,null],[11,"size_hint","","",18,null],[11,"next_back","","",18,null],[11,"clone","","",19,null],[11,"next","","",19,null],[11,"size_hint","","",19,null],[11,"next_back","","",19,null],[11,"clone","","",20,null],[11,"next","","",20,null],[11,"clone","","",21,null],[11,"next","","",21,null],[3,"Range","num::iter","An iterator over the range [start, stop)",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[0,"identities","num::traits","",null,null],[8,"Zero","num::traits::identities","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",4,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",4,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",5,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num::traits","",null,null],[8,"Signed","num::traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",6,null],[10,"abs_sub","","The positive difference of two numbers.",6,null],[10,"signum","","Returns the sign of the number.",6,null],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",6,null],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",6,null],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num::traits","",null,null],[0,"saturating","num::traits::ops","",null,null],[8,"Saturating","num::traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",8,null],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",8,null],[0,"checked","num::traits::ops","",null,null],[8,"CheckedAdd","num::traits::ops::checked","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",9,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",10,null],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",11,null],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",12,null],[0,"bounds","num::traits","",null,null],[8,"Bounded","num::traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",7,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",7,{"inputs":[],"output":{"name":"self"}}],[0,"float","num::traits","",null,null],[8,"Float","num::traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",14,null],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",14,null],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",14,null],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",14,null],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",14,null],[10,"floor","","Returns the largest integer less than or equal to a number.",14,null],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",14,null],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",14,null],[10,"trunc","","Return the integer part of a number.",14,null],[10,"fract","","Returns the fractional part of a number.",14,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",14,null],[10,"signum","","Returns a number that represents the sign of `self`.",14,null],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",14,null],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",14,null],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",14,null],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",14,null],[10,"powi","","Raise a number to an integer power.",14,null],[10,"powf","","Raise a number to a floating point power.",14,null],[10,"sqrt","","Take the square root of a number.",14,null],[10,"exp","","Returns `e^(self)`, (the exponential function).",14,null],[10,"exp2","","Returns `2^(self)`.",14,null],[10,"ln","","Returns the natural logarithm of the number.",14,null],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",14,null],[10,"log2","","Returns the base 2 logarithm of the number.",14,null],[10,"log10","","Returns the base 10 logarithm of the number.",14,null],[10,"max","","Returns the maximum of the two numbers.",14,null],[10,"min","","Returns the minimum of the two numbers.",14,null],[10,"abs_sub","","The positive difference of two numbers.",14,null],[10,"cbrt","","Take the cubic root of a number.",14,null],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",14,null],[10,"sin","","Computes the sine of a number (in radians).",14,null],[10,"cos","","Computes the cosine of a number (in radians).",14,null],[10,"tan","","Computes the tangent of a number (in radians).",14,null],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",14,null],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",14,null],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",14,null],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",14,null],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",14,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",14,null],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",14,null],[10,"sinh","","Hyperbolic sine function.",14,null],[10,"cosh","","Hyperbolic cosine function.",14,null],[10,"tanh","","Hyperbolic tangent function.",14,null],[10,"asinh","","Inverse hyperbolic sine function.",14,null],[10,"acosh","","Inverse hyperbolic cosine function.",14,null],[10,"atanh","","Inverse hyperbolic tangent function.",14,null],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",14,null],[0,"cast","num::traits","",null,null],[8,"ToPrimitive","num::traits::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",15,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",15,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",15,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",15,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",15,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",15,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",15,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",15,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",15,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",15,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",15,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",15,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",17,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num::traits","",null,null],[8,"PrimInt","num::traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",13,null],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",13,null],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",13,null],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",13,null],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",13,null],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",13,null],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",13,null],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",13,null],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",13,null],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",13,null],[10,"swap_bytes","","Reverses the byte order of the integer.",13,null],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",13,null],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",13,null],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",13,null],[8,"Num","num::traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",3,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",3,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[3,"ParseFloatError","","",null,null],[12,"kind","","",2,null],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",8,null],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",8,null],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",10,null],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",14,null],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",14,null],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",14,null],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",14,null],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",14,null],[10,"floor","","Returns the largest integer less than or equal to a number.",14,null],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",14,null],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",14,null],[10,"trunc","","Return the integer part of a number.",14,null],[10,"fract","","Returns the fractional part of a number.",14,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",14,null],[10,"signum","","Returns a number that represents the sign of `self`.",14,null],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",14,null],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",14,null],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",14,null],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",14,null],[10,"powi","","Raise a number to an integer power.",14,null],[10,"powf","","Raise a number to a floating point power.",14,null],[10,"sqrt","","Take the square root of a number.",14,null],[10,"exp","","Returns `e^(self)`, (the exponential function).",14,null],[10,"exp2","","Returns `2^(self)`.",14,null],[10,"ln","","Returns the natural logarithm of the number.",14,null],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",14,null],[10,"log2","","Returns the base 2 logarithm of the number.",14,null],[10,"log10","","Returns the base 10 logarithm of the number.",14,null],[10,"max","","Returns the maximum of the two numbers.",14,null],[10,"min","","Returns the minimum of the two numbers.",14,null],[10,"abs_sub","","The positive difference of two numbers.",14,null],[10,"cbrt","","Take the cubic root of a number.",14,null],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",14,null],[10,"sin","","Computes the sine of a number (in radians).",14,null],[10,"cos","","Computes the cosine of a number (in radians).",14,null],[10,"tan","","Computes the tangent of a number (in radians).",14,null],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",14,null],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",14,null],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",14,null],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",14,null],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",14,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",14,null],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",14,null],[10,"sinh","","Hyperbolic sine function.",14,null],[10,"cosh","","Hyperbolic cosine function.",14,null],[10,"tanh","","Hyperbolic tangent function.",14,null],[10,"asinh","","Inverse hyperbolic sine function.",14,null],[10,"acosh","","Inverse hyperbolic cosine function.",14,null],[10,"atanh","","Inverse hyperbolic tangent function.",14,null],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",14,null],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",13,null],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",13,null],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",13,null],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",13,null],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",13,null],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",13,null],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",13,null],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",13,null],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",13,null],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",13,null],[10,"swap_bytes","","Reverses the byte order of the integer.",13,null],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",13,null],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",13,null],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",13,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",5,{"inputs":[],"output":{"name":"self"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",12,null],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",4,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",4,null],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",9,null],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",6,null],[10,"abs_sub","","The positive difference of two numbers.",6,null],[10,"signum","","Returns the sign of the number.",6,null],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",6,null],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",6,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",7,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",7,{"inputs":[],"output":{"name":"self"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",15,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",15,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",15,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",15,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",15,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",15,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",15,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",15,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",15,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",15,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",15,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",15,null],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",17,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",11,null],[5,"zero","num","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}]],"paths":[[8,"Integer"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",0,null],[11,"next","","",0,null],[11,"size_hint","","",0,null],[11,"next_back","","",0,null],[11,"clone","","",1,null],[11,"next","","",1,null],[11,"size_hint","","",1,null],[11,"next_back","","",1,null],[11,"clone","","",2,null],[11,"next","","",2,null],[11,"clone","","",3,null],[11,"next","","",3,null]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["error_chain"] = {"doc":"A library for consistent and reliable error handling","items":[[11,"new","backtrace::capture","Captures a backtrace at the callsite of this function, returning an\nowned representation.",0,{"inputs":[],"output":{"name":"backtrace"}}],[11,"frames","","Returns the frames from when this backtrace was captured.",0,null],[11,"fmt","","",1,null],[11,"fmt","","",2,null],[11,"new","backtrace::symbolize","Creates a new symbol name from the raw underlying bytes.",3,null],[11,"as_str","","Returns the raw symbol name as `&amp;str` if the symbols is valid utf-8.",3,null],[11,"as_bytes","","Returns the raw symbol name as a list of bytes",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"clone","backtrace::capture","",0,null],[11,"clone","","",4,null],[11,"clone","","",5,null],[11,"ip","","",4,null],[11,"symbol_address","","",4,null],[11,"symbols","","Returns the list of symbols that this frame corresponds to.",4,null],[11,"name","","",5,null],[11,"addr","","",5,null],[11,"filename","","",5,null],[11,"lineno","","",5,null],[11,"fmt","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"backtrace"}}],[3,"Backtrace","error_chain","Representation of an owned and self-contained backtrace.",null,null],[3,"ErrorChainIter","","",null,null],[12,"0","","",6,null],[11,"next","","",6,null],[14,"quick_error!","","",null,null],[14,"error_chain!","","",null,null]],"paths":[[3,"Backtrace"],[8,"Frame"],[8,"Symbol"],[3,"SymbolName"],[3,"BacktraceFrame"],[3,"BacktraceSymbol"],[3,"ErrorChainIter"]]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[5,"div_rem","num_integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",0,null],[10,"mod_floor","","Floored integer modulo, satisfying:",0,null],[10,"gcd","","Greatest Common Divisor (GCD).",0,null],[10,"lcm","","Lowest Common Multiple (LCM).",0,null],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,null],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,null],[10,"is_even","","Returns `true` if the number is even.",0,null],[10,"is_odd","","Returns `true` if the number is odd.",0,null],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",0,null]],"paths":[[8,"Integer"]]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library\nimplementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where\nnanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month,\nday, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time\nvalue, including any adjustment for Daylight Saving Time. This is the\nnumber of seconds east of UTC. For example, for U.S. Pacific Daylight\nTime, the value is -7*60*60 = -25200.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 10&lt;sup&gt;9&lt;/sup&gt; - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and\nnanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter\nin nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter\nin seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"name":"result"}}],[11,"fmt","","",3,null],[11,"fmt","","",4,null],[11,"cmp","","",4,null],[11,"partial_cmp","","",4,null],[11,"lt","","",4,null],[11,"le","","",4,null],[11,"gt","","",4,null],[11,"ge","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"weeks","","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",4,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,null],[11,"num_days","","Returns the total number of whole days in the duration.",4,null],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,null],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,null],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,null],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,null],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",4,null],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",4,null],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,null],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,null],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,null],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"inputs":[{"name":"stdduration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,null],[11,"neg","","",4,null],[11,"add","","",4,null],[11,"sub","","",4,null],[11,"mul","","",4,null],[11,"div","","",4,null],[11,"fmt","","",4,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"description","","",5,null],[11,"hash","","",0,null],[11,"fmt","","",0,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"new","","",0,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"sub","","",0,null],[11,"clone","","",6,null],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of\n`self` to the value of `later`.",6,null],[11,"fmt","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"cmp","","",7,null],[11,"partial_cmp","","",7,null],[11,"lt","","",7,null],[11,"le","","",7,null],[11,"gt","","",7,null],[11,"ge","","",7,null],[11,"clone","","",7,null],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",7,null],[11,"sub","","",7,null],[11,"sub","","",7,null],[11,"add","","",7,null],[11,"hash","","",1,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"add","","The resulting Tm is in UTC.",1,null],[11,"sub","","The resulting Tm is in UTC.",1,null],[11,"sub","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,null],[11,"to_local","","Convert time to the local timezone",1,null],[11,"to_utc","","Convert time to the UTC",1,null],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",1,null],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",1,null],[11,"strftime","","Formats the time according to the format string.",1,null],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,null],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,null],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",1,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"description","","",2,null],[11,"fmt","","",3,null]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["backtrace"] = {"doc":"A library for acquiring a backtrace at runtime","items":[[3,"SymbolName","backtrace","A wrapper around a symbol name to provide ergonomic accessors to the\ndemangled name, the raw bytes, the raw string, etc.",null,null],[3,"Backtrace","","Representation of an owned and self-contained backtrace.",null,null],[3,"BacktraceFrame","","Captured version of a frame in a backtrace.",null,null],[3,"BacktraceSymbol","","Captured version of a symbol in a backtrace.",null,null],[5,"trace","","Inspects the current call-stack, passing all active frames into the closure\nprovided to calculate a stack trace.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"resolve","","Resolve an address to a symbol, passing the symbol to the specified\nclosure.",null,null],[11,"new","","Creates a new symbol name from the raw underlying bytes.",0,null],[11,"as_str","","Returns the raw symbol name as `&amp;str` if the symbols is valid utf-8.",0,null],[11,"as_bytes","","Returns the raw symbol name as a list of bytes",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"new","","Captures a backtrace at the callsite of this function, returning an\nowned representation.",1,{"inputs":[],"output":{"name":"backtrace"}}],[11,"frames","","Returns the frames from when this backtrace was captured.",1,null],[11,"ip","","",2,null],[11,"symbol_address","","",2,null],[11,"symbols","","Returns the list of symbols that this frame corresponds to.",2,null],[11,"name","","",3,null],[11,"addr","","",3,null],[11,"filename","","",3,null],[11,"lineno","","",3,null],[11,"fmt","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"backtrace"}}],[8,"Frame","","A trait representing one frame of a backtrace, yielded to the `trace`\nfunction of this crate.",null,null],[10,"ip","","Returns the current instruction pointer of this frame.",4,null],[10,"symbol_address","","Returns the starting symbol address of the frame of this function.",4,null],[8,"Symbol","","A trait representing the resolution of a symbol in a file.",null,null],[11,"name","","Returns the name of this function.",5,null],[11,"addr","","Returns the starting address of this function.",5,null],[11,"filename","","Returns the file name where this function was defined.",5,null],[11,"lineno","","Returns the line number for where this symbol is currently executing.",5,null],[11,"fmt","","",4,null],[11,"name","","Returns the name of this function.",5,null],[11,"addr","","Returns the starting address of this function.",5,null],[11,"filename","","Returns the file name where this function was defined.",5,null],[11,"lineno","","Returns the line number for where this symbol is currently executing.",5,null],[11,"fmt","","",5,null]],"paths":[[3,"SymbolName"],[3,"Backtrace"],[3,"BacktraceFrame"],[3,"BacktraceSymbol"],[8,"Frame"],[8,"Symbol"]]};
searchIndex["ansi_term"] = {"doc":"This is a library for controlling colours and formatting, such as\nred bold text or blue underlined text, on ANSI terminals.","items":[[3,"ANSIString","ansi_term","An ANSI String is a string coupled with the Style to display it\nin a terminal.",null,null],[3,"Style","","A style is a collection of properties that can format a string\nusing ANSI escape codes.",null,null],[3,"ANSIStrings","","A set of `ANSIString`s collected together, in order to be written with a\nminimum of control characters.",null,null],[12,"0","","",0,null],[4,"Colour","","A colour is one specific type of ANSI escape code, and can refer\nto either the foreground or background colour.",null,null],[13,"Black","","Colour #0 (foreground code `30`, background code `40`).",1,null],[13,"Red","","Colour #1 (foreground code `31`, background code `41`).",1,null],[13,"Green","","Colour #2 (foreground code `32`, background code `42`).",1,null],[13,"Yellow","","Colour #3 (foreground code `33`, background code `43`).",1,null],[13,"Blue","","Colour #4 (foreground code `34`, background code `44`).",1,null],[13,"Purple","","Colour #5 (foreground code `35`, background code `45`).",1,null],[13,"Cyan","","Colour #6 (foreground code `36`, background code `46`).",1,null],[13,"White","","Colour #7 (foreground code `37`, background code `47`).",1,null],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour terminal\nenvironments.",1,null],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",1,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"from","","",2,{"inputs":[{"name":"s"}],"output":{"name":"ansistring"}}],[11,"deref","","",2,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"normal","","Return a Style with the foreground colour set to this colour.",1,null],[11,"paint","","Paints the given text with this colour, returning an ANSI string.\nThis is a short-cut so you don&#39;t have to use Blue.normal() just\nto get blue text.",1,null],[11,"bold","","Returns a Style with the bold property set.",1,null],[11,"dimmed","","Returns a Style with the dimmed property set.",1,null],[11,"italic","","Returns a Style with the italic property set.",1,null],[11,"underline","","Returns a Style with the underline property set.",1,null],[11,"blink","","Returns a Style with the blink property set.",1,null],[11,"reverse","","Returns a Style with the reverse property set.",1,null],[11,"hidden","","Returns a Style with the hidden property set.",1,null],[11,"strikethrough","","Returns a Style with the strikethrough property set.",1,null],[11,"on","","Returns a Style with the background colour property set.",1,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"new","","Creates a new Style with no differences.",3,{"inputs":[],"output":{"name":"style"}}],[11,"paint","","Paints the given text with this colour, returning an ANSI string.",3,null],[11,"bold","","Returns a Style with the bold property set.",3,null],[11,"dimmed","","Returns a Style with the dimmed property set.",3,null],[11,"italic","","Returns a Style with the italic property set.",3,null],[11,"underline","","Returns a Style with the underline property set.",3,null],[11,"blink","","Returns a Style with the blink property set.",3,null],[11,"reverse","","Returns a Style with the reverse property set.",3,null],[11,"hidden","","Returns a Style with the hidden property set.",3,null],[11,"strikethrough","","Returns a Style with the hidden property set.",3,null],[11,"fg","","Returns a Style with the foreground colour property set.",3,null],[11,"on","","Returns a Style with the background colour property set.",3,null],[11,"default","","",3,{"inputs":[],"output":{"name":"style"}}],[11,"fmt","","",0,null]],"paths":[[3,"ANSIStrings"],[4,"Colour"],[3,"ANSIString"],[3,"Style"]]};
searchIndex["backtrace_sys"] = {"doc":"","items":[[4,"backtrace_state","backtrace_sys","",null,null],[5,"backtrace_create_state","","",null,null],[5,"backtrace_syminfo","","",null,null],[5,"backtrace_pcinfo","","",null,null],[6,"backtrace_syminfo_callback","","",null,null],[6,"backtrace_full_callback","","",null,null],[6,"backtrace_error_callback","","",null,null]],"paths":[]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["isatty"] = {"doc":"","items":[[5,"stdout_isatty","isatty","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"stderr_isatty","","",null,{"inputs":[],"output":{"name":"bool"}}]],"paths":[]};
searchIndex["dbghelp"] = {"doc":"","items":[],"paths":[]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[11,"encode","collections::string","",0,null],[11,"decode","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,null],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,null],[11,"decode","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::borrow","",3,null],[11,"decode","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",4,null],[11,"decode","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",5,null],[11,"decode","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",6,null],[11,"decode","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",7,null],[11,"encode","","",8,null],[11,"decode","","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",9,null],[11,"decode","","",9,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",10,null],[11,"decode","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",11,null],[11,"decode","","",11,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",12,null],[11,"decode","","",12,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",13,null],[11,"decode","","",13,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",14,null],[11,"decode","","",14,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",15,null],[11,"decode","","",15,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",16,null],[11,"decode","","",16,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",17,null],[11,"decode","","",17,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",18,null],[12,"newline","","Newline to use",18,null],[12,"pad","","True to pad output with `=` characters",18,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",18,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",19,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",19,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",20,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",20,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",21,null],[13,"InvalidBase64Length","","The input had an invalid length",21,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",22,null],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",23,null],[11,"fmt","","",19,null],[11,"clone","","",19,null],[11,"fmt","","",20,null],[11,"clone","","",20,null],[11,"fmt","","",18,null],[11,"clone","","",18,null],[11,"clone","","",21,null],[11,"fmt","","",21,null],[11,"description","","",21,null],[11,"fmt","","",21,null],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",24,null],[13,"InvalidHexLength","","The input had an invalid length",24,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",25,null],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",26,null],[11,"clone","","",24,null],[11,"fmt","","",24,null],[11,"description","","",24,null],[11,"fmt","","",24,null],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",27,null],[13,"U64","","",27,null],[13,"F64","","",27,null],[13,"String","","",27,null],[13,"Boolean","","",27,null],[13,"Array","","",27,null],[13,"Object","","",27,null],[13,"Null","","",27,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",28,null],[13,"InvalidNumber","","",28,null],[13,"EOFWhileParsingObject","","",28,null],[13,"EOFWhileParsingArray","","",28,null],[13,"EOFWhileParsingValue","","",28,null],[13,"EOFWhileParsingString","","",28,null],[13,"KeyMustBeAString","","",28,null],[13,"ExpectedColon","","",28,null],[13,"TrailingCharacters","","",28,null],[13,"TrailingComma","","",28,null],[13,"InvalidEscape","","",28,null],[13,"InvalidUnicodeCodePoint","","",28,null],[13,"LoneLeadingSurrogateInHexEscape","","",28,null],[13,"UnexpectedEndOfHexEscape","","",28,null],[13,"UnrecognizedHex","","",28,null],[13,"NotFourDigit","","",28,null],[13,"ControlCharacterInString","","",28,null],[13,"NotUtf8","","",28,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",29,null],[13,"IoError","","",29,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",30,null],[13,"ExpectedError","","",30,null],[13,"MissingFieldError","","",30,null],[13,"UnknownVariantError","","",30,null],[13,"ApplicationError","","",30,null],[13,"EOF","","",30,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",31,null],[13,"BadHashmapKey","","",31,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",32,null],[13,"ObjectEnd","","",32,null],[13,"ArrayStart","","",32,null],[13,"ArrayEnd","","",32,null],[13,"BooleanValue","","",32,null],[13,"I64Value","","",32,null],[13,"U64Value","","",32,null],[13,"F64Value","","",32,null],[13,"StringValue","","",32,null],[13,"NullValue","","",32,null],[13,"Error","","",32,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(&quot;foo&quot;), Key(&quot;bar&quot;), Index(3) and Key(&quot;x&quot;) are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",33,null],[13,"Key","","",33,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&amp;str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",34,null],[11,"fmt","","",27,null],[11,"partial_cmp","","",27,null],[11,"lt","","",27,null],[11,"le","","",27,null],[11,"gt","","",27,null],[11,"ge","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"clone","","",27,null],[11,"eq","","",28,null],[11,"clone","","",28,null],[11,"fmt","","",29,null],[11,"eq","","",29,null],[11,"fmt","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"fmt","","",31,null],[11,"clone","","",31,null],[11,"fmt","","",28,null],[11,"description","","",30,null],[11,"cause","","",30,null],[11,"fmt","","",30,null],[11,"from","","",30,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",29,null],[11,"fmt","","",29,null],[11,"from","","",29,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",31,null],[11,"fmt","","",31,null],[11,"from","","",31,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",35,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",35,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",35,null],[11,"emit_nil","","",35,null],[11,"emit_usize","","",35,null],[11,"emit_u64","","",35,null],[11,"emit_u32","","",35,null],[11,"emit_u16","","",35,null],[11,"emit_u8","","",35,null],[11,"emit_isize","","",35,null],[11,"emit_i64","","",35,null],[11,"emit_i32","","",35,null],[11,"emit_i16","","",35,null],[11,"emit_i8","","",35,null],[11,"emit_bool","","",35,null],[11,"emit_f64","","",35,null],[11,"emit_f32","","",35,null],[11,"emit_char","","",35,null],[11,"emit_str","","",35,null],[11,"emit_enum","","",35,null],[11,"emit_enum_variant","","",35,null],[11,"emit_enum_variant_arg","","",35,null],[11,"emit_enum_struct_variant","","",35,null],[11,"emit_enum_struct_variant_field","","",35,null],[11,"emit_struct","","",35,null],[11,"emit_struct_field","","",35,null],[11,"emit_tuple","","",35,null],[11,"emit_tuple_arg","","",35,null],[11,"emit_tuple_struct","","",35,null],[11,"emit_tuple_struct_arg","","",35,null],[11,"emit_option","","",35,null],[11,"emit_option_none","","",35,null],[11,"emit_option_some","","",35,null],[11,"emit_seq","","",35,null],[11,"emit_seq_elt","","",35,null],[11,"emit_map","","",35,null],[11,"emit_map_elt_key","","",35,null],[11,"emit_map_elt_val","","",35,null],[11,"encode","","",27,null],[11,"from_reader","","Decodes a json value from an `&amp;mut io::Read`",27,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",27,null],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",27,null],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",27,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",27,null],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",27,null],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",27,null],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",27,null],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",27,null],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",27,null],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",27,null],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",27,null],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",27,null],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",27,null],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",27,null],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",27,null],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",27,null],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",27,null],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",27,null],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",27,null],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",27,null],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",27,null],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",27,null],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",27,null],[11,"index","","",27,null],[11,"index","","",27,null],[11,"fmt","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"fmt","","",33,null],[11,"clone","","",33,null],[11,"eq","","",33,null],[11,"ne","","",33,null],[11,"new","","",36,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",36,null],[11,"is_empty","","Returns true if the stack is empty.",36,null],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",36,null],[11,"is_equal_to","","Compares this stack with an array of StackElements.",36,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"top","","Returns the top-most element (if any).",36,null],[11,"next","","",37,null],[11,"new","","Creates the JSON parser.",37,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",37,null],[11,"new","","Create a JSON Builder.",38,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",38,null],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",39,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",39,null],[11,"read_usize","","",39,null],[11,"read_u8","","",39,null],[11,"read_u16","","",39,null],[11,"read_u32","","",39,null],[11,"read_u64","","",39,null],[11,"read_isize","","",39,null],[11,"read_i8","","",39,null],[11,"read_i16","","",39,null],[11,"read_i32","","",39,null],[11,"read_i64","","",39,null],[11,"read_f32","","",39,null],[11,"read_f64","","",39,null],[11,"read_bool","","",39,null],[11,"read_char","","",39,null],[11,"read_str","","",39,null],[11,"read_enum","","",39,null],[11,"read_enum_variant","","",39,null],[11,"read_enum_variant_arg","","",39,null],[11,"read_enum_struct_variant","","",39,null],[11,"read_enum_struct_variant_field","","",39,null],[11,"read_struct","","",39,null],[11,"read_struct_field","","",39,null],[11,"read_tuple","","",39,null],[11,"read_tuple_arg","","",39,null],[11,"read_tuple_struct","","",39,null],[11,"read_tuple_struct_arg","","",39,null],[11,"read_option","","",39,null],[11,"read_seq","","",39,null],[11,"read_seq_elt","","",39,null],[11,"read_map","","",39,null],[11,"read_map_elt_key","","",39,null],[11,"read_map_elt_val","","",39,null],[11,"error","","",39,null],[11,"to_json","","",27,null],[11,"to_json","collections::string","",0,null],[11,"to_json","collections::vec","",4,null],[11,"to_json","collections::btree::map","",14,null],[11,"to_json","std::collections::hash::map","",16,null],[11,"to_json","core::option","",5,null],[11,"fmt","rustc_serialize::json","Encodes a json value into a string",27,null],[11,"fmt","","Encodes a json value into a string",40,null],[11,"fmt","","Encodes a json value into a string",41,null],[11,"indent","","Set the indentation level for the emitted JSON",42,null],[11,"fmt","","Encodes a json value into a string",42,null],[11,"from_str","","",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","","",43,null],[10,"read_nil","","",43,null],[10,"read_usize","","",43,null],[10,"read_u64","","",43,null],[10,"read_u32","","",43,null],[10,"read_u16","","",43,null],[10,"read_u8","","",43,null],[10,"read_isize","","",43,null],[10,"read_i64","","",43,null],[10,"read_i32","","",43,null],[10,"read_i16","","",43,null],[10,"read_i8","","",43,null],[10,"read_bool","","",43,null],[10,"read_f64","","",43,null],[10,"read_f32","","",43,null],[10,"read_char","","",43,null],[10,"read_str","","",43,null],[10,"read_enum","","",43,null],[10,"read_enum_variant","","",43,null],[10,"read_enum_variant_arg","","",43,null],[10,"read_enum_struct_variant","","",43,null],[10,"read_enum_struct_variant_field","","",43,null],[10,"read_struct","","",43,null],[10,"read_struct_field","","",43,null],[10,"read_tuple","","",43,null],[10,"read_tuple_arg","","",43,null],[10,"read_tuple_struct","","",43,null],[10,"read_tuple_struct_arg","","",43,null],[10,"read_option","","",43,null],[10,"read_seq","","",43,null],[10,"read_seq_elt","","",43,null],[10,"read_map","","",43,null],[10,"read_map_elt_key","","",43,null],[10,"read_map_elt_val","","",43,null],[10,"error","","",43,null],[8,"Encoder","","",null,null],[16,"Error","","",44,null],[10,"emit_nil","","",44,null],[10,"emit_usize","","",44,null],[10,"emit_u64","","",44,null],[10,"emit_u32","","",44,null],[10,"emit_u16","","",44,null],[10,"emit_u8","","",44,null],[10,"emit_isize","","",44,null],[10,"emit_i64","","",44,null],[10,"emit_i32","","",44,null],[10,"emit_i16","","",44,null],[10,"emit_i8","","",44,null],[10,"emit_bool","","",44,null],[10,"emit_f64","","",44,null],[10,"emit_f32","","",44,null],[10,"emit_char","","",44,null],[10,"emit_str","","",44,null],[10,"emit_enum","","",44,null],[10,"emit_enum_variant","","",44,null],[10,"emit_enum_variant_arg","","",44,null],[10,"emit_enum_struct_variant","","",44,null],[10,"emit_enum_struct_variant_field","","",44,null],[10,"emit_struct","","",44,null],[10,"emit_struct_field","","",44,null],[10,"emit_tuple","","",44,null],[10,"emit_tuple_arg","","",44,null],[10,"emit_tuple_struct","","",44,null],[10,"emit_tuple_struct_arg","","",44,null],[10,"emit_option","","",44,null],[10,"emit_option_none","","",44,null],[10,"emit_option_some","","",44,null],[10,"emit_seq","","",44,null],[10,"emit_seq_elt","","",44,null],[10,"emit_map","","",44,null],[10,"emit_map_elt_key","","",44,null],[10,"emit_map_elt_val","","",44,null],[8,"Decodable","","",null,null],[10,"decode","","",45,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",46,null],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",47,null],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",48,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[4,"Cow"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"utimbuf","libc","",null,null],[12,"actime","","",0,null],[12,"modtime","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[3,"rusage","","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[3,"in_addr","","",null,null],[12,"s_addr","","",5,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",7,null],[12,"imr_interface","","",7,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",8,null],[12,"ipv6mr_interface","","",8,null],[3,"hostent","","",null,null],[12,"h_name","","",9,null],[12,"h_aliases","","",9,null],[12,"h_addrtype","","",9,null],[12,"h_length","","",9,null],[12,"h_addr_list","","",9,null],[3,"iovec","","",null,null],[12,"iov_base","","",10,null],[12,"iov_len","","",10,null],[3,"pollfd","","",null,null],[12,"fd","","",11,null],[12,"events","","",11,null],[12,"revents","","",11,null],[3,"winsize","","",null,null],[12,"ws_row","","",12,null],[12,"ws_col","","",12,null],[12,"ws_xpixel","","",12,null],[12,"ws_ypixel","","",12,null],[3,"linger","","",null,null],[12,"l_onoff","","",13,null],[12,"l_linger","","",13,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",14,null],[12,"sa_data","","",14,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",15,null],[12,"sin_port","","",15,null],[12,"sin_addr","","",15,null],[12,"sin_zero","","",15,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",16,null],[12,"sin6_port","","",16,null],[12,"sin6_flowinfo","","",16,null],[12,"sin6_addr","","",16,null],[12,"sin6_scope_id","","",16,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",17,null],[12,"sun_path","","",17,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",18,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",19,null],[12,"ai_family","","",19,null],[12,"ai_socktype","","",19,null],[12,"ai_protocol","","",19,null],[12,"ai_addrlen","","",19,null],[12,"ai_addr","","",19,null],[12,"ai_canonname","","",19,null],[12,"ai_next","","",19,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",20,null],[12,"nl_pid","","",20,null],[12,"nl_groups","","",20,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",21,null],[12,"sll_protocol","","",21,null],[12,"sll_ifindex","","",21,null],[12,"sll_hatype","","",21,null],[12,"sll_pkttype","","",21,null],[12,"sll_halen","","",21,null],[12,"sll_addr","","",21,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",22,null],[12,"tm_min","","",22,null],[12,"tm_hour","","",22,null],[12,"tm_mday","","",22,null],[12,"tm_mon","","",22,null],[12,"tm_year","","",22,null],[12,"tm_wday","","",22,null],[12,"tm_yday","","",22,null],[12,"tm_isdst","","",22,null],[12,"tm_gmtoff","","",22,null],[12,"tm_zone","","",22,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",23,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",24,null],[12,"dli_fbase","","",24,null],[12,"dli_sname","","",24,null],[12,"dli_saddr","","",24,null],[3,"epoll_event","","",null,null],[12,"events","","",25,null],[12,"u64","","",25,null],[3,"utsname","","",null,null],[12,"sysname","","",26,null],[12,"nodename","","",26,null],[12,"release","","",26,null],[12,"version","","",26,null],[12,"machine","","",26,null],[12,"domainname","","",26,null],[3,"lconv","","",null,null],[12,"decimal_point","","",27,null],[12,"thousands_sep","","",27,null],[12,"grouping","","",27,null],[12,"int_curr_symbol","","",27,null],[12,"currency_symbol","","",27,null],[12,"mon_decimal_point","","",27,null],[12,"mon_thousands_sep","","",27,null],[12,"mon_grouping","","",27,null],[12,"positive_sign","","",27,null],[12,"negative_sign","","",27,null],[12,"int_frac_digits","","",27,null],[12,"frac_digits","","",27,null],[12,"p_cs_precedes","","",27,null],[12,"p_sep_by_space","","",27,null],[12,"n_cs_precedes","","",27,null],[12,"n_sep_by_space","","",27,null],[12,"p_sign_posn","","",27,null],[12,"n_sign_posn","","",27,null],[12,"int_p_cs_precedes","","",27,null],[12,"int_p_sep_by_space","","",27,null],[12,"int_n_cs_precedes","","",27,null],[12,"int_n_sep_by_space","","",27,null],[12,"int_p_sign_posn","","",27,null],[12,"int_n_sign_posn","","",27,null],[3,"dirent","","",null,null],[12,"d_ino","","",28,null],[12,"d_off","","",28,null],[12,"d_reclen","","",28,null],[12,"d_type","","",28,null],[12,"d_name","","",28,null],[3,"dirent64","","",null,null],[12,"d_ino","","",29,null],[12,"d_off","","",29,null],[12,"d_reclen","","",29,null],[12,"d_type","","",29,null],[12,"d_name","","",29,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",30,null],[12,"rlim_max","","",30,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",31,null],[12,"gl_pathv","","",31,null],[12,"gl_offs","","",31,null],[12,"gl_flags","","",31,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",32,null],[12,"ifa_name","","",32,null],[12,"ifa_flags","","",32,null],[12,"ifa_addr","","",32,null],[12,"ifa_netmask","","",32,null],[12,"ifa_ifu","","",32,null],[12,"ifa_data","","",32,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",33,null],[12,"pw_passwd","","",33,null],[12,"pw_uid","","",33,null],[12,"pw_gid","","",33,null],[12,"pw_gecos","","",33,null],[12,"pw_dir","","",33,null],[12,"pw_shell","","",33,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",34,null],[12,"f_frsize","","",34,null],[12,"f_blocks","","",34,null],[12,"f_bfree","","",34,null],[12,"f_bavail","","",34,null],[12,"f_files","","",34,null],[12,"f_ffree","","",34,null],[12,"f_favail","","",34,null],[12,"f_fsid","","",34,null],[12,"f_flag","","",34,null],[12,"f_namemax","","",34,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",35,null],[12,"dqb_bsoftlimit","","",35,null],[12,"dqb_curspace","","",35,null],[12,"dqb_ihardlimit","","",35,null],[12,"dqb_isoftlimit","","",35,null],[12,"dqb_curinodes","","",35,null],[12,"dqb_btime","","",35,null],[12,"dqb_itime","","",35,null],[12,"dqb_valid","","",35,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",36,null],[12,"ssi_errno","","",36,null],[12,"ssi_code","","",36,null],[12,"ssi_pid","","",36,null],[12,"ssi_uid","","",36,null],[12,"ssi_fd","","",36,null],[12,"ssi_tid","","",36,null],[12,"ssi_band","","",36,null],[12,"ssi_overrun","","",36,null],[12,"ssi_trapno","","",36,null],[12,"ssi_status","","",36,null],[12,"ssi_int","","",36,null],[12,"ssi_ptr","","",36,null],[12,"ssi_utime","","",36,null],[12,"ssi_stime","","",36,null],[12,"ssi_addr","","",36,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",37,null],[12,"mq_maxmsg","","",37,null],[12,"mq_msgsize","","",37,null],[12,"mq_curmsgs","","",37,null],[3,"cpu_set_t","","",null,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",38,null],[12,"sa_mask","","",38,null],[12,"sa_flags","","",38,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",39,null],[12,"ss_flags","","",39,null],[12,"ss_size","","",39,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",40,null],[12,"si_errno","","",40,null],[12,"si_code","","",40,null],[12,"_pad","","",40,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",41,null],[12,"gl_pathv","","",41,null],[12,"gl_offs","","",41,null],[12,"gl_flags","","",41,null],[3,"ucred","","",null,null],[12,"pid","","",42,null],[12,"uid","","",42,null],[12,"gid","","",42,null],[3,"statfs","","",null,null],[12,"f_type","","",43,null],[12,"f_bsize","","",43,null],[12,"f_blocks","","",43,null],[12,"f_bfree","","",43,null],[12,"f_bavail","","",43,null],[12,"f_files","","",43,null],[12,"f_ffree","","",43,null],[12,"f_fsid","","",43,null],[12,"f_namelen","","",43,null],[12,"f_frsize","","",43,null],[3,"msghdr","","",null,null],[12,"msg_name","","",44,null],[12,"msg_namelen","","",44,null],[12,"msg_iov","","",44,null],[12,"msg_iovlen","","",44,null],[12,"msg_control","","",44,null],[12,"msg_controllen","","",44,null],[12,"msg_flags","","",44,null],[3,"termios","","",null,null],[12,"c_iflag","","",45,null],[12,"c_oflag","","",45,null],[12,"c_cflag","","",45,null],[12,"c_lflag","","",45,null],[12,"c_line","","",45,null],[12,"c_cc","","",45,null],[12,"c_ispeed","","",45,null],[12,"c_ospeed","","",45,null],[3,"flock","","",null,null],[12,"l_type","","",46,null],[12,"l_whence","","",46,null],[12,"l_start","","",46,null],[12,"l_len","","",46,null],[12,"l_pid","","",46,null],[3,"ipc_perm","","",null,null],[12,"__key","","",47,null],[12,"uid","","",47,null],[12,"gid","","",47,null],[12,"cuid","","",47,null],[12,"cgid","","",47,null],[12,"mode","","",47,null],[12,"__seq","","",47,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",48,null],[12,"shm_segsz","","",48,null],[12,"shm_atime","","",48,null],[12,"shm_dtime","","",48,null],[12,"shm_ctime","","",48,null],[12,"shm_cpid","","",48,null],[12,"shm_lpid","","",48,null],[12,"shm_nattch","","",48,null],[3,"sem_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",49,null],[12,"loads","","",49,null],[12,"totalram","","",49,null],[12,"freeram","","",49,null],[12,"sharedram","","",49,null],[12,"bufferram","","",49,null],[12,"totalswap","","",49,null],[12,"freeswap","","",49,null],[12,"procs","","",49,null],[12,"pad","","",49,null],[12,"totalhigh","","",49,null],[12,"freehigh","","",49,null],[12,"mem_unit","","",49,null],[12,"_f","","",49,null],[3,"stat","","",null,null],[12,"st_dev","","",50,null],[12,"st_ino","","",50,null],[12,"st_nlink","","",50,null],[12,"st_mode","","",50,null],[12,"st_uid","","",50,null],[12,"st_gid","","",50,null],[12,"st_rdev","","",50,null],[12,"st_size","","",50,null],[12,"st_blksize","","",50,null],[12,"st_blocks","","",50,null],[12,"st_atime","","",50,null],[12,"st_atime_nsec","","",50,null],[12,"st_mtime","","",50,null],[12,"st_mtime_nsec","","",50,null],[12,"st_ctime","","",50,null],[12,"st_ctime_nsec","","",50,null],[3,"stat64","","",null,null],[12,"st_dev","","",51,null],[12,"st_ino","","",51,null],[12,"st_nlink","","",51,null],[12,"st_mode","","",51,null],[12,"st_uid","","",51,null],[12,"st_gid","","",51,null],[12,"st_rdev","","",51,null],[12,"st_size","","",51,null],[12,"st_blksize","","",51,null],[12,"st_blocks","","",51,null],[12,"st_atime","","",51,null],[12,"st_atime_nsec","","",51,null],[12,"st_mtime","","",51,null],[12,"st_mtime_nsec","","",51,null],[12,"st_ctime","","",51,null],[12,"st_ctime_nsec","","",51,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",52,null],[12,"exponent","","",52,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",53,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",54,null],[12,"swd","","",54,null],[12,"ftw","","",54,null],[12,"fop","","",54,null],[12,"rip","","",54,null],[12,"rdp","","",54,null],[12,"mxcsr","","",54,null],[12,"mxcr_mask","","",54,null],[12,"_st","","",54,null],[12,"_xmm","","",54,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",55,null],[12,"fpregs","","",55,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",56,null],[12,"uc_link","","",56,null],[12,"uc_stack","","",56,null],[12,"uc_mcontext","","",56,null],[12,"uc_sigmask","","",56,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_open","","",null,null],[5,"sem_close","","",null,null],[5,"sem_unlink","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"eventfd","","",null,null],[5,"sysinfo","","",null,null],[5,"openat","","",null,null],[5,"faccessat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"mknodat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"unshare","","",null,null],[5,"sethostname","","",null,null],[5,"setns","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"mkfifoat","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",57,null],[11,"is_none","","Returns `true` if the option is a `None` value",57,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",57,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",57,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",57,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",57,null],[11,"unwrap_or","","Returns the contained value or a default.",57,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",57,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",57,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",57,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",57,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",57,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",57,null],[11,"iter","","Returns an iterator over the possibly contained value.",57,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",57,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",57,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",57,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",57,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",57,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",57,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",57,null],[11,"unwrap_or_default","","Returns the contained value or a default",57,null],[11,"hash","core::num","",58,null],[11,"default","","",58,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",58,null],[11,"cmp","","",58,null],[11,"partial_cmp","","",58,null],[11,"lt","","",58,null],[11,"le","","",58,null],[11,"gt","","",58,null],[11,"ge","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"fmt","","",58,null],[11,"fmt","","",58,null],[11,"fmt","","",58,null],[11,"fmt","","",58,null],[11,"fmt","","",58,null],[11,"fmt","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"eq","core::num::dec2flt","",59,null],[11,"ne","","",59,null],[11,"clone","","",59,null],[11,"fmt","","",59,null],[11,"fmt","","",59,null],[11,"fmt","core::num","",60,null],[11,"eq","","",60,null],[11,"clone","","",60,null],[11,"clone","","",61,null],[11,"fmt","","",61,null],[11,"fmt","","",61,null],[11,"eq","","",62,null],[11,"ne","","",62,null],[11,"clone","","",62,null],[11,"fmt","","",62,null],[11,"fmt","","",62,null],[11,"hash","core::nonzero","",63,null],[11,"fmt","","",63,null],[11,"partial_cmp","","",63,null],[11,"lt","","",63,null],[11,"le","","",63,null],[11,"gt","","",63,null],[11,"ge","","",63,null],[11,"cmp","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"clone","","",63,null],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",63,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",63,null],[11,"new","core::ptr","Creates a new `Unique`.",64,null],[11,"get","","Dereferences the content.",64,null],[11,"get_mut","","Mutably dereferences the content.",64,null],[11,"deref","","",64,null],[11,"fmt","","",64,null],[11,"new","","Creates a new `Shared`.",65,null],[11,"clone","","",65,null],[11,"deref","","",65,null],[11,"fmt","","",65,null],[11,"hash","core::marker","",66,null],[11,"eq","","",66,null],[11,"partial_cmp","","",66,null],[11,"cmp","","",66,null],[11,"clone","","",66,null],[11,"default","","",66,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"hash","core::ops","",67,null],[11,"eq","","",67,null],[11,"clone","","",67,null],[11,"fmt","","",67,null],[11,"hash","","",68,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"clone","","",68,null],[11,"fmt","","",68,null],[11,"contains","","# Examples",68,null],[11,"hash","","",69,null],[11,"eq","","",69,null],[11,"ne","","",69,null],[11,"clone","","",69,null],[11,"fmt","","",69,null],[11,"contains","","# Examples",69,null],[11,"hash","","",70,null],[11,"eq","","",70,null],[11,"ne","","",70,null],[11,"clone","","",70,null],[11,"fmt","","",70,null],[11,"contains","","# Examples",70,null],[11,"hash","","",71,null],[11,"eq","","",71,null],[11,"ne","","",71,null],[11,"clone","","",71,null],[11,"fmt","","",71,null],[11,"contains","","# Examples",71,null],[11,"hash","","",72,null],[11,"eq","","",72,null],[11,"ne","","",72,null],[11,"clone","","",72,null],[11,"fmt","","",72,null],[11,"contains","","# Examples",72,null],[11,"hash","core::cmp","",73,null],[11,"fmt","","",73,null],[11,"eq","","",73,null],[11,"clone","","",73,null],[11,"reverse","","Reverse the `Ordering`.",73,null],[11,"cmp","","",73,null],[11,"partial_cmp","","",73,null],[11,"fmt","libc","",74,null],[11,"fmt","","",74,null],[11,"is","","Returns true if the boxed type is the same as `T`",74,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",74,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",74,null],[11,"is","","Forwards to the method defined on the type `Any`.",74,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",74,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",74,null],[11,"hash","core::any","",75,null],[11,"fmt","","",75,null],[11,"eq","","",75,null],[11,"ne","","",75,null],[11,"clone","","",75,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",75,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",76,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",77,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",78,null],[11,"clone","","",78,null],[11,"new","","Creates a new `AtomicBool`.",76,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",76,null],[11,"store","","Stores a value into the bool.",76,null],[11,"swap","","Stores a value into the bool, returning the old value.",76,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",76,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",76,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",76,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",76,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",76,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",76,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",76,null],[11,"new","","Creates a new `AtomicPtr`.",77,null],[11,"load","","Loads a value from the pointer.",77,null],[11,"store","","Stores a value into the pointer.",77,null],[11,"swap","","Stores a value into the pointer, returning the old value.",77,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",77,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",77,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",77,null],[11,"default","","",79,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",79,null],[11,"new","","Creates a new atomic integer.",79,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",79,null],[11,"store","","Stores a value into the atomic integer.",79,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",79,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",79,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",79,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",79,null],[11,"fetch_add","","Add to the current value, returning the previous value.",79,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",79,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",79,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",79,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",79,null],[11,"default","","",80,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",80,null],[11,"new","","Creates a new atomic integer.",80,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",80,null],[11,"store","","Stores a value into the atomic integer.",80,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",80,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",80,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",80,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",80,null],[11,"fetch_add","","Add to the current value, returning the previous value.",80,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",80,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",80,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",80,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",80,null],[11,"default","","",81,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",81,null],[11,"new","","Creates a new atomic integer.",81,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",81,null],[11,"store","","Stores a value into the atomic integer.",81,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",81,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",81,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",81,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",81,null],[11,"fetch_add","","Add to the current value, returning the previous value.",81,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",81,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",81,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",81,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",81,null],[11,"default","","",82,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",82,null],[11,"new","","Creates a new atomic integer.",82,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",82,null],[11,"store","","Stores a value into the atomic integer.",82,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",82,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",82,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",82,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",82,null],[11,"fetch_add","","Add to the current value, returning the previous value.",82,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",82,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",82,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",82,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",82,null],[11,"default","","",83,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",83,null],[11,"new","","Creates a new atomic integer.",83,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",83,null],[11,"store","","Stores a value into the atomic integer.",83,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",83,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",83,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",83,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",83,null],[11,"fetch_add","","Add to the current value, returning the previous value.",83,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",83,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",83,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",83,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",83,null],[11,"default","","",84,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",84,null],[11,"new","","Creates a new atomic integer.",84,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",84,null],[11,"store","","Stores a value into the atomic integer.",84,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",84,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",84,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",84,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",84,null],[11,"fetch_add","","Add to the current value, returning the previous value.",84,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",84,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",84,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",84,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",84,null],[11,"default","","",85,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",85,null],[11,"new","","Creates a new atomic integer.",85,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",85,null],[11,"store","","Stores a value into the atomic integer.",85,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",85,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",85,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",85,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",85,null],[11,"fetch_add","","Add to the current value, returning the previous value.",85,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",85,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",85,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",85,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",85,null],[11,"default","","",86,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",86,null],[11,"new","","Creates a new atomic integer.",86,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",86,null],[11,"store","","Stores a value into the atomic integer.",86,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",86,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",86,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",86,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",86,null],[11,"fetch_add","","Add to the current value, returning the previous value.",86,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",86,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",86,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",86,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",86,null],[11,"default","","",87,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",87,null],[11,"new","","Creates a new atomic integer.",87,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",87,null],[11,"store","","Stores a value into the atomic integer.",87,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",87,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",87,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",87,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",87,null],[11,"fetch_add","","Add to the current value, returning the previous value.",87,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",87,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",87,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",87,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",87,null],[11,"default","","",88,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",88,null],[11,"new","","Creates a new atomic integer.",88,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",88,null],[11,"store","","Stores a value into the atomic integer.",88,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",88,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",88,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",88,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",88,null],[11,"fetch_add","","Add to the current value, returning the previous value.",88,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",88,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",88,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",88,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",88,null],[11,"fmt","","",76,null],[11,"fmt","","",77,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",89,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",89,null],[11,"set","","Sets the contained value.",89,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",89,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",89,null],[11,"clone","","",89,null],[11,"default","","",89,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",89,null],[11,"partial_cmp","","",89,null],[11,"lt","","",89,null],[11,"le","","",89,null],[11,"gt","","",89,null],[11,"ge","","",89,null],[11,"cmp","","",89,null],[11,"fmt","","",90,null],[11,"eq","","",90,null],[11,"clone","","",90,null],[11,"new","","Creates a new `RefCell` containing `value`.",91,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",91,null],[11,"borrow_state","","Query the current state of this `RefCell`",91,null],[11,"borrow","","Immutably borrows the wrapped value.",91,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",91,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",91,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",91,null],[11,"clone","","",91,null],[11,"default","","",91,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",91,null],[11,"partial_cmp","","",91,null],[11,"lt","","",91,null],[11,"le","","",91,null],[11,"gt","","",91,null],[11,"ge","","",91,null],[11,"cmp","","",91,null],[11,"deref","","",92,null],[11,"clone","","Copies a `Ref`.",92,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",92,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",93,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"deref","","",93,null],[11,"deref_mut","","",93,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",94,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",94,null],[11,"get","","Gets a mutable pointer to the wrapped value.",94,null],[11,"default","","",94,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",95,null],[11,"clone","","",95,null],[11,"next","","",95,null],[11,"size_hint","","",95,null],[11,"count","","",95,null],[11,"last","","",95,null],[11,"len","","",95,null],[11,"fmt","","",96,null],[11,"clone","","",96,null],[11,"next","","",96,null],[11,"size_hint","","",96,null],[11,"count","","",96,null],[11,"nth","","",96,null],[11,"last","","",96,null],[11,"len","","",96,null],[11,"fmt","","",97,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",97,null],[11,"next","","",97,null],[11,"size_hint","","",97,null],[11,"fmt","","",98,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",98,null],[11,"next","","",98,null],[11,"size_hint","","",98,null],[11,"fmt","core::iter::range","",99,null],[11,"clone","","",99,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",69,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",68,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",71,null],[11,"next","core::iter::range","",99,null],[11,"size_hint","","",99,null],[11,"next","","",99,null],[11,"size_hint","","",99,null],[11,"next","","",99,null],[11,"size_hint","","",99,null],[11,"next","core::ops","",68,null],[11,"size_hint","","",68,null],[11,"next_back","","",68,null],[11,"next","","",69,null],[11,"next","","",71,null],[11,"size_hint","","",71,null],[11,"next_back","","",71,null],[11,"fmt","core::iter::sources","",100,null],[11,"clone","","",100,null],[11,"next","","",100,null],[11,"size_hint","","",100,null],[11,"next_back","","",100,null],[11,"fmt","","",101,null],[11,"next","","",101,null],[11,"size_hint","","",101,null],[11,"next_back","","",101,null],[11,"len","","",101,null],[11,"clone","","",101,null],[11,"default","","",101,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",102,null],[11,"clone","","",102,null],[11,"next","","",102,null],[11,"size_hint","","",102,null],[11,"next_back","","",102,null],[11,"len","","",102,null],[11,"fmt","core::iter","",103,null],[11,"clone","","",103,null],[11,"next","","",103,null],[11,"size_hint","","",103,null],[11,"next_back","","",103,null],[11,"fmt","","",104,null],[11,"clone","","",104,null],[11,"next","","",104,null],[11,"size_hint","","",104,null],[11,"next_back","","",104,null],[11,"fmt","","",105,null],[11,"clone","","",105,null],[11,"next","","",105,null],[11,"size_hint","","",105,null],[11,"fmt","","",106,null],[11,"clone","","",106,null],[11,"next","","",106,null],[11,"count","","",106,null],[11,"nth","","",106,null],[11,"find","","",106,null],[11,"last","","",106,null],[11,"size_hint","","",106,null],[11,"next_back","","",106,null],[11,"fmt","","",107,null],[11,"clone","","",107,null],[11,"next","","",107,null],[11,"size_hint","","",107,null],[11,"next_back","","",107,null],[11,"clone","","",108,null],[11,"fmt","","",108,null],[11,"next","","",108,null],[11,"size_hint","","",108,null],[11,"next_back","","",108,null],[11,"clone","","",109,null],[11,"fmt","","",109,null],[11,"next","","",109,null],[11,"size_hint","","",109,null],[11,"next_back","","",109,null],[11,"clone","","",110,null],[11,"fmt","","",110,null],[11,"next","","",110,null],[11,"size_hint","","",110,null],[11,"next_back","","",110,null],[11,"fmt","","",111,null],[11,"clone","","",111,null],[11,"next","","# Overflow Behavior",111,null],[11,"size_hint","","",111,null],[11,"nth","","",111,null],[11,"count","","",111,null],[11,"next_back","","",111,null],[11,"fmt","","",112,null],[11,"clone","","",112,null],[11,"next","","",112,null],[11,"count","","",112,null],[11,"nth","","",112,null],[11,"last","","",112,null],[11,"size_hint","","",112,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",112,null],[11,"is_empty","","Checks if the iterator has finished iterating.",112,null],[11,"clone","","",113,null],[11,"fmt","","",113,null],[11,"next","","",113,null],[11,"size_hint","","",113,null],[11,"clone","","",114,null],[11,"fmt","","",114,null],[11,"next","","",114,null],[11,"size_hint","","",114,null],[11,"fmt","","",115,null],[11,"clone","","",115,null],[11,"next","","",115,null],[11,"nth","","",115,null],[11,"count","","",115,null],[11,"last","","",115,null],[11,"size_hint","","",115,null],[11,"next_back","","",115,null],[11,"fmt","","",116,null],[11,"clone","","",116,null],[11,"next","","",116,null],[11,"nth","","",116,null],[11,"size_hint","","",116,null],[11,"clone","","",117,null],[11,"fmt","","",117,null],[11,"next","","",117,null],[11,"size_hint","","",117,null],[11,"clone","","",118,null],[11,"fmt","","",118,null],[11,"next","","",118,null],[11,"size_hint","","",118,null],[11,"next_back","","",118,null],[11,"fmt","","",119,null],[11,"clone","","",119,null],[11,"next","","",119,null],[11,"nth","","",119,null],[11,"last","","",119,null],[11,"count","","",119,null],[11,"size_hint","","",119,null],[11,"next_back","","",119,null],[11,"clone","","",120,null],[11,"fmt","","",120,null],[11,"next","","",120,null],[11,"size_hint","","",120,null],[11,"next_back","","",120,null],[11,"hash","core::option","",57,null],[11,"fmt","","",57,null],[11,"cmp","","",57,null],[11,"partial_cmp","","",57,null],[11,"lt","","",57,null],[11,"le","","",57,null],[11,"gt","","",57,null],[11,"ge","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"clone","","",57,null],[11,"default","","",57,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",57,null],[11,"fmt","","",121,null],[11,"next","","",121,null],[11,"size_hint","","",121,null],[11,"next_back","","",121,null],[11,"clone","","",121,null],[11,"fmt","","",122,null],[11,"next","","",122,null],[11,"size_hint","","",122,null],[11,"next_back","","",122,null],[11,"fmt","","",123,null],[11,"clone","","",123,null],[11,"next","","",123,null],[11,"size_hint","","",123,null],[11,"next_back","","",123,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",57,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",124,null],[11,"hash","core::result","",125,null],[11,"fmt","","",125,null],[11,"cmp","","",125,null],[11,"partial_cmp","","",125,null],[11,"lt","","",125,null],[11,"le","","",125,null],[11,"gt","","",125,null],[11,"ge","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"clone","","",125,null],[11,"is_ok","","Returns true if the result is `Ok`",125,null],[11,"is_err","","Returns true if the result is `Err`",125,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",125,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",125,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",125,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",125,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",125,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",125,null],[11,"iter","","Returns an iterator over the possibly contained value.",125,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",125,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",125,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",125,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",125,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",125,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",125,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",125,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",125,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",125,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",125,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",125,null],[11,"fmt","","",126,null],[11,"next","","",126,null],[11,"size_hint","","",126,null],[11,"next_back","","",126,null],[11,"clone","","",126,null],[11,"fmt","","",127,null],[11,"next","","",127,null],[11,"size_hint","","",127,null],[11,"next_back","","",127,null],[11,"fmt","","",128,null],[11,"next","","",128,null],[11,"size_hint","","",128,null],[11,"next_back","","",128,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",125,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",129,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",129,null],[11,"next","","",129,null],[11,"size_hint","","",129,null],[11,"count","","",129,null],[11,"nth","","",129,null],[11,"last","","",129,null],[11,"next_back","","",129,null],[11,"clone","","",129,null],[11,"fmt","","",130,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",130,null],[11,"next","","",130,null],[11,"size_hint","","",130,null],[11,"count","","",130,null],[11,"nth","","",130,null],[11,"last","","",130,null],[11,"next_back","","",130,null],[11,"fmt","","",131,null],[11,"clone","","",131,null],[11,"next","","",131,null],[11,"size_hint","","",131,null],[11,"next_back","","",131,null],[11,"fmt","","",132,null],[11,"next","","",132,null],[11,"size_hint","","",132,null],[11,"next_back","","",132,null],[11,"fmt","","",133,null],[11,"fmt","","",134,null],[11,"fmt","","",135,null],[11,"fmt","","",136,null],[11,"next","","",133,null],[11,"size_hint","","",133,null],[11,"next","","",134,null],[11,"size_hint","","",134,null],[11,"next","","",135,null],[11,"size_hint","","",135,null],[11,"next","","",136,null],[11,"size_hint","","",136,null],[11,"fmt","","",137,null],[11,"clone","","",137,null],[11,"next","","",137,null],[11,"size_hint","","",137,null],[11,"count","","",137,null],[11,"nth","","",137,null],[11,"last","","",137,null],[11,"next_back","","",137,null],[11,"fmt","","",138,null],[11,"clone","","",138,null],[11,"next","","",138,null],[11,"size_hint","","",138,null],[11,"count","","",138,null],[11,"nth","","",138,null],[11,"last","","",138,null],[11,"next_back","","",138,null],[11,"fmt","","",139,null],[11,"next","","",139,null],[11,"size_hint","","",139,null],[11,"count","","",139,null],[11,"nth","","",139,null],[11,"last","","",139,null],[11,"next_back","","",139,null],[11,"fmt","core::str::pattern","",140,null],[11,"eq","","",140,null],[11,"ne","","",140,null],[11,"clone","","",140,null],[11,"fmt","","",141,null],[11,"clone","","",141,null],[11,"haystack","","",141,null],[11,"next","","",141,null],[11,"next_match","","",141,null],[11,"next_reject","","",141,null],[11,"next_back","","",141,null],[11,"next_match_back","","",141,null],[11,"next_reject_back","","",141,null],[11,"fmt","","",142,null],[11,"clone","","",142,null],[11,"haystack","","",142,null],[11,"next","","",142,null],[11,"next_match","","",142,null],[11,"next_reject","","",142,null],[11,"next_back","","",142,null],[11,"next_match_back","","",142,null],[11,"next_reject_back","","",142,null],[11,"clone","","",143,null],[11,"fmt","","",143,null],[11,"haystack","","",143,null],[11,"next","","",143,null],[11,"next_match","","",143,null],[11,"next_reject","","",143,null],[11,"next_back","","",143,null],[11,"next_match_back","","",143,null],[11,"next_reject_back","","",143,null],[11,"fmt","","",144,null],[11,"clone","","",144,null],[11,"haystack","","",144,null],[11,"next","","",144,null],[11,"next_match","","",144,null],[11,"next_back","","",144,null],[11,"next_match_back","","",144,null],[11,"eq","core::str","",145,null],[11,"ne","","",145,null],[11,"clone","","",145,null],[11,"fmt","","",145,null],[11,"fmt","","",145,null],[11,"fmt","","",146,null],[11,"clone","","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",146,null],[11,"fmt","","",146,null],[11,"fmt","","",147,null],[11,"clone","","",147,null],[11,"next","","",147,null],[11,"size_hint","","",147,null],[11,"next_back","","",147,null],[11,"as_str","","View the underlying data as a subslice of the original data.",147,null],[11,"fmt","","",148,null],[11,"clone","","",148,null],[11,"next","","",148,null],[11,"size_hint","","",148,null],[11,"next_back","","",148,null],[11,"as_str","","View the underlying data as a subslice of the original data.",148,null],[11,"fmt","","",149,null],[11,"clone","","",149,null],[11,"next","","",149,null],[11,"size_hint","","",149,null],[11,"count","","",149,null],[11,"last","","",149,null],[11,"nth","","",149,null],[11,"next_back","","",149,null],[11,"len","","",149,null],[11,"fmt","","",150,null],[11,"next","","",150,null],[11,"clone","","",150,null],[11,"fmt","","",151,null],[11,"next","","",151,null],[11,"clone","","",151,null],[11,"next_back","","",150,null],[11,"next_back","","",151,null],[11,"fmt","","",152,null],[11,"next","","",152,null],[11,"clone","","",152,null],[11,"fmt","","",153,null],[11,"next","","",153,null],[11,"clone","","",153,null],[11,"next_back","","",152,null],[11,"next_back","","",153,null],[11,"fmt","","",154,null],[11,"next","","",154,null],[11,"clone","","",154,null],[11,"fmt","","",155,null],[11,"next","","",155,null],[11,"clone","","",155,null],[11,"fmt","","",156,null],[11,"next","","",156,null],[11,"clone","","",156,null],[11,"fmt","","",157,null],[11,"next","","",157,null],[11,"clone","","",157,null],[11,"next_back","","",156,null],[11,"next_back","","",157,null],[11,"fmt","","",158,null],[11,"next","","",158,null],[11,"clone","","",158,null],[11,"fmt","","",159,null],[11,"next","","",159,null],[11,"clone","","",159,null],[11,"next_back","","",158,null],[11,"next_back","","",159,null],[11,"fmt","","",160,null],[11,"clone","","",160,null],[11,"next","","",160,null],[11,"size_hint","","",160,null],[11,"next_back","","",160,null],[11,"fmt","","",161,null],[11,"clone","","",161,null],[11,"next","","",161,null],[11,"size_hint","","",161,null],[11,"next_back","","",161,null],[11,"default","core::hash::sip","",162,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"clone","","",162,null],[11,"fmt","","",162,null],[11,"default","","",163,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"clone","","",163,null],[11,"fmt","","",163,null],[11,"default","","",164,{"inputs":[],"output":{"name":"siphasher"}}],[11,"clone","","",164,null],[11,"fmt","","",164,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",164,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",164,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",162,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",162,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",163,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",163,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"write","","",164,null],[11,"finish","","",164,null],[11,"write","","",162,null],[11,"finish","","",162,null],[11,"write","","",163,null],[11,"finish","","",163,null],[11,"fmt","core::hash","",165,null],[11,"build_hasher","","",165,null],[11,"clone","","",165,null],[11,"default","","",165,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",166,null],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",167,null],[11,"finish","","Finishes output and returns any error encountered.",167,null],[11,"field","","Adds a new field to the generated tuple struct output.",168,null],[11,"finish","","Finishes output and returns any error encountered.",168,null],[11,"entry","","Adds a new entry to the set output.",169,null],[11,"entries","","Adds the contents of an iterator of entries to the set output.",169,null],[11,"finish","","Finishes output and returns any error encountered.",169,null],[11,"entry","","Adds a new entry to the list output.",170,null],[11,"entries","","Adds the contents of an iterator of entries to the list output.",170,null],[11,"finish","","Finishes output and returns any error encountered.",170,null],[11,"entry","","Adds a new entry to the map output.",171,null],[11,"entries","","Adds the contents of an iterator of entries to the map output.",171,null],[11,"finish","","Finishes output and returns any error encountered.",171,null],[11,"partial_cmp","core::fmt","",172,null],[11,"eq","","",172,null],[11,"cmp","","",172,null],[11,"hash","","",172,null],[11,"default","","",172,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",172,null],[11,"clone","","",172,null],[11,"clone","","",173,null],[11,"fmt","","",173,null],[11,"fmt","","",173,null],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",174,null],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",174,null],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",174,null],[11,"write_fmt","","Writes some formatted information into this instance",174,null],[11,"flags","","Flags for formatting (packed version of rt::Flag)",174,null],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",174,null],[11,"align","","Flag indicating what form of alignment was requested",174,null],[11,"width","","Optionally specified integer width that the output should be",174,null],[11,"precision","","Optionally specified precision for numeric types",174,null],[11,"sign_plus","","Determines if the `+` flag was specified.",174,null],[11,"sign_minus","","Determines if the `-` flag was specified.",174,null],[11,"alternate","","Determines if the `#` flag was specified.",174,null],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",174,null],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",174,null],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",174,null],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",174,null],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",174,null],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",174,null],[11,"write_str","","",174,null],[11,"write_char","","",174,null],[11,"write_fmt","","",174,null],[11,"fmt","","",172,null],[11,"fmt","core::marker","",66,null],[11,"fmt","core::cell","",89,null],[11,"fmt","","",91,null],[11,"fmt","","",92,null],[11,"fmt","","",93,null],[11,"fmt","","",94,null],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",175,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",175,null],[11,"clone","libc","",50,null],[11,"clone","","",51,null],[11,"clone","","",176,null],[11,"clone","","",52,null],[11,"clone","","",53,null],[11,"clone","","",54,null],[11,"clone","","",55,null],[11,"clone","","",56,null],[11,"clone","","",177,null],[11,"clone","","",49,null],[11,"clone","","",38,null],[11,"clone","","",39,null],[11,"clone","","",40,null],[11,"clone","","",41,null],[11,"clone","","",42,null],[11,"clone","","",43,null],[11,"clone","","",44,null],[11,"clone","","",45,null],[11,"clone","","",46,null],[11,"clone","","",47,null],[11,"clone","","",48,null],[11,"clone","","",178,null],[11,"clone","","",28,null],[11,"clone","","",29,null],[11,"clone","","",30,null],[11,"clone","","",31,null],[11,"clone","","",32,null],[11,"clone","","",179,null],[11,"clone","","",180,null],[11,"clone","","",181,null],[11,"clone","","",182,null],[11,"clone","","",33,null],[11,"clone","","",34,null],[11,"clone","","",35,null],[11,"clone","","",36,null],[11,"clone","","",183,null],[11,"clone","","",37,null],[11,"clone","","",184,null],[11,"clone","","",14,null],[11,"clone","","",15,null],[11,"clone","","",16,null],[11,"clone","","",17,null],[11,"clone","","",18,null],[11,"clone","","",19,null],[11,"clone","","",20,null],[11,"clone","","",21,null],[11,"clone","","",185,null],[11,"clone","","",22,null],[11,"clone","","",23,null],[11,"clone","","",24,null],[11,"clone","","",25,null],[11,"clone","","",26,null],[11,"clone","","",27,null],[11,"clone","","",0,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"clone","","",4,null],[11,"clone","","",5,null],[11,"clone","","",6,null],[11,"clone","","",7,null],[11,"clone","","",8,null],[11,"clone","","",9,null],[11,"clone","","",10,null],[11,"clone","","",11,null],[11,"clone","","",12,null],[11,"clone","","",13,null],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"clockid_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"key_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"__priority_which_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"CBAUD","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"NCCS","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"EXTPROC","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"FIONREAD","","",null,null],[17,"TIOCCONS","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null]],"paths":[[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"sysinfo"],[3,"stat"],[3,"stat64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[4,"Option"],[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"Clone"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,null],[10,"abs_sub","","The positive difference of two numbers.",4,null],[10,"signum","","Returns the sign of the number.",4,null],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,null],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,null],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",5,null],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",5,null],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",6,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",7,null],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",8,null],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",9,null],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",11,null],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",11,null],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",11,null],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",11,null],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",11,null],[10,"floor","","Returns the largest integer less than or equal to a number.",11,null],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",11,null],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",11,null],[10,"trunc","","Return the integer part of a number.",11,null],[10,"fract","","Returns the fractional part of a number.",11,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",11,null],[10,"signum","","Returns a number that represents the sign of `self`.",11,null],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",11,null],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",11,null],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",11,null],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",11,null],[10,"powi","","Raise a number to an integer power.",11,null],[10,"powf","","Raise a number to a floating point power.",11,null],[10,"sqrt","","Take the square root of a number.",11,null],[10,"exp","","Returns `e^(self)`, (the exponential function).",11,null],[10,"exp2","","Returns `2^(self)`.",11,null],[10,"ln","","Returns the natural logarithm of the number.",11,null],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",11,null],[10,"log2","","Returns the base 2 logarithm of the number.",11,null],[10,"log10","","Returns the base 10 logarithm of the number.",11,null],[10,"max","","Returns the maximum of the two numbers.",11,null],[10,"min","","Returns the minimum of the two numbers.",11,null],[10,"abs_sub","","The positive difference of two numbers.",11,null],[10,"cbrt","","Take the cubic root of a number.",11,null],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",11,null],[10,"sin","","Computes the sine of a number (in radians).",11,null],[10,"cos","","Computes the cosine of a number (in radians).",11,null],[10,"tan","","Computes the tangent of a number (in radians).",11,null],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",11,null],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",11,null],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",11,null],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",11,null],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",11,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",11,null],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",11,null],[10,"sinh","","Hyperbolic sine function.",11,null],[10,"cosh","","Hyperbolic cosine function.",11,null],[10,"tanh","","Hyperbolic tangent function.",11,null],[10,"asinh","","Inverse hyperbolic sine function.",11,null],[10,"acosh","","Inverse hyperbolic cosine function.",11,null],[10,"atanh","","Inverse hyperbolic tangent function.",11,null],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",11,null],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",12,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",12,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",12,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",12,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",12,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",12,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",12,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",12,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",12,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",12,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",12,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",12,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",14,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",15,null],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",15,null],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",15,null],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",15,null],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",15,null],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",15,null],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",15,null],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",15,null],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",15,null],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",15,null],[10,"swap_bytes","","Reverses the byte order of the integer.",15,null],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",15,null],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",15,null],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",15,null],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",16,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",16,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"fmt","","",0,null]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"Bounded"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
searchIndex["rustc_demangle"] = {"doc":"Demangle Rust compiler symbol names.","items":[[3,"Demangle","rustc_demangle","Representation of a demangled symbol name.",null,null],[5,"demangle","","De-mangles a Rust symbol into a more readable version",null,{"inputs":[{"name":"str"}],"output":{"name":"demangle"}}],[11,"as_str","","Returns the underlying string that&#39;s being demangled.",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null]],"paths":[[3,"Demangle"]]};
searchIndex["cfg_if"] = {"doc":"A macro for defining #[cfg] if-else statements.","items":[[14,"cfg_if!","cfg_if","",null,null]],"paths":[]};
initSearch(searchIndex);
